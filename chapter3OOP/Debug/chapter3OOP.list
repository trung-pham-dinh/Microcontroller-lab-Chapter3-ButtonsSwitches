
chapter3OOP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002c84  08002c84  00012c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cd4  08002cd4  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08002cd4  08002cd4  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cd4  08002cd4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cd4  08002cd4  00012cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cd8  08002cd8  00012cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08002cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000094  08002d70  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08002d70  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb80  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002592  00000000  00000000  0002ec3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  000311d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  00031d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b6c  00000000  00000000  00032778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d31c  00000000  00000000  0004b2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087b9d  00000000  00000000  00058600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e019d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f50  00000000  00000000  000e01f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c6c 	.word	0x08002c6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08002c6c 	.word	0x08002c6c

0800014c <init_fsm_input_processing>:
} ButtonState;
ButtonState* buttonState;

static uint8_t* flagPressed;

void init_fsm_input_processing(const uint16_t* port, unsigned int no_buttons) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	init_button_reading(port, no_buttons);
 8000156:	6839      	ldr	r1, [r7, #0]
 8000158:	6878      	ldr	r0, [r7, #4]
 800015a:	f000 f8a1 	bl	80002a0 <init_button_reading>

	buttonState = (ButtonState*)malloc(NO_OF_BUTTONS*sizeof(ButtonState));
 800015e:	4b17      	ldr	r3, [pc, #92]	; (80001bc <init_fsm_input_processing+0x70>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	4618      	mov	r0, r3
 8000164:	f002 fcfa 	bl	8002b5c <malloc>
 8000168:	4603      	mov	r3, r0
 800016a:	461a      	mov	r2, r3
 800016c:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <init_fsm_input_processing+0x74>)
 800016e:	601a      	str	r2, [r3, #0]
	flagPressed = (uint8_t*)malloc(NO_OF_BUTTONS*sizeof(uint8_t));
 8000170:	4b12      	ldr	r3, [pc, #72]	; (80001bc <init_fsm_input_processing+0x70>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	4618      	mov	r0, r3
 8000176:	f002 fcf1 	bl	8002b5c <malloc>
 800017a:	4603      	mov	r3, r0
 800017c:	461a      	mov	r2, r3
 800017e:	4b11      	ldr	r3, [pc, #68]	; (80001c4 <init_fsm_input_processing+0x78>)
 8000180:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 8000182:	2300      	movs	r3, #0
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	e00e      	b.n	80001a6 <init_fsm_input_processing+0x5a>
		 buttonState[i] = STATE_RELEASED;
 8000188:	4b0d      	ldr	r3, [pc, #52]	; (80001c0 <init_fsm_input_processing+0x74>)
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	4413      	add	r3, r2
 8000190:	2200      	movs	r2, #0
 8000192:	701a      	strb	r2, [r3, #0]
		 flagPressed[i] = 0;
 8000194:	4b0b      	ldr	r3, [pc, #44]	; (80001c4 <init_fsm_input_processing+0x78>)
 8000196:	681a      	ldr	r2, [r3, #0]
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	4413      	add	r3, r2
 800019c:	2200      	movs	r2, #0
 800019e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	3301      	adds	r3, #1
 80001a4:	60fb      	str	r3, [r7, #12]
 80001a6:	68fa      	ldr	r2, [r7, #12]
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <init_fsm_input_processing+0x70>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	429a      	cmp	r2, r3
 80001ae:	d3eb      	bcc.n	8000188 <init_fsm_input_processing+0x3c>
	}
}
 80001b0:	bf00      	nop
 80001b2:	bf00      	nop
 80001b4:	3710      	adds	r7, #16
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	2000011c 	.word	0x2000011c
 80001c0:	20000118 	.word	0x20000118
 80001c4:	200000b0 	.word	0x200000b0

080001c8 <fsm_for_input_processing>:
void fsm_for_input_processing(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e033      	b.n	800023c <fsm_for_input_processing+0x74>
		switch(buttonState[i]) {
 80001d4:	4b1e      	ldr	r3, [pc, #120]	; (8000250 <fsm_for_input_processing+0x88>)
 80001d6:	681a      	ldr	r2, [r3, #0]
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4413      	add	r3, r2
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d002      	beq.n	80001e8 <fsm_for_input_processing+0x20>
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	d00f      	beq.n	8000206 <fsm_for_input_processing+0x3e>
 80001e6:	e026      	b.n	8000236 <fsm_for_input_processing+0x6e>
		case STATE_RELEASED:
			if(is_button_pressed(i)) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 f8f7 	bl	80003e0 <is_button_pressed>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d01b      	beq.n	8000230 <fsm_for_input_processing+0x68>
				buttonState[i] = STATE_PRESSED;
 80001f8:	4b15      	ldr	r3, [pc, #84]	; (8000250 <fsm_for_input_processing+0x88>)
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4413      	add	r3, r2
 8000200:	2201      	movs	r2, #1
 8000202:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000204:	e014      	b.n	8000230 <fsm_for_input_processing+0x68>
		case STATE_PRESSED:
			if(!is_button_pressed(i)) {
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	b2db      	uxtb	r3, r3
 800020a:	4618      	mov	r0, r3
 800020c:	f000 f8e8 	bl	80003e0 <is_button_pressed>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d10e      	bne.n	8000234 <fsm_for_input_processing+0x6c>
				buttonState[i] = STATE_RELEASED;
 8000216:	4b0e      	ldr	r3, [pc, #56]	; (8000250 <fsm_for_input_processing+0x88>)
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4413      	add	r3, r2
 800021e:	2200      	movs	r2, #0
 8000220:	701a      	strb	r2, [r3, #0]
				flagPressed[i] = 1;
 8000222:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <fsm_for_input_processing+0x8c>)
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4413      	add	r3, r2
 800022a:	2201      	movs	r2, #1
 800022c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800022e:	e001      	b.n	8000234 <fsm_for_input_processing+0x6c>
			break;
 8000230:	bf00      	nop
 8000232:	e000      	b.n	8000236 <fsm_for_input_processing+0x6e>
			break;
 8000234:	bf00      	nop
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	3301      	adds	r3, #1
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	4b06      	ldr	r3, [pc, #24]	; (8000258 <fsm_for_input_processing+0x90>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	429a      	cmp	r2, r3
 8000244:	d3c6      	bcc.n	80001d4 <fsm_for_input_processing+0xc>
		}
	}
}
 8000246:	bf00      	nop
 8000248:	bf00      	nop
 800024a:	3708      	adds	r7, #8
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000118 	.word	0x20000118
 8000254:	200000b0 	.word	0x200000b0
 8000258:	2000011c 	.word	0x2000011c

0800025c <getPressFlag>:

uint8_t getPressFlag(unsigned int index) {
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
	return flagPressed[index];
 8000264:	4b04      	ldr	r3, [pc, #16]	; (8000278 <getPressFlag+0x1c>)
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4413      	add	r3, r2
 800026c:	781b      	ldrb	r3, [r3, #0]
}
 800026e:	4618      	mov	r0, r3
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	200000b0 	.word	0x200000b0

0800027c <resetPressFlag>:
void resetPressFlag(unsigned int index) {
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	flagPressed[index] = 0;
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <resetPressFlag+0x20>)
 8000286:	681a      	ldr	r2, [r3, #0]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4413      	add	r3, r2
 800028c:	2200      	movs	r2, #0
 800028e:	701a      	strb	r2, [r3, #0]
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	200000b0 	.word	0x200000b0

080002a0 <init_button_reading>:
static GPIO_PinState* buttonBuffer;
// we define two buffers for debouncing
static GPIO_PinState* debounceButtonBuffer1;
static GPIO_PinState* debounceButtonBuffer2;

void init_button_reading(const uint16_t* port, unsigned int no_buttons) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	NO_OF_BUTTONS = no_buttons;
 80002aa:	4a21      	ldr	r2, [pc, #132]	; (8000330 <init_button_reading+0x90>)
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	6013      	str	r3, [r2, #0]

	buttonPort = port; // take array from user
 80002b0:	4a20      	ldr	r2, [pc, #128]	; (8000334 <init_button_reading+0x94>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	6013      	str	r3, [r2, #0]

	buttonBuffer = (GPIO_PinState*)malloc(NO_OF_BUTTONS*sizeof(GPIO_PinState));
 80002b6:	4b1e      	ldr	r3, [pc, #120]	; (8000330 <init_button_reading+0x90>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 fc4e 	bl	8002b5c <malloc>
 80002c0:	4603      	mov	r3, r0
 80002c2:	461a      	mov	r2, r3
 80002c4:	4b1c      	ldr	r3, [pc, #112]	; (8000338 <init_button_reading+0x98>)
 80002c6:	601a      	str	r2, [r3, #0]
	debounceButtonBuffer1 = (GPIO_PinState*)malloc(NO_OF_BUTTONS*sizeof(GPIO_PinState));
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <init_button_reading+0x90>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f002 fc45 	bl	8002b5c <malloc>
 80002d2:	4603      	mov	r3, r0
 80002d4:	461a      	mov	r2, r3
 80002d6:	4b19      	ldr	r3, [pc, #100]	; (800033c <init_button_reading+0x9c>)
 80002d8:	601a      	str	r2, [r3, #0]
	debounceButtonBuffer2 = (GPIO_PinState*)malloc(NO_OF_BUTTONS*sizeof(GPIO_PinState));
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <init_button_reading+0x90>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fc3c 	bl	8002b5c <malloc>
 80002e4:	4603      	mov	r3, r0
 80002e6:	461a      	mov	r2, r3
 80002e8:	4b15      	ldr	r3, [pc, #84]	; (8000340 <init_button_reading+0xa0>)
 80002ea:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
 80002f0:	e014      	b.n	800031c <init_button_reading+0x7c>
		buttonBuffer[i] = BUTTON_RELEASED;
 80002f2:	4b11      	ldr	r3, [pc, #68]	; (8000338 <init_button_reading+0x98>)
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	4413      	add	r3, r2
 80002fa:	2201      	movs	r2, #1
 80002fc:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = BUTTON_RELEASED;
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <init_button_reading+0x9c>)
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	4413      	add	r3, r2
 8000306:	2201      	movs	r2, #1
 8000308:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = BUTTON_RELEASED;
 800030a:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <init_button_reading+0xa0>)
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	4413      	add	r3, r2
 8000312:	2201      	movs	r2, #1
 8000314:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	3301      	adds	r3, #1
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	68fa      	ldr	r2, [r7, #12]
 800031e:	4b04      	ldr	r3, [pc, #16]	; (8000330 <init_button_reading+0x90>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	429a      	cmp	r2, r3
 8000324:	d3e5      	bcc.n	80002f2 <init_button_reading+0x52>
	}
}
 8000326:	bf00      	nop
 8000328:	bf00      	nop
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	2000011c 	.word	0x2000011c
 8000334:	20000120 	.word	0x20000120
 8000338:	200000b4 	.word	0x200000b4
 800033c:	200000b8 	.word	0x200000b8
 8000340:	200000bc 	.word	0x200000bc

08000344 <button_reading>:

void button_reading(void) {
 8000344:	b590      	push	{r4, r7, lr}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 800034a:	2300      	movs	r3, #0
 800034c:	71fb      	strb	r3, [r7, #7]
 800034e:	e031      	b.n	80003b4 <button_reading+0x70>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000350:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <button_reading+0x84>)
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	441a      	add	r2, r3
 8000358:	4b1c      	ldr	r3, [pc, #112]	; (80003cc <button_reading+0x88>)
 800035a:	6819      	ldr	r1, [r3, #0]
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	440b      	add	r3, r1
 8000360:	7812      	ldrb	r2, [r2, #0]
 8000362:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_PORT, buttonPort[i]);
 8000364:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <button_reading+0x8c>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	4413      	add	r3, r2
 800036e:	8819      	ldrh	r1, [r3, #0]
 8000370:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <button_reading+0x84>)
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	18d4      	adds	r4, r2, r3
 8000378:	4816      	ldr	r0, [pc, #88]	; (80003d4 <button_reading+0x90>)
 800037a:	f001 fb9d 	bl	8001ab8 <HAL_GPIO_ReadPin>
 800037e:	4603      	mov	r3, r0
 8000380:	7023      	strb	r3, [r4, #0]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 8000382:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <button_reading+0x84>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	4413      	add	r3, r2
 800038a:	781a      	ldrb	r2, [r3, #0]
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <button_reading+0x88>)
 800038e:	6819      	ldr	r1, [r3, #0]
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	440b      	add	r3, r1
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	429a      	cmp	r2, r3
 8000398:	d109      	bne.n	80003ae <button_reading+0x6a>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <button_reading+0x84>)
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	441a      	add	r2, r3
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <button_reading+0x94>)
 80003a4:	6819      	ldr	r1, [r3, #0]
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	440b      	add	r3, r1
 80003aa:	7812      	ldrb	r2, [r2, #0]
 80003ac:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	3301      	adds	r3, #1
 80003b2:	71fb      	strb	r3, [r7, #7]
 80003b4:	79fa      	ldrb	r2, [r7, #7]
 80003b6:	4b09      	ldr	r3, [pc, #36]	; (80003dc <button_reading+0x98>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d3c8      	bcc.n	8000350 <button_reading+0xc>
		}
	}
}
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd90      	pop	{r4, r7, pc}
 80003c8:	200000b8 	.word	0x200000b8
 80003cc:	200000bc 	.word	0x200000bc
 80003d0:	20000120 	.word	0x20000120
 80003d4:	40010800 	.word	0x40010800
 80003d8:	200000b4 	.word	0x200000b4
 80003dc:	2000011c 	.word	0x2000011c

080003e0 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index) {
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 80003ea:	79fa      	ldrb	r2, [r7, #7]
 80003ec:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <is_button_pressed+0x38>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d301      	bcc.n	80003f8 <is_button_pressed+0x18>
 80003f4:	2300      	movs	r3, #0
 80003f6:	e009      	b.n	800040c <is_button_pressed+0x2c>
	return (buttonBuffer[index] == BUTTON_PRESSED);
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <is_button_pressed+0x3c>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	4413      	add	r3, r2
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	bf0c      	ite	eq
 8000406:	2301      	moveq	r3, #1
 8000408:	2300      	movne	r3, #0
 800040a:	b2db      	uxtb	r3, r3
}
 800040c:	4618      	mov	r0, r3
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	2000011c 	.word	0x2000011c
 800041c:	200000b4 	.word	0x200000b4

08000420 <init_led7>:
static const uint16_t* seg7En;

static uint8_t* seg7Val;
static uint16_t allseg;

void init_led7(const uint16_t* en, const uint16_t* port, uint8_t* buffer, unsigned int no_led7) {
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	60b9      	str	r1, [r7, #8]
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	603b      	str	r3, [r7, #0]
	NO_OF_LED7 = no_led7;
 800042e:	4a1d      	ldr	r2, [pc, #116]	; (80004a4 <init_led7+0x84>)
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	6013      	str	r3, [r2, #0]

	seg7En = en;
 8000434:	4a1c      	ldr	r2, [pc, #112]	; (80004a8 <init_led7+0x88>)
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	6013      	str	r3, [r2, #0]
	seg7Port = port;
 800043a:	4a1c      	ldr	r2, [pc, #112]	; (80004ac <init_led7+0x8c>)
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	6013      	str	r3, [r2, #0]
	seg7Val = buffer;
 8000440:	4a1b      	ldr	r2, [pc, #108]	; (80004b0 <init_led7+0x90>)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	6013      	str	r3, [r2, #0]
	allseg = seg7Port[0] | seg7Port[1] | seg7Port[2] | seg7Port[3] | seg7Port[4] | seg7Port[5] | seg7Port[6];
 8000446:	4b19      	ldr	r3, [pc, #100]	; (80004ac <init_led7+0x8c>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	881a      	ldrh	r2, [r3, #0]
 800044c:	4b17      	ldr	r3, [pc, #92]	; (80004ac <init_led7+0x8c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	3302      	adds	r3, #2
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	4313      	orrs	r3, r2
 8000456:	b29a      	uxth	r2, r3
 8000458:	4b14      	ldr	r3, [pc, #80]	; (80004ac <init_led7+0x8c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	3304      	adds	r3, #4
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <init_led7+0x8c>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	3306      	adds	r3, #6
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	4313      	orrs	r3, r2
 800046e:	b29a      	uxth	r2, r3
 8000470:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <init_led7+0x8c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	3308      	adds	r3, #8
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
 800047c:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <init_led7+0x8c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	330a      	adds	r3, #10
 8000482:	881b      	ldrh	r3, [r3, #0]
 8000484:	4313      	orrs	r3, r2
 8000486:	b29a      	uxth	r2, r3
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <init_led7+0x8c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	330c      	adds	r3, #12
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <init_led7+0x94>)
 8000496:	801a      	strh	r2, [r3, #0]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	200000c0 	.word	0x200000c0
 80004a8:	200000c8 	.word	0x200000c8
 80004ac:	200000c4 	.word	0x200000c4
 80004b0:	200000cc 	.word	0x200000cc
 80004b4:	200000d0 	.word	0x200000d0

080004b8 <display_7SEG>:

void display_7SEG(unsigned int index) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SEG_PORT, allseg, RESET_SEG);
 80004c0:	4b2b      	ldr	r3, [pc, #172]	; (8000570 <display_7SEG+0xb8>)
 80004c2:	881b      	ldrh	r3, [r3, #0]
 80004c4:	2201      	movs	r2, #1
 80004c6:	4619      	mov	r1, r3
 80004c8:	482a      	ldr	r0, [pc, #168]	; (8000574 <display_7SEG+0xbc>)
 80004ca:	f001 fb0c 	bl	8001ae6 <HAL_GPIO_WritePin>

	uint8_t hexcode = seg7Hex[seg7Val[index]];
 80004ce:	4b2a      	ldr	r3, [pc, #168]	; (8000578 <display_7SEG+0xc0>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4413      	add	r3, r2
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	461a      	mov	r2, r3
 80004da:	4b28      	ldr	r3, [pc, #160]	; (800057c <display_7SEG+0xc4>)
 80004dc:	5c9b      	ldrb	r3, [r3, r2]
 80004de:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < 7; i++) {
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	e015      	b.n	8000512 <display_7SEG+0x5a>
		if((hexcode & (0x40 >> i)) == 0)
 80004e6:	7bfa      	ldrb	r2, [r7, #15]
 80004e8:	2140      	movs	r1, #64	; 0x40
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	fa41 f303 	asr.w	r3, r1, r3
 80004f0:	4013      	ands	r3, r2
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d10a      	bne.n	800050c <display_7SEG+0x54>
			HAL_GPIO_WritePin(SEG_PORT, seg7Port[i], SET_SEG);
 80004f6:	4b22      	ldr	r3, [pc, #136]	; (8000580 <display_7SEG+0xc8>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	4413      	add	r3, r2
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	2200      	movs	r2, #0
 8000504:	4619      	mov	r1, r3
 8000506:	481b      	ldr	r0, [pc, #108]	; (8000574 <display_7SEG+0xbc>)
 8000508:	f001 faed 	bl	8001ae6 <HAL_GPIO_WritePin>
	for(int i = 0; i < 7; i++) {
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	3301      	adds	r3, #1
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	2b06      	cmp	r3, #6
 8000516:	dde6      	ble.n	80004e6 <display_7SEG+0x2e>
	}

	for(int i = 0;  i < NO_OF_LED7; i++) {
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	e01d      	b.n	800055a <display_7SEG+0xa2>
		if(i == index)
 800051e:	693b      	ldr	r3, [r7, #16]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	429a      	cmp	r2, r3
 8000524:	d10b      	bne.n	800053e <display_7SEG+0x86>
			HAL_GPIO_WritePin(SEG_PORT, seg7En[i], ENABLE_LED);
 8000526:	4b17      	ldr	r3, [pc, #92]	; (8000584 <display_7SEG+0xcc>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	4413      	add	r3, r2
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	2200      	movs	r2, #0
 8000534:	4619      	mov	r1, r3
 8000536:	480f      	ldr	r0, [pc, #60]	; (8000574 <display_7SEG+0xbc>)
 8000538:	f001 fad5 	bl	8001ae6 <HAL_GPIO_WritePin>
 800053c:	e00a      	b.n	8000554 <display_7SEG+0x9c>
		else
			HAL_GPIO_WritePin(SEG_PORT, seg7En[i], DISABLE_LED);
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <display_7SEG+0xcc>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	4413      	add	r3, r2
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	2201      	movs	r2, #1
 800054c:	4619      	mov	r1, r3
 800054e:	4809      	ldr	r0, [pc, #36]	; (8000574 <display_7SEG+0xbc>)
 8000550:	f001 fac9 	bl	8001ae6 <HAL_GPIO_WritePin>
	for(int i = 0;  i < NO_OF_LED7; i++) {
 8000554:	693b      	ldr	r3, [r7, #16]
 8000556:	3301      	adds	r3, #1
 8000558:	613b      	str	r3, [r7, #16]
 800055a:	693a      	ldr	r2, [r7, #16]
 800055c:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <display_7SEG+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	429a      	cmp	r2, r3
 8000562:	d3dc      	bcc.n	800051e <display_7SEG+0x66>
	}
}
 8000564:	bf00      	nop
 8000566:	bf00      	nop
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	200000d0 	.word	0x200000d0
 8000574:	40010c00 	.word	0x40010c00
 8000578:	200000cc 	.word	0x200000cc
 800057c:	20000000 	.word	0x20000000
 8000580:	200000c4 	.word	0x200000c4
 8000584:	200000c8 	.word	0x200000c8
 8000588:	200000c0 	.word	0x200000c0

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b598      	push	{r3, r4, r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 ffa8 	bl	80014e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f8f2 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f978 	bl	800088c <MX_GPIO_Init>
  MX_TIM2_Init();
 800059c:	f000 f92a 	bl	80007f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005a0:	486c      	ldr	r0, [pc, #432]	; (8000754 <main+0x1c8>)
 80005a2:	f001 ff09 	bl	80023b8 <HAL_TIM_Base_Start_IT>

  init_timer(&htim2, NO_OF_SEC_TIMERS, NO_OF_MIL_TIMERS);
 80005a6:	2302      	movs	r3, #2
 80005a8:	2202      	movs	r2, #2
 80005aa:	4619      	mov	r1, r3
 80005ac:	4869      	ldr	r0, [pc, #420]	; (8000754 <main+0x1c8>)
 80005ae:	f000 fbd1 	bl	8000d54 <init_timer>
  init_led7(seg7_en, seg7_port, buffer_led7, NO_OF_LED7);
 80005b2:	2304      	movs	r3, #4
 80005b4:	4a68      	ldr	r2, [pc, #416]	; (8000758 <main+0x1cc>)
 80005b6:	4969      	ldr	r1, [pc, #420]	; (800075c <main+0x1d0>)
 80005b8:	4869      	ldr	r0, [pc, #420]	; (8000760 <main+0x1d4>)
 80005ba:	f7ff ff31 	bl	8000420 <init_led7>
  init_fsm_input_processing(button_port, NO_OF_BUTTONS);
 80005be:	2103      	movs	r1, #3
 80005c0:	4868      	ldr	r0, [pc, #416]	; (8000764 <main+0x1d8>)
 80005c2:	f7ff fdc3 	bl	800014c <init_fsm_input_processing>
  init_traffic(traffic_port, traffic_time);
 80005c6:	4968      	ldr	r1, [pc, #416]	; (8000768 <main+0x1dc>)
 80005c8:	4868      	ldr	r0, [pc, #416]	; (800076c <main+0x1e0>)
 80005ca:	f000 fde3 	bl	8001194 <init_traffic>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(trafficMode) {
 80005ce:	4b68      	ldr	r3, [pc, #416]	; (8000770 <main+0x1e4>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d007      	beq.n	80005e6 <main+0x5a>
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	f2c0 809d 	blt.w	8000716 <main+0x18a>
 80005dc:	3b01      	subs	r3, #1
 80005de:	2b02      	cmp	r3, #2
 80005e0:	f200 8099 	bhi.w	8000716 <main+0x18a>
 80005e4:	e027      	b.n	8000636 <main+0xaa>
	  case NORMAL:
		  if(getPressFlag(BUTTON_MODE)) {
 80005e6:	2000      	movs	r0, #0
 80005e8:	f7ff fe38 	bl	800025c <getPressFlag>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d010      	beq.n	8000614 <main+0x88>
			  resetPressFlag(BUTTON_MODE);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f7ff fe42 	bl	800027c <resetPressFlag>
			  trafficMode = CHANGE_RED;
 80005f8:	4b5d      	ldr	r3, [pc, #372]	; (8000770 <main+0x1e4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
			  clearTraffic();
 80005fe:	f000 ff1b 	bl	8001438 <clearTraffic>

			  controlSecTimer(TRAFFIC_VER_TIMER, STOP_TIMER);
 8000602:	2101      	movs	r1, #1
 8000604:	2000      	movs	r0, #0
 8000606:	f000 fd2f 	bl	8001068 <controlSecTimer>
			  controlSecTimer(TRAFFIC_HOR_TIMER, STOP_TIMER);
 800060a:	2101      	movs	r1, #1
 800060c:	2001      	movs	r0, #1
 800060e:	f000 fd2b 	bl	8001068 <controlSecTimer>
			  break;
 8000612:	e080      	b.n	8000716 <main+0x18a>
		  }
		  traffic_display();
 8000614:	f000 fe0a 	bl	800122c <traffic_display>
		  setBufferLed7(getSecCounter(TRAFFIC_VER_TIMER), getSecCounter(TRAFFIC_HOR_TIMER));
 8000618:	2000      	movs	r0, #0
 800061a:	f000 fcfd 	bl	8001018 <getSecCounter>
 800061e:	4603      	mov	r3, r0
 8000620:	b2dc      	uxtb	r4, r3
 8000622:	2001      	movs	r0, #1
 8000624:	f000 fcf8 	bl	8001018 <getSecCounter>
 8000628:	4603      	mov	r3, r0
 800062a:	b2db      	uxtb	r3, r3
 800062c:	4619      	mov	r1, r3
 800062e:	4620      	mov	r0, r4
 8000630:	f000 f9b2 	bl	8000998 <setBufferLed7>
		  break;
 8000634:	e06f      	b.n	8000716 <main+0x18a>
	  case CHANGE_RED:
	  case CHANGE_YELLOW:
	  case CHANGE_GREEN:
		  if(getPressFlag(BUTTON_MODE)) {
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff fe10 	bl	800025c <getPressFlag>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d026      	beq.n	8000690 <main+0x104>
			  resetPressFlag(BUTTON_MODE);
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff fe1a 	bl	800027c <resetPressFlag>
			  trafficMode = (trafficMode == CHANGE_GREEN)? NORMAL : trafficMode+1;
 8000648:	4b49      	ldr	r3, [pc, #292]	; (8000770 <main+0x1e4>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b03      	cmp	r3, #3
 800064e:	d004      	beq.n	800065a <main+0xce>
 8000650:	4b47      	ldr	r3, [pc, #284]	; (8000770 <main+0x1e4>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	3301      	adds	r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	e000      	b.n	800065c <main+0xd0>
 800065a:	2300      	movs	r3, #0
 800065c:	4a44      	ldr	r2, [pc, #272]	; (8000770 <main+0x1e4>)
 800065e:	7013      	strb	r3, [r2, #0]
			  clearTraffic();
 8000660:	f000 feea 	bl	8001438 <clearTraffic>

			  if(updateFlag == 0) {
 8000664:	4b43      	ldr	r3, [pc, #268]	; (8000774 <main+0x1e8>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d104      	bne.n	8000676 <main+0xea>
				  copyArray(traffic_time, traffic_time_update, 6); // update buffer -> current buffer
 800066c:	2206      	movs	r2, #6
 800066e:	4942      	ldr	r1, [pc, #264]	; (8000778 <main+0x1ec>)
 8000670:	483d      	ldr	r0, [pc, #244]	; (8000768 <main+0x1dc>)
 8000672:	f000 fa6e 	bl	8000b52 <copyArray>
			  }

			  if(trafficMode == CHANGE_GREEN) {
 8000676:	4b3e      	ldr	r3, [pc, #248]	; (8000770 <main+0x1e4>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b03      	cmp	r3, #3
 800067c:	d14a      	bne.n	8000714 <main+0x188>
				  controlSecTimer(TRAFFIC_VER_TIMER, START_TIMER);
 800067e:	2100      	movs	r1, #0
 8000680:	2000      	movs	r0, #0
 8000682:	f000 fcf1 	bl	8001068 <controlSecTimer>
				  controlSecTimer(TRAFFIC_HOR_TIMER, START_TIMER);
 8000686:	2100      	movs	r1, #0
 8000688:	2001      	movs	r0, #1
 800068a:	f000 fced 	bl	8001068 <controlSecTimer>
			  }
			  break;
 800068e:	e041      	b.n	8000714 <main+0x188>
		  }
		  if(getPressFlag(BUTTON_VALUE)) {
 8000690:	2001      	movs	r0, #1
 8000692:	f7ff fde3 	bl	800025c <getPressFlag>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d008      	beq.n	80006ae <main+0x122>
			  resetPressFlag(BUTTON_VALUE) ;
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff fded 	bl	800027c <resetPressFlag>
			  increase(trafficMode, traffic_time_update);
 80006a2:	4b33      	ldr	r3, [pc, #204]	; (8000770 <main+0x1e4>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	4934      	ldr	r1, [pc, #208]	; (8000778 <main+0x1ec>)
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 f9df 	bl	8000a6c <increase>
		  }
		  if(getPressFlag(BUTTON_SET)) {
 80006ae:	2002      	movs	r0, #2
 80006b0:	f7ff fdd4 	bl	800025c <getPressFlag>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d005      	beq.n	80006c6 <main+0x13a>
			  resetPressFlag(BUTTON_SET);
 80006ba:	2002      	movs	r0, #2
 80006bc:	f7ff fdde 	bl	800027c <resetPressFlag>
			  updateFlag = 1;
 80006c0:	4b2c      	ldr	r3, [pc, #176]	; (8000774 <main+0x1e8>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
		  }
		  if(trafficMode == CHANGE_RED) setBufferLed7(traffic_time_update[VER_RED], trafficMode);
 80006c6:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <main+0x1e4>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d108      	bne.n	80006e0 <main+0x154>
 80006ce:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <main+0x1ec>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	4a27      	ldr	r2, [pc, #156]	; (8000770 <main+0x1e4>)
 80006d4:	7812      	ldrb	r2, [r2, #0]
 80006d6:	4611      	mov	r1, r2
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 f95d 	bl	8000998 <setBufferLed7>
 80006de:	e01a      	b.n	8000716 <main+0x18a>
		  else if(trafficMode == CHANGE_YELLOW) setBufferLed7(traffic_time_update[VER_YELLOW], trafficMode);
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <main+0x1e4>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	d108      	bne.n	80006fa <main+0x16e>
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <main+0x1ec>)
 80006ea:	789b      	ldrb	r3, [r3, #2]
 80006ec:	4a20      	ldr	r2, [pc, #128]	; (8000770 <main+0x1e4>)
 80006ee:	7812      	ldrb	r2, [r2, #0]
 80006f0:	4611      	mov	r1, r2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 f950 	bl	8000998 <setBufferLed7>
 80006f8:	e00d      	b.n	8000716 <main+0x18a>
		  else if(trafficMode == CHANGE_GREEN) setBufferLed7(traffic_time_update[VER_GREEN], trafficMode);
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <main+0x1e4>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b03      	cmp	r3, #3
 8000700:	d109      	bne.n	8000716 <main+0x18a>
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <main+0x1ec>)
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	4a1a      	ldr	r2, [pc, #104]	; (8000770 <main+0x1e4>)
 8000708:	7812      	ldrb	r2, [r2, #0]
 800070a:	4611      	mov	r1, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f000 f943 	bl	8000998 <setBufferLed7>
 8000712:	e000      	b.n	8000716 <main+0x18a>
			  break;
 8000714:	bf00      	nop
	  }

	  fsm_for_input_processing();
 8000716:	f7ff fd57 	bl	80001c8 <fsm_for_input_processing>
	  scanLed7();
 800071a:	f000 f91b 	bl	8000954 <scanLed7>
	  blinkTraffic(trafficMode);
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <main+0x1e4>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f974 	bl	8000a10 <blinkTraffic>
	  if(isPeriodDone()) {
 8000728:	f000 fea0 	bl	800146c <isPeriodDone>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	f43f af4d 	beq.w	80005ce <main+0x42>
		  if(updateFlag) {
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <main+0x1e8>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d007      	beq.n	800074c <main+0x1c0>
			  updateFlag = 0;
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <main+0x1e8>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
			  copyArray(traffic_time_update, traffic_time, 6);
 8000742:	2206      	movs	r2, #6
 8000744:	4908      	ldr	r1, [pc, #32]	; (8000768 <main+0x1dc>)
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <main+0x1ec>)
 8000748:	f000 fa03 	bl	8000b52 <copyArray>
		  }
		  startNewPeriod();
 800074c:	f000 fe98 	bl	8001480 <startNewPeriod>
	  switch(trafficMode) {
 8000750:	e73d      	b.n	80005ce <main+0x42>
 8000752:	bf00      	nop
 8000754:	20000124 	.word	0x20000124
 8000758:	2000000c 	.word	0x2000000c
 800075c:	08002c94 	.word	0x08002c94
 8000760:	08002ca4 	.word	0x08002ca4
 8000764:	08002cac 	.word	0x08002cac
 8000768:	20000010 	.word	0x20000010
 800076c:	08002cb4 	.word	0x08002cb4
 8000770:	200000d2 	.word	0x200000d2
 8000774:	200000d3 	.word	0x200000d3
 8000778:	20000018 	.word	0x20000018

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b090      	sub	sp, #64	; 0x40
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0318 	add.w	r3, r7, #24
 8000786:	2228      	movs	r2, #40	; 0x28
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f002 f9ee 	bl	8002b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079e:	2302      	movs	r3, #2
 80007a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a2:	2301      	movs	r3, #1
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a6:	2310      	movs	r3, #16
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 0318 	add.w	r3, r7, #24
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 f9c8 	bl	8001b48 <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007be:	f000 f9e6 	bl	8000b8e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
 80007c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fc34 	bl	8002048 <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007e6:	f000 f9d2 	bl	8000b8e <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3740      	adds	r7, #64	; 0x40
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000808:	463b      	mov	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000810:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <MX_TIM2_Init+0x94>)
 8000812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000816:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_TIM2_Init+0x94>)
 800081a:	f240 321f 	movw	r2, #799	; 0x31f
 800081e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000820:	4b19      	ldr	r3, [pc, #100]	; (8000888 <MX_TIM2_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_TIM2_Init+0x94>)
 8000828:	2263      	movs	r2, #99	; 0x63
 800082a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_TIM2_Init+0x94>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_TIM2_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000838:	4813      	ldr	r0, [pc, #76]	; (8000888 <MX_TIM2_Init+0x94>)
 800083a:	f001 fd6d 	bl	8002318 <HAL_TIM_Base_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000844:	f000 f9a3 	bl	8000b8e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	4619      	mov	r1, r3
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <MX_TIM2_Init+0x94>)
 8000856:	f001 ff03 	bl	8002660 <HAL_TIM_ConfigClockSource>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000860:	f000 f995 	bl	8000b8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000864:	2300      	movs	r3, #0
 8000866:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800086c:	463b      	mov	r3, r7
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_TIM2_Init+0x94>)
 8000872:	f002 f8cb 	bl	8002a0c <HAL_TIMEx_MasterConfigSynchronization>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800087c:	f000 f987 	bl	8000b8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000124 	.word	0x20000124

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	4b29      	ldr	r3, [pc, #164]	; (8000948 <MX_GPIO_Init+0xbc>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a28      	ldr	r2, [pc, #160]	; (8000948 <MX_GPIO_Init+0xbc>)
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b26      	ldr	r3, [pc, #152]	; (8000948 <MX_GPIO_Init+0xbc>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b8:	4b23      	ldr	r3, [pc, #140]	; (8000948 <MX_GPIO_Init+0xbc>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a22      	ldr	r2, [pc, #136]	; (8000948 <MX_GPIO_Init+0xbc>)
 80008be:	f043 0308 	orr.w	r3, r3, #8
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b20      	ldr	r3, [pc, #128]	; (8000948 <MX_GPIO_Init+0xbc>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f003 0308 	and.w	r3, r3, #8
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80008d6:	481d      	ldr	r0, [pc, #116]	; (800094c <MX_GPIO_Init+0xc0>)
 80008d8:	f001 f905 	bl	8001ae6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80008dc:	2200      	movs	r2, #0
 80008de:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80008e2:	481b      	ldr	r0, [pc, #108]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008e4:	f001 f8ff 	bl	8001ae6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : DEBUG_Pin PA4 PA5 PA6
                           PA7 PA8 PA9 */
  GPIO_InitStruct.Pin = DEBUG_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80008e8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80008ec:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2302      	movs	r3, #2
 80008f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	4619      	mov	r1, r3
 8000900:	4812      	ldr	r0, [pc, #72]	; (800094c <MX_GPIO_Init+0xc0>)
 8000902:	f000 ff5f 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000906:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800090a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2302      	movs	r3, #2
 8000916:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	4619      	mov	r1, r3
 800091e:	480c      	ldr	r0, [pc, #48]	; (8000950 <MX_GPIO_Init+0xc4>)
 8000920:	f000 ff50 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000924:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000928:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	4619      	mov	r1, r3
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <MX_GPIO_Init+0xc0>)
 800093a:	f000 ff43 	bl	80017c4 <HAL_GPIO_Init>

}
 800093e:	bf00      	nop
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000
 800094c:	40010800 	.word	0x40010800
 8000950:	40010c00 	.word	0x40010c00

08000954 <scanLed7>:

/* USER CODE BEGIN 4 */
void scanLed7() {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	static uint8_t index = 0;

	if(getMilFlag(SCAN_TIMER)) {
 8000958:	2000      	movs	r0, #0
 800095a:	f000 fb25 	bl	8000fa8 <getMilFlag>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d014      	beq.n	800098e <scanLed7+0x3a>
		setMilTimer(SCAN_TIMER, scanTime);
 8000964:	23fa      	movs	r3, #250	; 0xfa
 8000966:	4619      	mov	r1, r3
 8000968:	2000      	movs	r0, #0
 800096a:	f000 fa9d 	bl	8000ea8 <setMilTimer>
		display_7SEG(index++);
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <scanLed7+0x40>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	1c5a      	adds	r2, r3, #1
 8000974:	b2d1      	uxtb	r1, r2
 8000976:	4a07      	ldr	r2, [pc, #28]	; (8000994 <scanLed7+0x40>)
 8000978:	7011      	strb	r1, [r2, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fd9c 	bl	80004b8 <display_7SEG>
		if(index == 4) index = 0;
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <scanLed7+0x40>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b04      	cmp	r3, #4
 8000986:	d102      	bne.n	800098e <scanLed7+0x3a>
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <scanLed7+0x40>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
	}
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000d4 	.word	0x200000d4

08000998 <setBufferLed7>:
void setBufferLed7(uint8_t firstPair, uint8_t secondPair) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	460a      	mov	r2, r1
 80009a2:	71fb      	strb	r3, [r7, #7]
 80009a4:	4613      	mov	r3, r2
 80009a6:	71bb      	strb	r3, [r7, #6]
	buffer_led7[0] = firstPair / 10;
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <setBufferLed7+0x70>)
 80009ac:	fba2 2303 	umull	r2, r3, r2, r3
 80009b0:	08db      	lsrs	r3, r3, #3
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <setBufferLed7+0x74>)
 80009b6:	701a      	strb	r2, [r3, #0]
	buffer_led7[1] = firstPair % 10;
 80009b8:	79fa      	ldrb	r2, [r7, #7]
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <setBufferLed7+0x70>)
 80009bc:	fba3 1302 	umull	r1, r3, r3, r2
 80009c0:	08d9      	lsrs	r1, r3, #3
 80009c2:	460b      	mov	r3, r1
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	440b      	add	r3, r1
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <setBufferLed7+0x74>)
 80009d0:	705a      	strb	r2, [r3, #1]
	buffer_led7[2] = secondPair / 10;
 80009d2:	79bb      	ldrb	r3, [r7, #6]
 80009d4:	4a0c      	ldr	r2, [pc, #48]	; (8000a08 <setBufferLed7+0x70>)
 80009d6:	fba2 2303 	umull	r2, r3, r2, r3
 80009da:	08db      	lsrs	r3, r3, #3
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <setBufferLed7+0x74>)
 80009e0:	709a      	strb	r2, [r3, #2]
	buffer_led7[3] = secondPair % 10;
 80009e2:	79ba      	ldrb	r2, [r7, #6]
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <setBufferLed7+0x70>)
 80009e6:	fba3 1302 	umull	r1, r3, r3, r2
 80009ea:	08d9      	lsrs	r1, r3, #3
 80009ec:	460b      	mov	r3, r1
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	440b      	add	r3, r1
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <setBufferLed7+0x74>)
 80009fa:	70da      	strb	r2, [r3, #3]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	cccccccd 	.word	0xcccccccd
 8000a0c:	2000000c 	.word	0x2000000c

08000a10 <blinkTraffic>:

void blinkTraffic(ModeState state) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	if(state == NORMAL) return;
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d01f      	beq.n	8000a60 <blinkTraffic+0x50>
	if(getMilFlag(BLINK_TIMER)) {
 8000a20:	2001      	movs	r0, #1
 8000a22:	f000 fac1 	bl	8000fa8 <getMilFlag>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d01a      	beq.n	8000a62 <blinkTraffic+0x52>
		setMilTimer(BLINK_TIMER, blinkTime);
 8000a2c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a30:	4619      	mov	r1, r3
 8000a32:	2001      	movs	r0, #1
 8000a34:	f000 fa38 	bl	8000ea8 <setMilTimer>
		HAL_GPIO_TogglePin(TRAFFIC_PORT, (RED_VER << (state-1)) | (RED_HOR << (state-1)));
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	2210      	movs	r2, #16
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	b21a      	sxth	r2, r3
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4e:	b21b      	sxth	r3, r3
 8000a50:	4313      	orrs	r3, r2
 8000a52:	b21b      	sxth	r3, r3
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	4619      	mov	r1, r3
 8000a58:	4803      	ldr	r0, [pc, #12]	; (8000a68 <blinkTraffic+0x58>)
 8000a5a:	f001 f85c 	bl	8001b16 <HAL_GPIO_TogglePin>
 8000a5e:	e000      	b.n	8000a62 <blinkTraffic+0x52>
	if(state == NORMAL) return;
 8000a60:	bf00      	nop
	}
}
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40010800 	.word	0x40010800

08000a6c <increase>:
void increase(ModeState state, uint8_t* buffer) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	6039      	str	r1, [r7, #0]
 8000a76:	71fb      	strb	r3, [r7, #7]
	switch(state) {
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d029      	beq.n	8000ad2 <increase+0x66>
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	dc5b      	bgt.n	8000b3a <increase+0xce>
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d002      	beq.n	8000a8c <increase+0x20>
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d045      	beq.n	8000b16 <increase+0xaa>
			buffer[VER_YELLOW]++;
			buffer[VER_GREEN]--;
		}
		break;
	default:
		break;
 8000a8a:	e056      	b.n	8000b3a <increase+0xce>
		if(buffer[VER_GREEN]-1 > 0 && buffer[HOR_RED]-1 > 0) {
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d953      	bls.n	8000b3e <increase+0xd2>
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	3303      	adds	r3, #3
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d94e      	bls.n	8000b3e <increase+0xd2>
			buffer[VER_RED]++;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	701a      	strb	r2, [r3, #0]
			buffer[VER_GREEN]--;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	781a      	ldrb	r2, [r3, #0]
 8000ab2:	3a01      	subs	r2, #1
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	701a      	strb	r2, [r3, #0]
			buffer[HOR_RED]--;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	3303      	adds	r3, #3
 8000abc:	781a      	ldrb	r2, [r3, #0]
 8000abe:	3a01      	subs	r2, #1
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	701a      	strb	r2, [r3, #0]
			buffer[HOR_GREEN]++;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	3304      	adds	r3, #4
 8000ac8:	781a      	ldrb	r2, [r3, #0]
 8000aca:	3201      	adds	r2, #1
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	701a      	strb	r2, [r3, #0]
		break;
 8000ad0:	e035      	b.n	8000b3e <increase+0xd2>
		if(buffer[VER_RED]-1 > 0 && buffer[HOR_GREEN]-1 > 0) {
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d933      	bls.n	8000b42 <increase+0xd6>
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	3304      	adds	r3, #4
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d92e      	bls.n	8000b42 <increase+0xd6>
			buffer[VER_GREEN]++;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	3201      	adds	r2, #1
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	701a      	strb	r2, [r3, #0]
			buffer[VER_RED]--;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	701a      	strb	r2, [r3, #0]
			buffer[HOR_GREEN]--;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	3304      	adds	r3, #4
 8000b00:	781a      	ldrb	r2, [r3, #0]
 8000b02:	3a01      	subs	r2, #1
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	701a      	strb	r2, [r3, #0]
			buffer[HOR_RED]++;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	3303      	adds	r3, #3
 8000b0c:	781a      	ldrb	r2, [r3, #0]
 8000b0e:	3201      	adds	r2, #1
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	701a      	strb	r2, [r3, #0]
		break;
 8000b14:	e015      	b.n	8000b42 <increase+0xd6>
		if(buffer[VER_GREEN]-1 > 0) {
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d912      	bls.n	8000b46 <increase+0xda>
			buffer[VER_YELLOW]++;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	3302      	adds	r3, #2
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	3201      	adds	r2, #1
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	701a      	strb	r2, [r3, #0]
			buffer[VER_GREEN]--;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	3a01      	subs	r2, #1
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	701a      	strb	r2, [r3, #0]
		break;
 8000b38:	e005      	b.n	8000b46 <increase+0xda>
		break;
 8000b3a:	bf00      	nop
 8000b3c:	e004      	b.n	8000b48 <increase+0xdc>
		break;
 8000b3e:	bf00      	nop
 8000b40:	e002      	b.n	8000b48 <increase+0xdc>
		break;
 8000b42:	bf00      	nop
 8000b44:	e000      	b.n	8000b48 <increase+0xdc>
		break;
 8000b46:	bf00      	nop
	}
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <copyArray>:
void copyArray(uint8_t* from, uint8_t* to, int n) {
 8000b52:	b480      	push	{r7}
 8000b54:	b087      	sub	sp, #28
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	60f8      	str	r0, [r7, #12]
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < n; i++) {
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	e00a      	b.n	8000b7a <copyArray+0x28>
		to[i] = from[i];
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	441a      	add	r2, r3
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	68b9      	ldr	r1, [r7, #8]
 8000b6e:	440b      	add	r3, r1
 8000b70:	7812      	ldrb	r2, [r2, #0]
 8000b72:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < n; i++) {
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	3301      	adds	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	697a      	ldr	r2, [r7, #20]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	dbf0      	blt.n	8000b64 <copyArray+0x12>
	}
}
 8000b82:	bf00      	nop
 8000b84:	bf00      	nop
 8000b86:	371c      	adds	r7, #28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b92:	b672      	cpsid	i
}
 8000b94:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <Error_Handler+0x8>

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_MspInit+0x5c>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <HAL_MspInit+0x5c>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6193      	str	r3, [r2, #24]
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_MspInit+0x5c>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_MspInit+0x5c>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <HAL_MspInit+0x5c>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	61d3      	str	r3, [r2, #28]
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_MspInit+0x5c>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_MspInit+0x60>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_MspInit+0x60>)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40010000 	.word	0x40010000

08000bfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c0c:	d113      	bne.n	8000c36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_TIM_Base_MspInit+0x44>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <HAL_TIM_Base_MspInit+0x44>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	61d3      	str	r3, [r2, #28]
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_TIM_Base_MspInit+0x44>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	201c      	movs	r0, #28
 8000c2c:	f000 fd93 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c30:	201c      	movs	r0, #28
 8000c32:	f000 fdac 	bl	800178e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <NMI_Handler+0x4>

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr

08000c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr

08000c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8a:	f000 fc71 	bl	8001570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <TIM2_IRQHandler+0x10>)
 8000c9a:	f001 fbd9 	bl	8002450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000124 	.word	0x20000124

08000ca8 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cb2:	f001 ff15 	bl	8002ae0 <__errno>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2216      	movs	r2, #22
 8000cba:	601a      	str	r2, [r3, #0]
	return -1;
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <_exit>:

void _exit (int status)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ffe7 	bl	8000ca8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cda:	e7fe      	b.n	8000cda <_exit+0x12>

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f001 fee8 	bl	8002ae0 <__errno>
 8000d10:	4603      	mov	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20002800 	.word	0x20002800
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	200000d8 	.word	0x200000d8
 8000d44:	20000180 	.word	0x20000180

08000d48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <init_timer>:

// array to store stop flag
static uint8_t* timer_mil_stop;
static uint8_t* timer_sec_stop;

void init_timer(TIM_HandleTypeDef *tim, unsigned int num_sec, unsigned int num_mil) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
	// init parameter for software timer
	TIMER_CYCLE = (tim->Instance->ARR+1) * (tim->Instance->PSC+1) / TIMER_CLOCK_FREQ;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d66:	3301      	adds	r3, #1
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	6812      	ldr	r2, [r2, #0]
 8000d6c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000d6e:	3201      	adds	r2, #1
 8000d70:	fb02 f303 	mul.w	r3, r2, r3
 8000d74:	4a42      	ldr	r2, [pc, #264]	; (8000e80 <init_timer+0x12c>)
 8000d76:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7a:	0a5b      	lsrs	r3, r3, #9
 8000d7c:	4a41      	ldr	r2, [pc, #260]	; (8000e84 <init_timer+0x130>)
 8000d7e:	6013      	str	r3, [r2, #0]
	NO_OF_MIL_TIMERS = num_mil;
 8000d80:	4a41      	ldr	r2, [pc, #260]	; (8000e88 <init_timer+0x134>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
	NO_OF_SEC_TIMERS = num_sec;
 8000d86:	4a41      	ldr	r2, [pc, #260]	; (8000e8c <init_timer+0x138>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	6013      	str	r3, [r2, #0]

	// init array for counter and flag
	timer_mil_counter = (unsigned int*)malloc(NO_OF_MIL_TIMERS * sizeof(unsigned int));
 8000d8c:	4b3e      	ldr	r3, [pc, #248]	; (8000e88 <init_timer+0x134>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fee2 	bl	8002b5c <malloc>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b3c      	ldr	r3, [pc, #240]	; (8000e90 <init_timer+0x13c>)
 8000d9e:	601a      	str	r2, [r3, #0]
	timer_sec_counter = (unsigned int*)malloc(NO_OF_SEC_TIMERS * sizeof(unsigned int));
 8000da0:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <init_timer+0x138>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 fed8 	bl	8002b5c <malloc>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b38      	ldr	r3, [pc, #224]	; (8000e94 <init_timer+0x140>)
 8000db2:	601a      	str	r2, [r3, #0]
	timer_mil_flag = (uint8_t*)malloc(NO_OF_MIL_TIMERS * sizeof(uint8_t));
 8000db4:	4b34      	ldr	r3, [pc, #208]	; (8000e88 <init_timer+0x134>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 fecf 	bl	8002b5c <malloc>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b35      	ldr	r3, [pc, #212]	; (8000e98 <init_timer+0x144>)
 8000dc4:	601a      	str	r2, [r3, #0]
	timer_sec_flag = (uint8_t*)malloc(NO_OF_SEC_TIMERS * sizeof(uint8_t));
 8000dc6:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <init_timer+0x138>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 fec6 	bl	8002b5c <malloc>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4b31      	ldr	r3, [pc, #196]	; (8000e9c <init_timer+0x148>)
 8000dd6:	601a      	str	r2, [r3, #0]
	timer_mil_stop = (uint8_t*)malloc(NO_OF_MIL_TIMERS * sizeof(uint8_t));
 8000dd8:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <init_timer+0x134>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 febd 	bl	8002b5c <malloc>
 8000de2:	4603      	mov	r3, r0
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <init_timer+0x14c>)
 8000de8:	601a      	str	r2, [r3, #0]
	timer_sec_stop = (uint8_t*)malloc(NO_OF_SEC_TIMERS * sizeof(uint8_t));
 8000dea:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <init_timer+0x138>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 feb4 	bl	8002b5c <malloc>
 8000df4:	4603      	mov	r3, r0
 8000df6:	461a      	mov	r2, r3
 8000df8:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <init_timer+0x150>)
 8000dfa:	601a      	str	r2, [r3, #0]

	// init value for array
	for(int i = 0; i < NO_OF_MIL_TIMERS; i++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	e015      	b.n	8000e2e <init_timer+0xda>
		timer_mil_counter[i] = 0;
 8000e02:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <init_timer+0x13c>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
		timer_mil_flag[i] = 1;
 8000e10:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <init_timer+0x144>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	4413      	add	r3, r2
 8000e18:	2201      	movs	r2, #1
 8000e1a:	701a      	strb	r2, [r3, #0]
		timer_mil_stop[i] = START_TIMER;
 8000e1c:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <init_timer+0x14c>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	4413      	add	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_MIL_TIMERS; i++) {
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <init_timer+0x134>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d3e4      	bcc.n	8000e02 <init_timer+0xae>
	}
	for(int i = 0; i < NO_OF_SEC_TIMERS; i++) {
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	e015      	b.n	8000e6a <init_timer+0x116>
		timer_sec_counter[i] = 0;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <init_timer+0x140>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
		timer_sec_flag[i] = 1;
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <init_timer+0x148>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4413      	add	r3, r2
 8000e54:	2201      	movs	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]
		timer_sec_stop[i] = START_TIMER;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <init_timer+0x150>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4413      	add	r3, r2
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_SEC_TIMERS; i++) {
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	3301      	adds	r3, #1
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <init_timer+0x138>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d3e4      	bcc.n	8000e3e <init_timer+0xea>
	}
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	10624dd3 	.word	0x10624dd3
 8000e84:	200000dc 	.word	0x200000dc
 8000e88:	200000e0 	.word	0x200000e0
 8000e8c:	200000e4 	.word	0x200000e4
 8000e90:	200000e8 	.word	0x200000e8
 8000e94:	200000ec 	.word	0x200000ec
 8000e98:	200000f0 	.word	0x200000f0
 8000e9c:	200000f4 	.word	0x200000f4
 8000ea0:	200000f8 	.word	0x200000f8
 8000ea4:	200000fc 	.word	0x200000fc

08000ea8 <setMilTimer>:

uint8_t setMilTimer(uint8_t timer, unsigned int value) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
	if((value * 1000) % TIMER_CYCLE != 0) {
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eba:	fb02 f303 	mul.w	r3, r2, r3
 8000ebe:	4a15      	ldr	r2, [pc, #84]	; (8000f14 <setMilTimer+0x6c>)
 8000ec0:	6812      	ldr	r2, [r2, #0]
 8000ec2:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ec6:	fb02 f201 	mul.w	r2, r2, r1
 8000eca:	1a9b      	subs	r3, r3, r2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <setMilTimer+0x2c>
		return 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	e01a      	b.n	8000f0a <setMilTimer+0x62>
	}
	if(timer >= NO_OF_SEC_TIMERS) {
 8000ed4:	79fa      	ldrb	r2, [r7, #7]
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <setMilTimer+0x70>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d303      	bcc.n	8000ee6 <setMilTimer+0x3e>
		exit(-1);
 8000ede:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee2:	f001 fe03 	bl	8002aec <exit>
	}

	timer_mil_counter[timer] = value / TIMER_CYCLE;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <setMilTimer+0x6c>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <setMilTimer+0x74>)
 8000eec:	6819      	ldr	r1, [r3, #0]
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	6839      	ldr	r1, [r7, #0]
 8000ef6:	fbb1 f2f2 	udiv	r2, r1, r2
 8000efa:	601a      	str	r2, [r3, #0]
	timer_mil_flag[timer] = 0;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <setMilTimer+0x78>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	4413      	add	r3, r2
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
	return 1;
 8000f08:	2301      	movs	r3, #1
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200000dc 	.word	0x200000dc
 8000f18:	200000e4 	.word	0x200000e4
 8000f1c:	200000e8 	.word	0x200000e8
 8000f20:	200000f0 	.word	0x200000f0

08000f24 <setSecTimer>:
uint8_t setSecTimer(uint8_t timer, unsigned int value) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
	if((value * 1000) % TIMER_CYCLE != 0) {
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f36:	fb02 f303 	mul.w	r3, r2, r3
 8000f3a:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <setSecTimer+0x74>)
 8000f3c:	6812      	ldr	r2, [r2, #0]
 8000f3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f42:	fb02 f201 	mul.w	r2, r2, r1
 8000f46:	1a9b      	subs	r3, r3, r2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <setSecTimer+0x2c>
		return 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e01e      	b.n	8000f8e <setSecTimer+0x6a>
	}
	if(timer >= NO_OF_SEC_TIMERS) {
 8000f50:	79fa      	ldrb	r2, [r7, #7]
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <setSecTimer+0x78>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d303      	bcc.n	8000f62 <setSecTimer+0x3e>
		exit(-1);
 8000f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5e:	f001 fdc5 	bl	8002aec <exit>
	}

	timer_sec_counter[timer] = value*1000 / TIMER_CYCLE;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f68:	fb02 f103 	mul.w	r1, r2, r3
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <setSecTimer+0x74>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <setSecTimer+0x7c>)
 8000f72:	6818      	ldr	r0, [r3, #0]
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4403      	add	r3, r0
 8000f7a:	fbb1 f2f2 	udiv	r2, r1, r2
 8000f7e:	601a      	str	r2, [r3, #0]
	timer_sec_flag[timer] = 0;
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <setSecTimer+0x80>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	4413      	add	r3, r2
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
	return 1;
 8000f8c:	2301      	movs	r3, #1
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200000dc 	.word	0x200000dc
 8000f9c:	200000e4 	.word	0x200000e4
 8000fa0:	200000ec 	.word	0x200000ec
 8000fa4:	200000f4 	.word	0x200000f4

08000fa8 <getMilFlag>:

uint8_t getMilFlag(uint8_t timer) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	if(timer >= NO_OF_SEC_TIMERS) {
 8000fb2:	79fa      	ldrb	r2, [r7, #7]
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <getMilFlag+0x30>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d303      	bcc.n	8000fc4 <getMilFlag+0x1c>
		exit(-1);
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f001 fd94 	bl	8002aec <exit>
	}
	return timer_mil_flag[timer];
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <getMilFlag+0x34>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	4413      	add	r3, r2
 8000fcc:	781b      	ldrb	r3, [r3, #0]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000e4 	.word	0x200000e4
 8000fdc:	200000f0 	.word	0x200000f0

08000fe0 <getSecFlag>:
uint8_t getSecFlag(uint8_t timer) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	if(timer >= NO_OF_SEC_TIMERS) {
 8000fea:	79fa      	ldrb	r2, [r7, #7]
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <getSecFlag+0x30>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d303      	bcc.n	8000ffc <getSecFlag+0x1c>
		exit(-1);
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f001 fd78 	bl	8002aec <exit>
	}
	return timer_sec_flag[timer];
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <getSecFlag+0x34>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200000e4 	.word	0x200000e4
 8001014:	200000f4 	.word	0x200000f4

08001018 <getSecCounter>:
	if(timer >= NO_OF_MIL_TIMERS) {
		exit(-1);
	}
	return timer_mil_counter[timer];
}
unsigned int getSecCounter(uint8_t timer) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
	if(timer >= NO_OF_SEC_TIMERS) {
 8001022:	79fa      	ldrb	r2, [r7, #7]
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <getSecCounter+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d303      	bcc.n	8001034 <getSecCounter+0x1c>
		exit(-1);
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f001 fd5c 	bl	8002aec <exit>
	}
	return timer_sec_counter[timer] * TIMER_CYCLE / 1000;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <getSecCounter+0x44>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <getSecCounter+0x48>)
 8001042:	6812      	ldr	r2, [r2, #0]
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	4a06      	ldr	r2, [pc, #24]	; (8001064 <getSecCounter+0x4c>)
 800104a:	fba2 2303 	umull	r2, r3, r2, r3
 800104e:	099b      	lsrs	r3, r3, #6
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200000e4 	.word	0x200000e4
 800105c:	200000ec 	.word	0x200000ec
 8001060:	200000dc 	.word	0x200000dc
 8001064:	10624dd3 	.word	0x10624dd3

08001068 <controlSecTimer>:
}

void controlMilTimer(uint8_t timer, ControlTimer control) {
	timer_mil_stop[timer] = control;
}
void controlSecTimer(uint8_t timer, ControlTimer control) {
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	460a      	mov	r2, r1
 8001072:	71fb      	strb	r3, [r7, #7]
 8001074:	4613      	mov	r3, r2
 8001076:	71bb      	strb	r3, [r7, #6]
	timer_sec_stop[timer] = control;
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <controlSecTimer+0x28>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	4413      	add	r3, r2
 8001080:	79ba      	ldrb	r2, [r7, #6]
 8001082:	701a      	strb	r2, [r3, #0]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	200000fc 	.word	0x200000fc

08001094 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	button_reading();
 800109c:	f7ff f952 	bl	8000344 <button_reading>
	for(int i = 0; i < NO_OF_MIL_TIMERS; i++) {
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	e029      	b.n	80010fa <HAL_TIM_PeriodElapsedCallback+0x66>
		if(timer_mil_stop[i] == STOP_TIMER) continue;
 80010a6:	4b33      	ldr	r3, [pc, #204]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d01e      	beq.n	80010f2 <HAL_TIM_PeriodElapsedCallback+0x5e>
		if(timer_mil_counter[i] > 0) {
 80010b4:	4b30      	ldr	r3, [pc, #192]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d017      	beq.n	80010f4 <HAL_TIM_PeriodElapsedCallback+0x60>
			timer_mil_counter[i]--;
 80010c4:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	3a01      	subs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
			if(timer_mil_counter[i] == 0) {
 80010d4:	4b28      	ldr	r3, [pc, #160]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d107      	bne.n	80010f4 <HAL_TIM_PeriodElapsedCallback+0x60>
				timer_mil_flag[i] = 1;
 80010e4:	4b25      	ldr	r3, [pc, #148]	; (800117c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	e000      	b.n	80010f4 <HAL_TIM_PeriodElapsedCallback+0x60>
		if(timer_mil_stop[i] == STOP_TIMER) continue;
 80010f2:	bf00      	nop
	for(int i = 0; i < NO_OF_MIL_TIMERS; i++) {
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3301      	adds	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d3d0      	bcc.n	80010a6 <HAL_TIM_PeriodElapsedCallback+0x12>
			}
		}
	}

	for(int i = 0; i < NO_OF_SEC_TIMERS; i++) {
 8001104:	2300      	movs	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	e029      	b.n	800115e <HAL_TIM_PeriodElapsedCallback+0xca>
		if(timer_sec_stop[i] == STOP_TIMER) continue;
 800110a:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d01e      	beq.n	8001156 <HAL_TIM_PeriodElapsedCallback+0xc2>
		if(timer_sec_counter[i] > 0) {
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d017      	beq.n	8001158 <HAL_TIM_PeriodElapsedCallback+0xc4>
			timer_sec_counter[i]--;
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	3a01      	subs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]
			if(timer_sec_counter[i] == 0) {
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d107      	bne.n	8001158 <HAL_TIM_PeriodElapsedCallback+0xc4>
				timer_sec_flag[i] = 1;
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	4413      	add	r3, r2
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	e000      	b.n	8001158 <HAL_TIM_PeriodElapsedCallback+0xc4>
		if(timer_sec_stop[i] == STOP_TIMER) continue;
 8001156:	bf00      	nop
	for(int i = 0; i < NO_OF_SEC_TIMERS; i++) {
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	3301      	adds	r3, #1
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d3d0      	bcc.n	800110a <HAL_TIM_PeriodElapsedCallback+0x76>
			}
		}
	}
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200000f8 	.word	0x200000f8
 8001178:	200000e8 	.word	0x200000e8
 800117c:	200000f0 	.word	0x200000f0
 8001180:	200000e0 	.word	0x200000e0
 8001184:	200000fc 	.word	0x200000fc
 8001188:	200000ec 	.word	0x200000ec
 800118c:	200000f4 	.word	0x200000f4
 8001190:	200000e4 	.word	0x200000e4

08001194 <init_traffic>:

static uint16_t allpin;
static uint8_t readyForNewPeriod = 1;
static uint8_t periodDone = 0;

void init_traffic(const uint16_t* port, uint8_t* time) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	lightPort = port;
 800119e:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <init_traffic+0x80>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6013      	str	r3, [r2, #0]
	lightTime = time;
 80011a4:	4a1c      	ldr	r2, [pc, #112]	; (8001218 <init_traffic+0x84>)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	6013      	str	r3, [r2, #0]

	ver_state = STATE_YELLOW;
 80011aa:	4b1c      	ldr	r3, [pc, #112]	; (800121c <init_traffic+0x88>)
 80011ac:	2202      	movs	r2, #2
 80011ae:	701a      	strb	r2, [r3, #0]
	hor_state = STATE_RED;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <init_traffic+0x8c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]

	allpin = lightPort[0] | lightPort[1] | lightPort[2] | lightPort[3] | lightPort[4] | lightPort[5];
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <init_traffic+0x80>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	881a      	ldrh	r2, [r3, #0]
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <init_traffic+0x80>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	3302      	adds	r3, #2
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <init_traffic+0x80>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	3304      	adds	r3, #4
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <init_traffic+0x80>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	3306      	adds	r3, #6
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	4313      	orrs	r3, r2
 80011de:	b29a      	uxth	r2, r3
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <init_traffic+0x80>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3308      	adds	r3, #8
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <init_traffic+0x80>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	330a      	adds	r3, #10
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <init_traffic+0x90>)
 80011fa:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(TRAFFIC_PORT, allpin, LIGHT_RESET);
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <init_traffic+0x90>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	2201      	movs	r2, #1
 8001202:	4619      	mov	r1, r3
 8001204:	4808      	ldr	r0, [pc, #32]	; (8001228 <init_traffic+0x94>)
 8001206:	f000 fc6e 	bl	8001ae6 <HAL_GPIO_WritePin>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000104 	.word	0x20000104
 8001218:	20000108 	.word	0x20000108
 800121c:	20000100 	.word	0x20000100
 8001220:	20000101 	.word	0x20000101
 8001224:	2000010c 	.word	0x2000010c
 8001228:	40010800 	.word	0x40010800

0800122c <traffic_display>:

void traffic_display(void) {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	switch(ver_state) {
 8001230:	4b7a      	ldr	r3, [pc, #488]	; (800141c <traffic_display+0x1f0>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b03      	cmp	r3, #3
 8001236:	d873      	bhi.n	8001320 <traffic_display+0xf4>
 8001238:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <traffic_display+0x14>)
 800123a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123e:	bf00      	nop
 8001240:	08001251 	.word	0x08001251
 8001244:	0800128b 	.word	0x0800128b
 8001248:	080012c7 	.word	0x080012c7
 800124c:	080012fd 	.word	0x080012fd
	case STATE_RED:
		if(getSecFlag(TRAFFIC_VER_TIMER)) {
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff fec5 	bl	8000fe0 <getSecFlag>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00d      	beq.n	8001278 <traffic_display+0x4c>
			setSecTimer(TRAFFIC_VER_TIMER, lightTime[VER_GREEN]);
 800125c:	4b70      	ldr	r3, [pc, #448]	; (8001420 <traffic_display+0x1f4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff fe5c 	bl	8000f24 <setSecTimer>
			ver_state = STATE_GREEN;
 800126c:	4b6b      	ldr	r3, [pc, #428]	; (800141c <traffic_display+0x1f0>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]

			clearTraffic();
 8001272:	f000 f8e1 	bl	8001438 <clearTraffic>
			break;
 8001276:	e053      	b.n	8001320 <traffic_display+0xf4>
		}
		HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[VER_RED], LIGHT_SET);
 8001278:	4b6a      	ldr	r3, [pc, #424]	; (8001424 <traffic_display+0x1f8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	4869      	ldr	r0, [pc, #420]	; (8001428 <traffic_display+0x1fc>)
 8001284:	f000 fc2f 	bl	8001ae6 <HAL_GPIO_WritePin>
		break;
 8001288:	e04a      	b.n	8001320 <traffic_display+0xf4>
	case STATE_GREEN:
		if(getSecFlag(TRAFFIC_VER_TIMER)) {
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fea8 	bl	8000fe0 <getSecFlag>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00d      	beq.n	80012b2 <traffic_display+0x86>
			setSecTimer(TRAFFIC_VER_TIMER, lightTime[VER_YELLOW]);
 8001296:	4b62      	ldr	r3, [pc, #392]	; (8001420 <traffic_display+0x1f4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3302      	adds	r3, #2
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	4619      	mov	r1, r3
 80012a0:	2000      	movs	r0, #0
 80012a2:	f7ff fe3f 	bl	8000f24 <setSecTimer>
			ver_state = STATE_YELLOW;
 80012a6:	4b5d      	ldr	r3, [pc, #372]	; (800141c <traffic_display+0x1f0>)
 80012a8:	2202      	movs	r2, #2
 80012aa:	701a      	strb	r2, [r3, #0]

			clearTraffic();
 80012ac:	f000 f8c4 	bl	8001438 <clearTraffic>
			break;
 80012b0:	e036      	b.n	8001320 <traffic_display+0xf4>
		}
		HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[VER_GREEN], LIGHT_SET);
 80012b2:	4b5c      	ldr	r3, [pc, #368]	; (8001424 <traffic_display+0x1f8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3302      	adds	r3, #2
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	2200      	movs	r2, #0
 80012bc:	4619      	mov	r1, r3
 80012be:	485a      	ldr	r0, [pc, #360]	; (8001428 <traffic_display+0x1fc>)
 80012c0:	f000 fc11 	bl	8001ae6 <HAL_GPIO_WritePin>
		break;
 80012c4:	e02c      	b.n	8001320 <traffic_display+0xf4>
	case STATE_YELLOW:
		if(getSecFlag(TRAFFIC_VER_TIMER)) {
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff fe8a 	bl	8000fe0 <getSecFlag>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00a      	beq.n	80012e8 <traffic_display+0xbc>
			ver_state = STATE_WAIT;
 80012d2:	4b52      	ldr	r3, [pc, #328]	; (800141c <traffic_display+0x1f0>)
 80012d4:	2203      	movs	r2, #3
 80012d6:	701a      	strb	r2, [r3, #0]

			readyForNewPeriod = 0;
 80012d8:	4b54      	ldr	r3, [pc, #336]	; (800142c <traffic_display+0x200>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
			periodDone = 1;
 80012de:	4b54      	ldr	r3, [pc, #336]	; (8001430 <traffic_display+0x204>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
			clearTraffic();
 80012e4:	f000 f8a8 	bl	8001438 <clearTraffic>
		}
		HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[VER_YELLOW], LIGHT_SET);
 80012e8:	4b4e      	ldr	r3, [pc, #312]	; (8001424 <traffic_display+0x1f8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3304      	adds	r3, #4
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	2200      	movs	r2, #0
 80012f2:	4619      	mov	r1, r3
 80012f4:	484c      	ldr	r0, [pc, #304]	; (8001428 <traffic_display+0x1fc>)
 80012f6:	f000 fbf6 	bl	8001ae6 <HAL_GPIO_WritePin>
		break;
 80012fa:	e011      	b.n	8001320 <traffic_display+0xf4>
	case STATE_WAIT:
		if(readyForNewPeriod) {
 80012fc:	4b4b      	ldr	r3, [pc, #300]	; (800142c <traffic_display+0x200>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00c      	beq.n	800131e <traffic_display+0xf2>
			periodDone = 0;
 8001304:	4b4a      	ldr	r3, [pc, #296]	; (8001430 <traffic_display+0x204>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
			ver_state = STATE_RED;
 800130a:	4b44      	ldr	r3, [pc, #272]	; (800141c <traffic_display+0x1f0>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
			setSecTimer(TRAFFIC_VER_TIMER, lightTime[VER_RED]);
 8001310:	4b43      	ldr	r3, [pc, #268]	; (8001420 <traffic_display+0x1f4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	4619      	mov	r1, r3
 8001318:	2000      	movs	r0, #0
 800131a:	f7ff fe03 	bl	8000f24 <setSecTimer>
		}
		break;
 800131e:	bf00      	nop
	}



	switch(hor_state) {
 8001320:	4b44      	ldr	r3, [pc, #272]	; (8001434 <traffic_display+0x208>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b03      	cmp	r3, #3
 8001326:	d876      	bhi.n	8001416 <traffic_display+0x1ea>
 8001328:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <traffic_display+0x104>)
 800132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132e:	bf00      	nop
 8001330:	080013b9 	.word	0x080013b9
 8001334:	08001341 	.word	0x08001341
 8001338:	0800137d 	.word	0x0800137d
 800133c:	080013f1 	.word	0x080013f1
	case STATE_GREEN:
		if(getSecFlag(TRAFFIC_HOR_TIMER)) {
 8001340:	2001      	movs	r0, #1
 8001342:	f7ff fe4d 	bl	8000fe0 <getSecFlag>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00d      	beq.n	8001368 <traffic_display+0x13c>
			setSecTimer(TRAFFIC_HOR_TIMER, lightTime[HOR_YELLOW]);
 800134c:	4b34      	ldr	r3, [pc, #208]	; (8001420 <traffic_display+0x1f4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3305      	adds	r3, #5
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	2001      	movs	r0, #1
 8001358:	f7ff fde4 	bl	8000f24 <setSecTimer>
			hor_state = STATE_YELLOW;
 800135c:	4b35      	ldr	r3, [pc, #212]	; (8001434 <traffic_display+0x208>)
 800135e:	2202      	movs	r2, #2
 8001360:	701a      	strb	r2, [r3, #0]

			clearTraffic();
 8001362:	f000 f869 	bl	8001438 <clearTraffic>
			break;
 8001366:	e056      	b.n	8001416 <traffic_display+0x1ea>
		}
		HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[HOR_GREEN], LIGHT_SET);
 8001368:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <traffic_display+0x1f8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3308      	adds	r3, #8
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	2200      	movs	r2, #0
 8001372:	4619      	mov	r1, r3
 8001374:	482c      	ldr	r0, [pc, #176]	; (8001428 <traffic_display+0x1fc>)
 8001376:	f000 fbb6 	bl	8001ae6 <HAL_GPIO_WritePin>
		break;
 800137a:	e04c      	b.n	8001416 <traffic_display+0x1ea>
	case STATE_YELLOW:
		if(getSecFlag(TRAFFIC_HOR_TIMER)) {
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fe2f 	bl	8000fe0 <getSecFlag>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00d      	beq.n	80013a4 <traffic_display+0x178>
			setSecTimer(TRAFFIC_HOR_TIMER, lightTime[HOR_RED]);
 8001388:	4b25      	ldr	r3, [pc, #148]	; (8001420 <traffic_display+0x1f4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3303      	adds	r3, #3
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff fdc6 	bl	8000f24 <setSecTimer>
			hor_state = STATE_RED;
 8001398:	4b26      	ldr	r3, [pc, #152]	; (8001434 <traffic_display+0x208>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]

			clearTraffic();
 800139e:	f000 f84b 	bl	8001438 <clearTraffic>
			break;
 80013a2:	e038      	b.n	8001416 <traffic_display+0x1ea>
		}
		HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[HOR_YELLOW], LIGHT_SET);
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <traffic_display+0x1f8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	330a      	adds	r3, #10
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	2200      	movs	r2, #0
 80013ae:	4619      	mov	r1, r3
 80013b0:	481d      	ldr	r0, [pc, #116]	; (8001428 <traffic_display+0x1fc>)
 80013b2:	f000 fb98 	bl	8001ae6 <HAL_GPIO_WritePin>
		break;
 80013b6:	e02e      	b.n	8001416 <traffic_display+0x1ea>
	case STATE_RED:
		if(getSecFlag(TRAFFIC_HOR_TIMER)) {
 80013b8:	2001      	movs	r0, #1
 80013ba:	f7ff fe11 	bl	8000fe0 <getSecFlag>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00b      	beq.n	80013dc <traffic_display+0x1b0>
			hor_state = STATE_WAIT;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <traffic_display+0x208>)
 80013c6:	2203      	movs	r2, #3
 80013c8:	701a      	strb	r2, [r3, #0]

			readyForNewPeriod = 0;
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <traffic_display+0x200>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
			periodDone = 1;
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <traffic_display+0x204>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
			clearTraffic();
 80013d6:	f000 f82f 	bl	8001438 <clearTraffic>
			break;
 80013da:	e01c      	b.n	8001416 <traffic_display+0x1ea>
		}
		HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[HOR_RED], LIGHT_SET);
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <traffic_display+0x1f8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3306      	adds	r3, #6
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	2200      	movs	r2, #0
 80013e6:	4619      	mov	r1, r3
 80013e8:	480f      	ldr	r0, [pc, #60]	; (8001428 <traffic_display+0x1fc>)
 80013ea:	f000 fb7c 	bl	8001ae6 <HAL_GPIO_WritePin>
		break;
 80013ee:	e012      	b.n	8001416 <traffic_display+0x1ea>
	case STATE_WAIT:
		if(readyForNewPeriod) {
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <traffic_display+0x200>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00d      	beq.n	8001414 <traffic_display+0x1e8>
			periodDone = 0;
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <traffic_display+0x204>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
			hor_state = STATE_GREEN;
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <traffic_display+0x208>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
			setSecTimer(TRAFFIC_HOR_TIMER, lightTime[HOR_GREEN]);
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <traffic_display+0x1f4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	3304      	adds	r3, #4
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	2001      	movs	r0, #1
 8001410:	f7ff fd88 	bl	8000f24 <setSecTimer>
		}
		break;
 8001414:	bf00      	nop
	}

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000100 	.word	0x20000100
 8001420:	20000108 	.word	0x20000108
 8001424:	20000104 	.word	0x20000104
 8001428:	40010800 	.word	0x40010800
 800142c:	20000024 	.word	0x20000024
 8001430:	2000010e 	.word	0x2000010e
 8001434:	20000101 	.word	0x20000101

08001438 <clearTraffic>:

void clearTraffic(void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[VER_YELLOW], LIGHT_RESET);
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <clearTraffic+0x28>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3304      	adds	r3, #4
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	2201      	movs	r2, #1
 8001446:	4619      	mov	r1, r3
 8001448:	4806      	ldr	r0, [pc, #24]	; (8001464 <clearTraffic+0x2c>)
 800144a:	f000 fb4c 	bl	8001ae6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC_PORT, allpin, LIGHT_RESET);
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <clearTraffic+0x30>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	2201      	movs	r2, #1
 8001454:	4619      	mov	r1, r3
 8001456:	4803      	ldr	r0, [pc, #12]	; (8001464 <clearTraffic+0x2c>)
 8001458:	f000 fb45 	bl	8001ae6 <HAL_GPIO_WritePin>
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000104 	.word	0x20000104
 8001464:	40010800 	.word	0x40010800
 8001468:	2000010c 	.word	0x2000010c

0800146c <isPeriodDone>:

uint8_t isPeriodDone(void) {
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	return periodDone;
 8001470:	4b02      	ldr	r3, [pc, #8]	; (800147c <isPeriodDone+0x10>)
 8001472:	781b      	ldrb	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	2000010e 	.word	0x2000010e

08001480 <startNewPeriod>:
void startNewPeriod(void) {
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
	readyForNewPeriod = 1;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <startNewPeriod+0x14>)
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000024 	.word	0x20000024

08001498 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001498:	480c      	ldr	r0, [pc, #48]	; (80014cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800149a:	490d      	ldr	r1, [pc, #52]	; (80014d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800149c:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a0:	e002      	b.n	80014a8 <LoopCopyDataInit>

080014a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a6:	3304      	adds	r3, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ac:	d3f9      	bcc.n	80014a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b0:	4c0a      	ldr	r4, [pc, #40]	; (80014dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b4:	e001      	b.n	80014ba <LoopFillZerobss>

080014b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b8:	3204      	adds	r2, #4

080014ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014bc:	d3fb      	bcc.n	80014b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014be:	f7ff fc43 	bl	8000d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014c2:	f001 fb27 	bl	8002b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014c6:	f7ff f861 	bl	800058c <main>
  bx lr
 80014ca:	4770      	bx	lr
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80014d4:	08002cdc 	.word	0x08002cdc
  ldr r2, =_sbss
 80014d8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80014dc:	20000180 	.word	0x20000180

080014e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC1_2_IRQHandler>
	...

080014e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_Init+0x28>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a07      	ldr	r2, [pc, #28]	; (800150c <HAL_Init+0x28>)
 80014ee:	f043 0310 	orr.w	r3, r3, #16
 80014f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f4:	2003      	movs	r0, #3
 80014f6:	f000 f923 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fa:	200f      	movs	r0, #15
 80014fc:	f000 f808 	bl	8001510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001500:	f7ff fb4a 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40022000 	.word	0x40022000

08001510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_InitTick+0x54>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_InitTick+0x58>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001526:	fbb3 f3f1 	udiv	r3, r3, r1
 800152a:	fbb2 f3f3 	udiv	r3, r2, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f93b 	bl	80017aa <HAL_SYSTICK_Config>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e00e      	b.n	800155c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b0f      	cmp	r3, #15
 8001542:	d80a      	bhi.n	800155a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001544:	2200      	movs	r2, #0
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f000 f903 	bl	8001756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001550:	4a06      	ldr	r2, [pc, #24]	; (800156c <HAL_InitTick+0x5c>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	e000      	b.n	800155c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000020 	.word	0x20000020
 8001568:	2000002c 	.word	0x2000002c
 800156c:	20000028 	.word	0x20000028

08001570 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_IncTick+0x1c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_IncTick+0x20>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4413      	add	r3, r2
 8001580:	4a03      	ldr	r2, [pc, #12]	; (8001590 <HAL_IncTick+0x20>)
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	2000002c 	.word	0x2000002c
 8001590:	2000016c 	.word	0x2000016c

08001594 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b02      	ldr	r3, [pc, #8]	; (80015a4 <HAL_GetTick+0x10>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	2000016c 	.word	0x2000016c

080015a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015da:	4a04      	ldr	r2, [pc, #16]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	60d3      	str	r3, [r2, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <__NVIC_GetPriorityGrouping+0x18>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 0307 	and.w	r3, r3, #7
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	2b00      	cmp	r3, #0
 800161c:	db0b      	blt.n	8001636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	4906      	ldr	r1, [pc, #24]	; (8001640 <__NVIC_EnableIRQ+0x34>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	2001      	movs	r0, #1
 800162e:	fa00 f202 	lsl.w	r2, r0, r2
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100

08001644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db0a      	blt.n	800166e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	490c      	ldr	r1, [pc, #48]	; (8001690 <__NVIC_SetPriority+0x4c>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	0112      	lsls	r2, r2, #4
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	440b      	add	r3, r1
 8001668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800166c:	e00a      	b.n	8001684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4908      	ldr	r1, [pc, #32]	; (8001694 <__NVIC_SetPriority+0x50>)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	3b04      	subs	r3, #4
 800167c:	0112      	lsls	r2, r2, #4
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	440b      	add	r3, r1
 8001682:	761a      	strb	r2, [r3, #24]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f1c3 0307 	rsb	r3, r3, #7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	bf28      	it	cs
 80016b6:	2304      	movcs	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3304      	adds	r3, #4
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d902      	bls.n	80016c8 <NVIC_EncodePriority+0x30>
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3b03      	subs	r3, #3
 80016c6:	e000      	b.n	80016ca <NVIC_EncodePriority+0x32>
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	4313      	orrs	r3, r2
         );
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800170c:	d301      	bcc.n	8001712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <SysTick_Config+0x40>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171a:	210f      	movs	r1, #15
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f7ff ff90 	bl	8001644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <SysTick_Config+0x40>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <SysTick_Config+0x40>)
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010

08001740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff2d 	bl	80015a8 <__NVIC_SetPriorityGrouping>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001768:	f7ff ff42 	bl	80015f0 <__NVIC_GetPriorityGrouping>
 800176c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f7ff ff90 	bl	8001698 <NVIC_EncodePriority>
 8001778:	4602      	mov	r2, r0
 800177a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff5f 	bl	8001644 <__NVIC_SetPriority>
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff35 	bl	800160c <__NVIC_EnableIRQ>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ffa2 	bl	80016fc <SysTick_Config>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b08b      	sub	sp, #44	; 0x2c
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d6:	e148      	b.n	8001a6a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017d8:	2201      	movs	r2, #1
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	f040 8137 	bne.w	8001a64 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4aa3      	ldr	r2, [pc, #652]	; (8001a88 <HAL_GPIO_Init+0x2c4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d05e      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001800:	4aa1      	ldr	r2, [pc, #644]	; (8001a88 <HAL_GPIO_Init+0x2c4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d875      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001806:	4aa1      	ldr	r2, [pc, #644]	; (8001a8c <HAL_GPIO_Init+0x2c8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d058      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 800180c:	4a9f      	ldr	r2, [pc, #636]	; (8001a8c <HAL_GPIO_Init+0x2c8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d86f      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001812:	4a9f      	ldr	r2, [pc, #636]	; (8001a90 <HAL_GPIO_Init+0x2cc>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d052      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001818:	4a9d      	ldr	r2, [pc, #628]	; (8001a90 <HAL_GPIO_Init+0x2cc>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d869      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800181e:	4a9d      	ldr	r2, [pc, #628]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d04c      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001824:	4a9b      	ldr	r2, [pc, #620]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d863      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800182a:	4a9b      	ldr	r2, [pc, #620]	; (8001a98 <HAL_GPIO_Init+0x2d4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d046      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001830:	4a99      	ldr	r2, [pc, #612]	; (8001a98 <HAL_GPIO_Init+0x2d4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d85d      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001836:	2b12      	cmp	r3, #18
 8001838:	d82a      	bhi.n	8001890 <HAL_GPIO_Init+0xcc>
 800183a:	2b12      	cmp	r3, #18
 800183c:	d859      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800183e:	a201      	add	r2, pc, #4	; (adr r2, 8001844 <HAL_GPIO_Init+0x80>)
 8001840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001844:	080018bf 	.word	0x080018bf
 8001848:	08001899 	.word	0x08001899
 800184c:	080018ab 	.word	0x080018ab
 8001850:	080018ed 	.word	0x080018ed
 8001854:	080018f3 	.word	0x080018f3
 8001858:	080018f3 	.word	0x080018f3
 800185c:	080018f3 	.word	0x080018f3
 8001860:	080018f3 	.word	0x080018f3
 8001864:	080018f3 	.word	0x080018f3
 8001868:	080018f3 	.word	0x080018f3
 800186c:	080018f3 	.word	0x080018f3
 8001870:	080018f3 	.word	0x080018f3
 8001874:	080018f3 	.word	0x080018f3
 8001878:	080018f3 	.word	0x080018f3
 800187c:	080018f3 	.word	0x080018f3
 8001880:	080018f3 	.word	0x080018f3
 8001884:	080018f3 	.word	0x080018f3
 8001888:	080018a1 	.word	0x080018a1
 800188c:	080018b5 	.word	0x080018b5
 8001890:	4a82      	ldr	r2, [pc, #520]	; (8001a9c <HAL_GPIO_Init+0x2d8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001896:	e02c      	b.n	80018f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	623b      	str	r3, [r7, #32]
          break;
 800189e:	e029      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	3304      	adds	r3, #4
 80018a6:	623b      	str	r3, [r7, #32]
          break;
 80018a8:	e024      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	3308      	adds	r3, #8
 80018b0:	623b      	str	r3, [r7, #32]
          break;
 80018b2:	e01f      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	330c      	adds	r3, #12
 80018ba:	623b      	str	r3, [r7, #32]
          break;
 80018bc:	e01a      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d102      	bne.n	80018cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018c6:	2304      	movs	r3, #4
 80018c8:	623b      	str	r3, [r7, #32]
          break;
 80018ca:	e013      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d105      	bne.n	80018e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d4:	2308      	movs	r3, #8
 80018d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	611a      	str	r2, [r3, #16]
          break;
 80018de:	e009      	b.n	80018f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e0:	2308      	movs	r3, #8
 80018e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	615a      	str	r2, [r3, #20]
          break;
 80018ea:	e003      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
          break;
 80018f0:	e000      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          break;
 80018f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2bff      	cmp	r3, #255	; 0xff
 80018f8:	d801      	bhi.n	80018fe <HAL_GPIO_Init+0x13a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	e001      	b.n	8001902 <HAL_GPIO_Init+0x13e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3304      	adds	r3, #4
 8001902:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2bff      	cmp	r3, #255	; 0xff
 8001908:	d802      	bhi.n	8001910 <HAL_GPIO_Init+0x14c>
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	e002      	b.n	8001916 <HAL_GPIO_Init+0x152>
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	3b08      	subs	r3, #8
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	210f      	movs	r1, #15
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	401a      	ands	r2, r3
 8001928:	6a39      	ldr	r1, [r7, #32]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	431a      	orrs	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 8090 	beq.w	8001a64 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001944:	4b56      	ldr	r3, [pc, #344]	; (8001aa0 <HAL_GPIO_Init+0x2dc>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a55      	ldr	r2, [pc, #340]	; (8001aa0 <HAL_GPIO_Init+0x2dc>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <HAL_GPIO_Init+0x2dc>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800195c:	4a51      	ldr	r2, [pc, #324]	; (8001aa4 <HAL_GPIO_Init+0x2e0>)
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001968:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4013      	ands	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a49      	ldr	r2, [pc, #292]	; (8001aa8 <HAL_GPIO_Init+0x2e4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00d      	beq.n	80019a4 <HAL_GPIO_Init+0x1e0>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a48      	ldr	r2, [pc, #288]	; (8001aac <HAL_GPIO_Init+0x2e8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d007      	beq.n	80019a0 <HAL_GPIO_Init+0x1dc>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a47      	ldr	r2, [pc, #284]	; (8001ab0 <HAL_GPIO_Init+0x2ec>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d101      	bne.n	800199c <HAL_GPIO_Init+0x1d8>
 8001998:	2302      	movs	r3, #2
 800199a:	e004      	b.n	80019a6 <HAL_GPIO_Init+0x1e2>
 800199c:	2303      	movs	r3, #3
 800199e:	e002      	b.n	80019a6 <HAL_GPIO_Init+0x1e2>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <HAL_GPIO_Init+0x1e2>
 80019a4:	2300      	movs	r3, #0
 80019a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a8:	f002 0203 	and.w	r2, r2, #3
 80019ac:	0092      	lsls	r2, r2, #2
 80019ae:	4093      	lsls	r3, r2
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019b6:	493b      	ldr	r1, [pc, #236]	; (8001aa4 <HAL_GPIO_Init+0x2e0>)
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3302      	adds	r3, #2
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019d0:	4b38      	ldr	r3, [pc, #224]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4937      	ldr	r1, [pc, #220]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019de:	4b35      	ldr	r3, [pc, #212]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4933      	ldr	r1, [pc, #204]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d006      	beq.n	8001a06 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019f8:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	492d      	ldr	r1, [pc, #180]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
 8001a04:	e006      	b.n	8001a14 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a06:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	4929      	ldr	r1, [pc, #164]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d006      	beq.n	8001a2e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	4923      	ldr	r1, [pc, #140]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]
 8001a2c:	e006      	b.n	8001a3c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a2e:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	491f      	ldr	r1, [pc, #124]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d006      	beq.n	8001a56 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a48:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	4919      	ldr	r1, [pc, #100]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	60cb      	str	r3, [r1, #12]
 8001a54:	e006      	b.n	8001a64 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	4915      	ldr	r1, [pc, #84]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	3301      	adds	r3, #1
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f47f aeaf 	bne.w	80017d8 <HAL_GPIO_Init+0x14>
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	bf00      	nop
 8001a7e:	372c      	adds	r7, #44	; 0x2c
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	10320000 	.word	0x10320000
 8001a8c:	10310000 	.word	0x10310000
 8001a90:	10220000 	.word	0x10220000
 8001a94:	10210000 	.word	0x10210000
 8001a98:	10120000 	.word	0x10120000
 8001a9c:	10110000 	.word	0x10110000
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010000 	.word	0x40010000
 8001aa8:	40010800 	.word	0x40010800
 8001aac:	40010c00 	.word	0x40010c00
 8001ab0:	40011000 	.word	0x40011000
 8001ab4:	40010400 	.word	0x40010400

08001ab8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	e001      	b.n	8001ada <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	807b      	strh	r3, [r7, #2]
 8001af2:	4613      	mov	r3, r2
 8001af4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001af6:	787b      	ldrb	r3, [r7, #1]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001afc:	887a      	ldrh	r2, [r7, #2]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b02:	e003      	b.n	8001b0c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b04:	887b      	ldrh	r3, [r7, #2]
 8001b06:	041a      	lsls	r2, r3, #16
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	611a      	str	r2, [r3, #16]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b28:	887a      	ldrh	r2, [r7, #2]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	041a      	lsls	r2, r3, #16
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43d9      	mvns	r1, r3
 8001b34:	887b      	ldrh	r3, [r7, #2]
 8001b36:	400b      	ands	r3, r1
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	611a      	str	r2, [r3, #16]
}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e26c      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 8087 	beq.w	8001c76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b68:	4b92      	ldr	r3, [pc, #584]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d00c      	beq.n	8001b8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b74:	4b8f      	ldr	r3, [pc, #572]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d112      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x5e>
 8001b80:	4b8c      	ldr	r3, [pc, #560]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8c:	d10b      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8e:	4b89      	ldr	r3, [pc, #548]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d06c      	beq.n	8001c74 <HAL_RCC_OscConfig+0x12c>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d168      	bne.n	8001c74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e246      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bae:	d106      	bne.n	8001bbe <HAL_RCC_OscConfig+0x76>
 8001bb0:	4b80      	ldr	r3, [pc, #512]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a7f      	ldr	r2, [pc, #508]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	e02e      	b.n	8001c1c <HAL_RCC_OscConfig+0xd4>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x98>
 8001bc6:	4b7b      	ldr	r3, [pc, #492]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a7a      	ldr	r2, [pc, #488]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b78      	ldr	r3, [pc, #480]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a77      	ldr	r2, [pc, #476]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e01d      	b.n	8001c1c <HAL_RCC_OscConfig+0xd4>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0xbc>
 8001bea:	4b72      	ldr	r3, [pc, #456]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a71      	ldr	r2, [pc, #452]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	4b6f      	ldr	r3, [pc, #444]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a6e      	ldr	r2, [pc, #440]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	e00b      	b.n	8001c1c <HAL_RCC_OscConfig+0xd4>
 8001c04:	4b6b      	ldr	r3, [pc, #428]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a6a      	ldr	r2, [pc, #424]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b68      	ldr	r3, [pc, #416]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a67      	ldr	r2, [pc, #412]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d013      	beq.n	8001c4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fcb6 	bl	8001594 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff fcb2 	bl	8001594 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e1fa      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	4b5d      	ldr	r3, [pc, #372]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0xe4>
 8001c4a:	e014      	b.n	8001c76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fca2 	bl	8001594 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c54:	f7ff fc9e 	bl	8001594 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b64      	cmp	r3, #100	; 0x64
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e1e6      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c66:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x10c>
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d063      	beq.n	8001d4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c82:	4b4c      	ldr	r3, [pc, #304]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00b      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c8e:	4b49      	ldr	r3, [pc, #292]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d11c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x18c>
 8001c9a:	4b46      	ldr	r3, [pc, #280]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d116      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca6:	4b43      	ldr	r3, [pc, #268]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <HAL_RCC_OscConfig+0x176>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d001      	beq.n	8001cbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e1ba      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbe:	4b3d      	ldr	r3, [pc, #244]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4939      	ldr	r1, [pc, #228]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd2:	e03a      	b.n	8001d4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d020      	beq.n	8001d1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cdc:	4b36      	ldr	r3, [pc, #216]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7ff fc57 	bl	8001594 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cea:	f7ff fc53 	bl	8001594 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e19b      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f0      	beq.n	8001cea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d08:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4927      	ldr	r1, [pc, #156]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]
 8001d1c:	e015      	b.n	8001d4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1e:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fc36 	bl	8001594 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2c:	f7ff fc32 	bl	8001594 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e17a      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d03a      	beq.n	8001dcc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d019      	beq.n	8001d92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d64:	f7ff fc16 	bl	8001594 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6c:	f7ff fc12 	bl	8001594 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e15a      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	f000 faa6 	bl	80022dc <RCC_Delay>
 8001d90:	e01c      	b.n	8001dcc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d98:	f7ff fbfc 	bl	8001594 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9e:	e00f      	b.n	8001dc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da0:	f7ff fbf8 	bl	8001594 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d908      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e140      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	42420000 	.word	0x42420000
 8001dbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc0:	4b9e      	ldr	r3, [pc, #632]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1e9      	bne.n	8001da0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80a6 	beq.w	8001f26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dde:	4b97      	ldr	r3, [pc, #604]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10d      	bne.n	8001e06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dea:	4b94      	ldr	r3, [pc, #592]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	4a93      	ldr	r2, [pc, #588]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df4:	61d3      	str	r3, [r2, #28]
 8001df6:	4b91      	ldr	r3, [pc, #580]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e02:	2301      	movs	r3, #1
 8001e04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e06:	4b8e      	ldr	r3, [pc, #568]	; (8002040 <HAL_RCC_OscConfig+0x4f8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d118      	bne.n	8001e44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e12:	4b8b      	ldr	r3, [pc, #556]	; (8002040 <HAL_RCC_OscConfig+0x4f8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a8a      	ldr	r2, [pc, #552]	; (8002040 <HAL_RCC_OscConfig+0x4f8>)
 8001e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e1e:	f7ff fbb9 	bl	8001594 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e26:	f7ff fbb5 	bl	8001594 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b64      	cmp	r3, #100	; 0x64
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e0fd      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	4b81      	ldr	r3, [pc, #516]	; (8002040 <HAL_RCC_OscConfig+0x4f8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d106      	bne.n	8001e5a <HAL_RCC_OscConfig+0x312>
 8001e4c:	4b7b      	ldr	r3, [pc, #492]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4a7a      	ldr	r2, [pc, #488]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6213      	str	r3, [r2, #32]
 8001e58:	e02d      	b.n	8001eb6 <HAL_RCC_OscConfig+0x36e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x334>
 8001e62:	4b76      	ldr	r3, [pc, #472]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a75      	ldr	r2, [pc, #468]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	f023 0301 	bic.w	r3, r3, #1
 8001e6c:	6213      	str	r3, [r2, #32]
 8001e6e:	4b73      	ldr	r3, [pc, #460]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	4a72      	ldr	r2, [pc, #456]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	f023 0304 	bic.w	r3, r3, #4
 8001e78:	6213      	str	r3, [r2, #32]
 8001e7a:	e01c      	b.n	8001eb6 <HAL_RCC_OscConfig+0x36e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b05      	cmp	r3, #5
 8001e82:	d10c      	bne.n	8001e9e <HAL_RCC_OscConfig+0x356>
 8001e84:	4b6d      	ldr	r3, [pc, #436]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4a6c      	ldr	r2, [pc, #432]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	6213      	str	r3, [r2, #32]
 8001e90:	4b6a      	ldr	r3, [pc, #424]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4a69      	ldr	r2, [pc, #420]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6213      	str	r3, [r2, #32]
 8001e9c:	e00b      	b.n	8001eb6 <HAL_RCC_OscConfig+0x36e>
 8001e9e:	4b67      	ldr	r3, [pc, #412]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4a66      	ldr	r2, [pc, #408]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	f023 0301 	bic.w	r3, r3, #1
 8001ea8:	6213      	str	r3, [r2, #32]
 8001eaa:	4b64      	ldr	r3, [pc, #400]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	4a63      	ldr	r2, [pc, #396]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	f023 0304 	bic.w	r3, r3, #4
 8001eb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d015      	beq.n	8001eea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff fb69 	bl	8001594 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec4:	e00a      	b.n	8001edc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec6:	f7ff fb65 	bl	8001594 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e0ab      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001edc:	4b57      	ldr	r3, [pc, #348]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0ee      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x37e>
 8001ee8:	e014      	b.n	8001f14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eea:	f7ff fb53 	bl	8001594 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef0:	e00a      	b.n	8001f08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef2:	f7ff fb4f 	bl	8001594 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e095      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f08:	4b4c      	ldr	r3, [pc, #304]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1ee      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f14:	7dfb      	ldrb	r3, [r7, #23]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d105      	bne.n	8001f26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f1a:	4b48      	ldr	r3, [pc, #288]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	4a47      	ldr	r2, [pc, #284]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8081 	beq.w	8002032 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f30:	4b42      	ldr	r3, [pc, #264]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 030c 	and.w	r3, r3, #12
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d061      	beq.n	8002000 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d146      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f44:	4b3f      	ldr	r3, [pc, #252]	; (8002044 <HAL_RCC_OscConfig+0x4fc>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4a:	f7ff fb23 	bl	8001594 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f52:	f7ff fb1f 	bl	8001594 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e067      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f64:	4b35      	ldr	r3, [pc, #212]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f0      	bne.n	8001f52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f78:	d108      	bne.n	8001f8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f7a:	4b30      	ldr	r3, [pc, #192]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	492d      	ldr	r1, [pc, #180]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f8c:	4b2b      	ldr	r3, [pc, #172]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a19      	ldr	r1, [r3, #32]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	4927      	ldr	r1, [pc, #156]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_RCC_OscConfig+0x4fc>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001faa:	f7ff faf3 	bl	8001594 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb2:	f7ff faef 	bl	8001594 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e037      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0f0      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x46a>
 8001fd0:	e02f      	b.n	8002032 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <HAL_RCC_OscConfig+0x4fc>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fadc 	bl	8001594 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe0:	f7ff fad8 	bl	8001594 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e020      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x498>
 8001ffe:	e018      	b.n	8002032 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e013      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	429a      	cmp	r2, r3
 800201e:	d106      	bne.n	800202e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	429a      	cmp	r2, r3
 800202c:	d001      	beq.n	8002032 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40021000 	.word	0x40021000
 8002040:	40007000 	.word	0x40007000
 8002044:	42420060 	.word	0x42420060

08002048 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0d0      	b.n	80021fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800205c:	4b6a      	ldr	r3, [pc, #424]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d910      	bls.n	800208c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b67      	ldr	r3, [pc, #412]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 0207 	bic.w	r2, r3, #7
 8002072:	4965      	ldr	r1, [pc, #404]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b63      	ldr	r3, [pc, #396]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0b8      	b.n	80021fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d020      	beq.n	80020da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a4:	4b59      	ldr	r3, [pc, #356]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4a58      	ldr	r2, [pc, #352]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020bc:	4b53      	ldr	r3, [pc, #332]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4a52      	ldr	r2, [pc, #328]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c8:	4b50      	ldr	r3, [pc, #320]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	494d      	ldr	r1, [pc, #308]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d040      	beq.n	8002168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	4b47      	ldr	r3, [pc, #284]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d115      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e07f      	b.n	80021fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002106:	4b41      	ldr	r3, [pc, #260]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d109      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e073      	b.n	80021fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002116:	4b3d      	ldr	r3, [pc, #244]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e06b      	b.n	80021fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002126:	4b39      	ldr	r3, [pc, #228]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f023 0203 	bic.w	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4936      	ldr	r1, [pc, #216]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	4313      	orrs	r3, r2
 8002136:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002138:	f7ff fa2c 	bl	8001594 <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213e:	e00a      	b.n	8002156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002140:	f7ff fa28 	bl	8001594 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	; 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e053      	b.n	80021fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	4b2d      	ldr	r3, [pc, #180]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 020c 	and.w	r2, r3, #12
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	429a      	cmp	r2, r3
 8002166:	d1eb      	bne.n	8002140 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002168:	4b27      	ldr	r3, [pc, #156]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d210      	bcs.n	8002198 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b24      	ldr	r3, [pc, #144]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 0207 	bic.w	r2, r3, #7
 800217e:	4922      	ldr	r1, [pc, #136]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	4b20      	ldr	r3, [pc, #128]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d001      	beq.n	8002198 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e032      	b.n	80021fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4916      	ldr	r1, [pc, #88]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d009      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	490e      	ldr	r1, [pc, #56]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021d6:	f000 f821 	bl	800221c <HAL_RCC_GetSysClockFreq>
 80021da:	4602      	mov	r2, r0
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	490a      	ldr	r1, [pc, #40]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80021e8:	5ccb      	ldrb	r3, [r1, r3]
 80021ea:	fa22 f303 	lsr.w	r3, r2, r3
 80021ee:	4a09      	ldr	r2, [pc, #36]	; (8002214 <HAL_RCC_ClockConfig+0x1cc>)
 80021f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_RCC_ClockConfig+0x1d0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff f98a 	bl	8001510 <HAL_InitTick>

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40022000 	.word	0x40022000
 800220c:	40021000 	.word	0x40021000
 8002210:	08002cc0 	.word	0x08002cc0
 8002214:	20000020 	.word	0x20000020
 8002218:	20000028 	.word	0x20000028

0800221c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800221c:	b490      	push	{r4, r7}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002222:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002224:	1d3c      	adds	r4, r7, #4
 8002226:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002228:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800222c:	f240 2301 	movw	r3, #513	; 0x201
 8002230:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002246:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b04      	cmp	r3, #4
 8002254:	d002      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x40>
 8002256:	2b08      	cmp	r3, #8
 8002258:	d003      	beq.n	8002262 <HAL_RCC_GetSysClockFreq+0x46>
 800225a:	e02d      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800225c:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800225e:	623b      	str	r3, [r7, #32]
      break;
 8002260:	e02d      	b.n	80022be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	0c9b      	lsrs	r3, r3, #18
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800226e:	4413      	add	r3, r2
 8002270:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002274:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d013      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002280:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	0c5b      	lsrs	r3, r3, #17
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800228e:	4413      	add	r3, r2
 8002290:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002294:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800229a:	fb02 f203 	mul.w	r2, r2, r3
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
 80022a6:	e004      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022ac:	fb02 f303 	mul.w	r3, r2, r3
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	623b      	str	r3, [r7, #32]
      break;
 80022b6:	e002      	b.n	80022be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ba:	623b      	str	r3, [r7, #32]
      break;
 80022bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022be:	6a3b      	ldr	r3, [r7, #32]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3728      	adds	r7, #40	; 0x28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc90      	pop	{r4, r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	08002c84 	.word	0x08002c84
 80022d0:	40021000 	.word	0x40021000
 80022d4:	007a1200 	.word	0x007a1200
 80022d8:	003d0900 	.word	0x003d0900

080022dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <RCC_Delay+0x34>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <RCC_Delay+0x38>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	0a5b      	lsrs	r3, r3, #9
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	fb02 f303 	mul.w	r3, r2, r3
 80022f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022f8:	bf00      	nop
  }
  while (Delay --);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1e5a      	subs	r2, r3, #1
 80022fe:	60fa      	str	r2, [r7, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f9      	bne.n	80022f8 <RCC_Delay+0x1c>
}
 8002304:	bf00      	nop
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	20000020 	.word	0x20000020
 8002314:	10624dd3 	.word	0x10624dd3

08002318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e041      	b.n	80023ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d106      	bne.n	8002344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7fe fc5c 	bl	8000bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3304      	adds	r3, #4
 8002354:	4619      	mov	r1, r3
 8002356:	4610      	mov	r0, r2
 8002358:	f000 fa6a 	bl	8002830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d001      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e035      	b.n	800243c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a16      	ldr	r2, [pc, #88]	; (8002448 <HAL_TIM_Base_Start_IT+0x90>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d009      	beq.n	8002406 <HAL_TIM_Base_Start_IT+0x4e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fa:	d004      	beq.n	8002406 <HAL_TIM_Base_Start_IT+0x4e>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a12      	ldr	r2, [pc, #72]	; (800244c <HAL_TIM_Base_Start_IT+0x94>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d111      	bne.n	800242a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b06      	cmp	r3, #6
 8002416:	d010      	beq.n	800243a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002428:	e007      	b.n	800243a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0201 	orr.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40012c00 	.word	0x40012c00
 800244c:	40000400 	.word	0x40000400

08002450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b02      	cmp	r3, #2
 8002464:	d122      	bne.n	80024ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b02      	cmp	r3, #2
 8002472:	d11b      	bne.n	80024ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0202 	mvn.w	r2, #2
 800247c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f9b1 	bl	80027fa <HAL_TIM_IC_CaptureCallback>
 8002498:	e005      	b.n	80024a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f9a4 	bl	80027e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f9b3 	bl	800280c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d122      	bne.n	8002500 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d11b      	bne.n	8002500 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f06f 0204 	mvn.w	r2, #4
 80024d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2202      	movs	r2, #2
 80024d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f987 	bl	80027fa <HAL_TIM_IC_CaptureCallback>
 80024ec:	e005      	b.n	80024fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f97a 	bl	80027e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f989 	bl	800280c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b08      	cmp	r3, #8
 800250c:	d122      	bne.n	8002554 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b08      	cmp	r3, #8
 800251a:	d11b      	bne.n	8002554 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0208 	mvn.w	r2, #8
 8002524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2204      	movs	r2, #4
 800252a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f95d 	bl	80027fa <HAL_TIM_IC_CaptureCallback>
 8002540:	e005      	b.n	800254e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f950 	bl	80027e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f95f 	bl	800280c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b10      	cmp	r3, #16
 8002560:	d122      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	2b10      	cmp	r3, #16
 800256e:	d11b      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f06f 0210 	mvn.w	r2, #16
 8002578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2208      	movs	r2, #8
 800257e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f933 	bl	80027fa <HAL_TIM_IC_CaptureCallback>
 8002594:	e005      	b.n	80025a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f926 	bl	80027e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f935 	bl	800280c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d10e      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d107      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0201 	mvn.w	r2, #1
 80025cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe fd60 	bl	8001094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025de:	2b80      	cmp	r3, #128	; 0x80
 80025e0:	d10e      	bne.n	8002600 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ec:	2b80      	cmp	r3, #128	; 0x80
 80025ee:	d107      	bne.n	8002600 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fa67 	bl	8002ace <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260a:	2b40      	cmp	r3, #64	; 0x40
 800260c:	d10e      	bne.n	800262c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002618:	2b40      	cmp	r3, #64	; 0x40
 800261a:	d107      	bne.n	800262c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f8f9 	bl	800281e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b20      	cmp	r3, #32
 8002638:	d10e      	bne.n	8002658 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0320 	and.w	r3, r3, #32
 8002644:	2b20      	cmp	r3, #32
 8002646:	d107      	bne.n	8002658 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0220 	mvn.w	r2, #32
 8002650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fa32 	bl	8002abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_TIM_ConfigClockSource+0x18>
 8002674:	2302      	movs	r3, #2
 8002676:	e0b3      	b.n	80027e0 <HAL_TIM_ConfigClockSource+0x180>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002696:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800269e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026b0:	d03e      	beq.n	8002730 <HAL_TIM_ConfigClockSource+0xd0>
 80026b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026b6:	f200 8087 	bhi.w	80027c8 <HAL_TIM_ConfigClockSource+0x168>
 80026ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026be:	f000 8085 	beq.w	80027cc <HAL_TIM_ConfigClockSource+0x16c>
 80026c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c6:	d87f      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x168>
 80026c8:	2b70      	cmp	r3, #112	; 0x70
 80026ca:	d01a      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0xa2>
 80026cc:	2b70      	cmp	r3, #112	; 0x70
 80026ce:	d87b      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x168>
 80026d0:	2b60      	cmp	r3, #96	; 0x60
 80026d2:	d050      	beq.n	8002776 <HAL_TIM_ConfigClockSource+0x116>
 80026d4:	2b60      	cmp	r3, #96	; 0x60
 80026d6:	d877      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x168>
 80026d8:	2b50      	cmp	r3, #80	; 0x50
 80026da:	d03c      	beq.n	8002756 <HAL_TIM_ConfigClockSource+0xf6>
 80026dc:	2b50      	cmp	r3, #80	; 0x50
 80026de:	d873      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x168>
 80026e0:	2b40      	cmp	r3, #64	; 0x40
 80026e2:	d058      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x136>
 80026e4:	2b40      	cmp	r3, #64	; 0x40
 80026e6:	d86f      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x168>
 80026e8:	2b30      	cmp	r3, #48	; 0x30
 80026ea:	d064      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0x156>
 80026ec:	2b30      	cmp	r3, #48	; 0x30
 80026ee:	d86b      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x168>
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d060      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0x156>
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	d867      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x168>
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d05c      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0x156>
 80026fc:	2b10      	cmp	r3, #16
 80026fe:	d05a      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002700:	e062      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6899      	ldr	r1, [r3, #8]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f000 f95c 	bl	80029ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002724:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	609a      	str	r2, [r3, #8]
      break;
 800272e:	e04e      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	6899      	ldr	r1, [r3, #8]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f000 f945 	bl	80029ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002752:	609a      	str	r2, [r3, #8]
      break;
 8002754:	e03b      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	6859      	ldr	r1, [r3, #4]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	461a      	mov	r2, r3
 8002764:	f000 f8bc 	bl	80028e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2150      	movs	r1, #80	; 0x50
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f913 	bl	800299a <TIM_ITRx_SetConfig>
      break;
 8002774:	e02b      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6859      	ldr	r1, [r3, #4]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	461a      	mov	r2, r3
 8002784:	f000 f8da 	bl	800293c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2160      	movs	r1, #96	; 0x60
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f903 	bl	800299a <TIM_ITRx_SetConfig>
      break;
 8002794:	e01b      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6859      	ldr	r1, [r3, #4]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	461a      	mov	r2, r3
 80027a4:	f000 f89c 	bl	80028e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2140      	movs	r1, #64	; 0x40
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 f8f3 	bl	800299a <TIM_ITRx_SetConfig>
      break;
 80027b4:	e00b      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4619      	mov	r1, r3
 80027c0:	4610      	mov	r0, r2
 80027c2:	f000 f8ea 	bl	800299a <TIM_ITRx_SetConfig>
        break;
 80027c6:	e002      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027c8:	bf00      	nop
 80027ca:	e000      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a25      	ldr	r2, [pc, #148]	; (80028d8 <TIM_Base_SetConfig+0xa8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d007      	beq.n	8002858 <TIM_Base_SetConfig+0x28>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284e:	d003      	beq.n	8002858 <TIM_Base_SetConfig+0x28>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a22      	ldr	r2, [pc, #136]	; (80028dc <TIM_Base_SetConfig+0xac>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d108      	bne.n	800286a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a1a      	ldr	r2, [pc, #104]	; (80028d8 <TIM_Base_SetConfig+0xa8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d007      	beq.n	8002882 <TIM_Base_SetConfig+0x52>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002878:	d003      	beq.n	8002882 <TIM_Base_SetConfig+0x52>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a17      	ldr	r2, [pc, #92]	; (80028dc <TIM_Base_SetConfig+0xac>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d108      	bne.n	8002894 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4313      	orrs	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <TIM_Base_SetConfig+0xa8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d103      	bne.n	80028c8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	615a      	str	r2, [r3, #20]
}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40000400 	.word	0x40000400

080028e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	f023 0201 	bic.w	r2, r3, #1
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800290a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f023 030a 	bic.w	r3, r3, #10
 800291c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4313      	orrs	r3, r2
 8002924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	621a      	str	r2, [r3, #32]
}
 8002932:	bf00      	nop
 8002934:	371c      	adds	r7, #28
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	f023 0210 	bic.w	r2, r3, #16
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002966:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	031b      	lsls	r3, r3, #12
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002978:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	621a      	str	r2, [r3, #32]
}
 8002990:	bf00      	nop
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800299a:	b480      	push	{r7}
 800299c:	b085      	sub	sp, #20
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f043 0307 	orr.w	r3, r3, #7
 80029bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	609a      	str	r2, [r3, #8]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b087      	sub	sp, #28
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	021a      	lsls	r2, r3, #8
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	431a      	orrs	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	609a      	str	r2, [r3, #8]
}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e041      	b.n	8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d009      	beq.n	8002a7c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a70:	d004      	beq.n	8002a7c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d10c      	bne.n	8002a96 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	40000400 	.word	0x40000400

08002abc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <__errno>:
 8002ae0:	4b01      	ldr	r3, [pc, #4]	; (8002ae8 <__errno+0x8>)
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20000030 	.word	0x20000030

08002aec <exit>:
 8002aec:	b508      	push	{r3, lr}
 8002aee:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <exit+0x20>)
 8002af0:	4604      	mov	r4, r0
 8002af2:	b113      	cbz	r3, 8002afa <exit+0xe>
 8002af4:	2100      	movs	r1, #0
 8002af6:	f3af 8000 	nop.w
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <exit+0x24>)
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b00:	b103      	cbz	r3, 8002b04 <exit+0x18>
 8002b02:	4798      	blx	r3
 8002b04:	4620      	mov	r0, r4
 8002b06:	f7fe f8df 	bl	8000cc8 <_exit>
 8002b0a:	bf00      	nop
 8002b0c:	00000000 	.word	0x00000000
 8002b10:	08002cd0 	.word	0x08002cd0

08002b14 <__libc_init_array>:
 8002b14:	b570      	push	{r4, r5, r6, lr}
 8002b16:	2600      	movs	r6, #0
 8002b18:	4d0c      	ldr	r5, [pc, #48]	; (8002b4c <__libc_init_array+0x38>)
 8002b1a:	4c0d      	ldr	r4, [pc, #52]	; (8002b50 <__libc_init_array+0x3c>)
 8002b1c:	1b64      	subs	r4, r4, r5
 8002b1e:	10a4      	asrs	r4, r4, #2
 8002b20:	42a6      	cmp	r6, r4
 8002b22:	d109      	bne.n	8002b38 <__libc_init_array+0x24>
 8002b24:	f000 f8a2 	bl	8002c6c <_init>
 8002b28:	2600      	movs	r6, #0
 8002b2a:	4d0a      	ldr	r5, [pc, #40]	; (8002b54 <__libc_init_array+0x40>)
 8002b2c:	4c0a      	ldr	r4, [pc, #40]	; (8002b58 <__libc_init_array+0x44>)
 8002b2e:	1b64      	subs	r4, r4, r5
 8002b30:	10a4      	asrs	r4, r4, #2
 8002b32:	42a6      	cmp	r6, r4
 8002b34:	d105      	bne.n	8002b42 <__libc_init_array+0x2e>
 8002b36:	bd70      	pop	{r4, r5, r6, pc}
 8002b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b3c:	4798      	blx	r3
 8002b3e:	3601      	adds	r6, #1
 8002b40:	e7ee      	b.n	8002b20 <__libc_init_array+0xc>
 8002b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b46:	4798      	blx	r3
 8002b48:	3601      	adds	r6, #1
 8002b4a:	e7f2      	b.n	8002b32 <__libc_init_array+0x1e>
 8002b4c:	08002cd4 	.word	0x08002cd4
 8002b50:	08002cd4 	.word	0x08002cd4
 8002b54:	08002cd4 	.word	0x08002cd4
 8002b58:	08002cd8 	.word	0x08002cd8

08002b5c <malloc>:
 8002b5c:	4b02      	ldr	r3, [pc, #8]	; (8002b68 <malloc+0xc>)
 8002b5e:	4601      	mov	r1, r0
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	f000 b80b 	b.w	8002b7c <_malloc_r>
 8002b66:	bf00      	nop
 8002b68:	20000030 	.word	0x20000030

08002b6c <memset>:
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4402      	add	r2, r0
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d100      	bne.n	8002b76 <memset+0xa>
 8002b74:	4770      	bx	lr
 8002b76:	f803 1b01 	strb.w	r1, [r3], #1
 8002b7a:	e7f9      	b.n	8002b70 <memset+0x4>

08002b7c <_malloc_r>:
 8002b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7e:	1ccd      	adds	r5, r1, #3
 8002b80:	f025 0503 	bic.w	r5, r5, #3
 8002b84:	3508      	adds	r5, #8
 8002b86:	2d0c      	cmp	r5, #12
 8002b88:	bf38      	it	cc
 8002b8a:	250c      	movcc	r5, #12
 8002b8c:	2d00      	cmp	r5, #0
 8002b8e:	4606      	mov	r6, r0
 8002b90:	db01      	blt.n	8002b96 <_malloc_r+0x1a>
 8002b92:	42a9      	cmp	r1, r5
 8002b94:	d903      	bls.n	8002b9e <_malloc_r+0x22>
 8002b96:	230c      	movs	r3, #12
 8002b98:	6033      	str	r3, [r6, #0]
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b9e:	f000 f857 	bl	8002c50 <__malloc_lock>
 8002ba2:	4921      	ldr	r1, [pc, #132]	; (8002c28 <_malloc_r+0xac>)
 8002ba4:	680a      	ldr	r2, [r1, #0]
 8002ba6:	4614      	mov	r4, r2
 8002ba8:	b99c      	cbnz	r4, 8002bd2 <_malloc_r+0x56>
 8002baa:	4f20      	ldr	r7, [pc, #128]	; (8002c2c <_malloc_r+0xb0>)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	b923      	cbnz	r3, 8002bba <_malloc_r+0x3e>
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	4630      	mov	r0, r6
 8002bb4:	f000 f83c 	bl	8002c30 <_sbrk_r>
 8002bb8:	6038      	str	r0, [r7, #0]
 8002bba:	4629      	mov	r1, r5
 8002bbc:	4630      	mov	r0, r6
 8002bbe:	f000 f837 	bl	8002c30 <_sbrk_r>
 8002bc2:	1c43      	adds	r3, r0, #1
 8002bc4:	d123      	bne.n	8002c0e <_malloc_r+0x92>
 8002bc6:	230c      	movs	r3, #12
 8002bc8:	4630      	mov	r0, r6
 8002bca:	6033      	str	r3, [r6, #0]
 8002bcc:	f000 f846 	bl	8002c5c <__malloc_unlock>
 8002bd0:	e7e3      	b.n	8002b9a <_malloc_r+0x1e>
 8002bd2:	6823      	ldr	r3, [r4, #0]
 8002bd4:	1b5b      	subs	r3, r3, r5
 8002bd6:	d417      	bmi.n	8002c08 <_malloc_r+0x8c>
 8002bd8:	2b0b      	cmp	r3, #11
 8002bda:	d903      	bls.n	8002be4 <_malloc_r+0x68>
 8002bdc:	6023      	str	r3, [r4, #0]
 8002bde:	441c      	add	r4, r3
 8002be0:	6025      	str	r5, [r4, #0]
 8002be2:	e004      	b.n	8002bee <_malloc_r+0x72>
 8002be4:	6863      	ldr	r3, [r4, #4]
 8002be6:	42a2      	cmp	r2, r4
 8002be8:	bf0c      	ite	eq
 8002bea:	600b      	streq	r3, [r1, #0]
 8002bec:	6053      	strne	r3, [r2, #4]
 8002bee:	4630      	mov	r0, r6
 8002bf0:	f000 f834 	bl	8002c5c <__malloc_unlock>
 8002bf4:	f104 000b 	add.w	r0, r4, #11
 8002bf8:	1d23      	adds	r3, r4, #4
 8002bfa:	f020 0007 	bic.w	r0, r0, #7
 8002bfe:	1ac2      	subs	r2, r0, r3
 8002c00:	d0cc      	beq.n	8002b9c <_malloc_r+0x20>
 8002c02:	1a1b      	subs	r3, r3, r0
 8002c04:	50a3      	str	r3, [r4, r2]
 8002c06:	e7c9      	b.n	8002b9c <_malloc_r+0x20>
 8002c08:	4622      	mov	r2, r4
 8002c0a:	6864      	ldr	r4, [r4, #4]
 8002c0c:	e7cc      	b.n	8002ba8 <_malloc_r+0x2c>
 8002c0e:	1cc4      	adds	r4, r0, #3
 8002c10:	f024 0403 	bic.w	r4, r4, #3
 8002c14:	42a0      	cmp	r0, r4
 8002c16:	d0e3      	beq.n	8002be0 <_malloc_r+0x64>
 8002c18:	1a21      	subs	r1, r4, r0
 8002c1a:	4630      	mov	r0, r6
 8002c1c:	f000 f808 	bl	8002c30 <_sbrk_r>
 8002c20:	3001      	adds	r0, #1
 8002c22:	d1dd      	bne.n	8002be0 <_malloc_r+0x64>
 8002c24:	e7cf      	b.n	8002bc6 <_malloc_r+0x4a>
 8002c26:	bf00      	nop
 8002c28:	20000110 	.word	0x20000110
 8002c2c:	20000114 	.word	0x20000114

08002c30 <_sbrk_r>:
 8002c30:	b538      	push	{r3, r4, r5, lr}
 8002c32:	2300      	movs	r3, #0
 8002c34:	4d05      	ldr	r5, [pc, #20]	; (8002c4c <_sbrk_r+0x1c>)
 8002c36:	4604      	mov	r4, r0
 8002c38:	4608      	mov	r0, r1
 8002c3a:	602b      	str	r3, [r5, #0]
 8002c3c:	f7fe f84e 	bl	8000cdc <_sbrk>
 8002c40:	1c43      	adds	r3, r0, #1
 8002c42:	d102      	bne.n	8002c4a <_sbrk_r+0x1a>
 8002c44:	682b      	ldr	r3, [r5, #0]
 8002c46:	b103      	cbz	r3, 8002c4a <_sbrk_r+0x1a>
 8002c48:	6023      	str	r3, [r4, #0]
 8002c4a:	bd38      	pop	{r3, r4, r5, pc}
 8002c4c:	20000170 	.word	0x20000170

08002c50 <__malloc_lock>:
 8002c50:	4801      	ldr	r0, [pc, #4]	; (8002c58 <__malloc_lock+0x8>)
 8002c52:	f000 b809 	b.w	8002c68 <__retarget_lock_acquire_recursive>
 8002c56:	bf00      	nop
 8002c58:	20000178 	.word	0x20000178

08002c5c <__malloc_unlock>:
 8002c5c:	4801      	ldr	r0, [pc, #4]	; (8002c64 <__malloc_unlock+0x8>)
 8002c5e:	f000 b804 	b.w	8002c6a <__retarget_lock_release_recursive>
 8002c62:	bf00      	nop
 8002c64:	20000178 	.word	0x20000178

08002c68 <__retarget_lock_acquire_recursive>:
 8002c68:	4770      	bx	lr

08002c6a <__retarget_lock_release_recursive>:
 8002c6a:	4770      	bx	lr

08002c6c <_init>:
 8002c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6e:	bf00      	nop
 8002c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c72:	bc08      	pop	{r3}
 8002c74:	469e      	mov	lr, r3
 8002c76:	4770      	bx	lr

08002c78 <_fini>:
 8002c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7a:	bf00      	nop
 8002c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c7e:	bc08      	pop	{r3}
 8002c80:	469e      	mov	lr, r3
 8002c82:	4770      	bx	lr
