
chapter3OOP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002d88  08002d88  00012d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dd8  08002dd8  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08002dd8  08002dd8  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dd8  08002dd8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dd8  08002dd8  00012dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ddc  08002ddc  00012ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08002de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000094  08002e74  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08002e74  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebaa  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002578  00000000  00000000  0002ec67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  000311e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  00031d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b72  00000000  00000000  00032798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3c0  00000000  00000000  0004b30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087bdd  00000000  00000000  000586ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e02a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f78  00000000  00000000  000e02fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d70 	.word	0x08002d70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08002d70 	.word	0x08002d70

0800014c <init_fsm_input_processing>:
} ButtonState;
ButtonState* buttonState;

static uint8_t* flagPressed;

void init_fsm_input_processing(const uint16_t* port, unsigned int no_buttons) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	init_button_reading(port, no_buttons);
 8000156:	6839      	ldr	r1, [r7, #0]
 8000158:	6878      	ldr	r0, [r7, #4]
 800015a:	f000 f8a1 	bl	80002a0 <init_button_reading>

	buttonState = (ButtonState*)malloc(NO_OF_BUTTONS*sizeof(ButtonState));
 800015e:	4b17      	ldr	r3, [pc, #92]	; (80001bc <init_fsm_input_processing+0x70>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	4618      	mov	r0, r3
 8000164:	f002 fd7c 	bl	8002c60 <malloc>
 8000168:	4603      	mov	r3, r0
 800016a:	461a      	mov	r2, r3
 800016c:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <init_fsm_input_processing+0x74>)
 800016e:	601a      	str	r2, [r3, #0]
	flagPressed = (uint8_t*)malloc(NO_OF_BUTTONS*sizeof(uint8_t));
 8000170:	4b12      	ldr	r3, [pc, #72]	; (80001bc <init_fsm_input_processing+0x70>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	4618      	mov	r0, r3
 8000176:	f002 fd73 	bl	8002c60 <malloc>
 800017a:	4603      	mov	r3, r0
 800017c:	461a      	mov	r2, r3
 800017e:	4b11      	ldr	r3, [pc, #68]	; (80001c4 <init_fsm_input_processing+0x78>)
 8000180:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 8000182:	2300      	movs	r3, #0
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	e00e      	b.n	80001a6 <init_fsm_input_processing+0x5a>
		 buttonState[i] = STATE_RELEASED;
 8000188:	4b0d      	ldr	r3, [pc, #52]	; (80001c0 <init_fsm_input_processing+0x74>)
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	4413      	add	r3, r2
 8000190:	2200      	movs	r2, #0
 8000192:	701a      	strb	r2, [r3, #0]
		 flagPressed[i] = 0;
 8000194:	4b0b      	ldr	r3, [pc, #44]	; (80001c4 <init_fsm_input_processing+0x78>)
 8000196:	681a      	ldr	r2, [r3, #0]
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	4413      	add	r3, r2
 800019c:	2200      	movs	r2, #0
 800019e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	3301      	adds	r3, #1
 80001a4:	60fb      	str	r3, [r7, #12]
 80001a6:	68fa      	ldr	r2, [r7, #12]
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <init_fsm_input_processing+0x70>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	429a      	cmp	r2, r3
 80001ae:	d3eb      	bcc.n	8000188 <init_fsm_input_processing+0x3c>
	}
}
 80001b0:	bf00      	nop
 80001b2:	bf00      	nop
 80001b4:	3710      	adds	r7, #16
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	2000011c 	.word	0x2000011c
 80001c0:	20000118 	.word	0x20000118
 80001c4:	200000b0 	.word	0x200000b0

080001c8 <fsm_for_input_processing>:
void fsm_for_input_processing(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e033      	b.n	800023c <fsm_for_input_processing+0x74>
		switch(buttonState[i]) {
 80001d4:	4b1e      	ldr	r3, [pc, #120]	; (8000250 <fsm_for_input_processing+0x88>)
 80001d6:	681a      	ldr	r2, [r3, #0]
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4413      	add	r3, r2
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d002      	beq.n	80001e8 <fsm_for_input_processing+0x20>
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	d00f      	beq.n	8000206 <fsm_for_input_processing+0x3e>
 80001e6:	e026      	b.n	8000236 <fsm_for_input_processing+0x6e>
		case STATE_RELEASED:
			if(is_button_pressed(i)) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 f8f7 	bl	80003e0 <is_button_pressed>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d01b      	beq.n	8000230 <fsm_for_input_processing+0x68>
				buttonState[i] = STATE_PRESSED;
 80001f8:	4b15      	ldr	r3, [pc, #84]	; (8000250 <fsm_for_input_processing+0x88>)
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4413      	add	r3, r2
 8000200:	2201      	movs	r2, #1
 8000202:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000204:	e014      	b.n	8000230 <fsm_for_input_processing+0x68>
		case STATE_PRESSED:
			if(!is_button_pressed(i)) {
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	b2db      	uxtb	r3, r3
 800020a:	4618      	mov	r0, r3
 800020c:	f000 f8e8 	bl	80003e0 <is_button_pressed>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d10e      	bne.n	8000234 <fsm_for_input_processing+0x6c>
				buttonState[i] = STATE_RELEASED;
 8000216:	4b0e      	ldr	r3, [pc, #56]	; (8000250 <fsm_for_input_processing+0x88>)
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4413      	add	r3, r2
 800021e:	2200      	movs	r2, #0
 8000220:	701a      	strb	r2, [r3, #0]
				flagPressed[i] = 1;
 8000222:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <fsm_for_input_processing+0x8c>)
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4413      	add	r3, r2
 800022a:	2201      	movs	r2, #1
 800022c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800022e:	e001      	b.n	8000234 <fsm_for_input_processing+0x6c>
			break;
 8000230:	bf00      	nop
 8000232:	e000      	b.n	8000236 <fsm_for_input_processing+0x6e>
			break;
 8000234:	bf00      	nop
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	3301      	adds	r3, #1
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	4b06      	ldr	r3, [pc, #24]	; (8000258 <fsm_for_input_processing+0x90>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	429a      	cmp	r2, r3
 8000244:	d3c6      	bcc.n	80001d4 <fsm_for_input_processing+0xc>
		}
	}
}
 8000246:	bf00      	nop
 8000248:	bf00      	nop
 800024a:	3708      	adds	r7, #8
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000118 	.word	0x20000118
 8000254:	200000b0 	.word	0x200000b0
 8000258:	2000011c 	.word	0x2000011c

0800025c <getPressFlag>:

uint8_t getPressFlag(unsigned int index) {
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
	return flagPressed[index];
 8000264:	4b04      	ldr	r3, [pc, #16]	; (8000278 <getPressFlag+0x1c>)
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4413      	add	r3, r2
 800026c:	781b      	ldrb	r3, [r3, #0]
}
 800026e:	4618      	mov	r0, r3
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	200000b0 	.word	0x200000b0

0800027c <resetPressFlag>:
void resetPressFlag(unsigned int index) {
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	flagPressed[index] = 0;
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <resetPressFlag+0x20>)
 8000286:	681a      	ldr	r2, [r3, #0]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4413      	add	r3, r2
 800028c:	2200      	movs	r2, #0
 800028e:	701a      	strb	r2, [r3, #0]
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	200000b0 	.word	0x200000b0

080002a0 <init_button_reading>:
static GPIO_PinState* buttonBuffer;
// we define two buffers for debouncing
static GPIO_PinState* debounceButtonBuffer1;
static GPIO_PinState* debounceButtonBuffer2;

void init_button_reading(const uint16_t* port, unsigned int no_buttons) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	NO_OF_BUTTONS = no_buttons;
 80002aa:	4a21      	ldr	r2, [pc, #132]	; (8000330 <init_button_reading+0x90>)
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	6013      	str	r3, [r2, #0]

	buttonPort = port; // take array from user
 80002b0:	4a20      	ldr	r2, [pc, #128]	; (8000334 <init_button_reading+0x94>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	6013      	str	r3, [r2, #0]

	buttonBuffer = (GPIO_PinState*)malloc(NO_OF_BUTTONS*sizeof(GPIO_PinState));
 80002b6:	4b1e      	ldr	r3, [pc, #120]	; (8000330 <init_button_reading+0x90>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 fcd0 	bl	8002c60 <malloc>
 80002c0:	4603      	mov	r3, r0
 80002c2:	461a      	mov	r2, r3
 80002c4:	4b1c      	ldr	r3, [pc, #112]	; (8000338 <init_button_reading+0x98>)
 80002c6:	601a      	str	r2, [r3, #0]
	debounceButtonBuffer1 = (GPIO_PinState*)malloc(NO_OF_BUTTONS*sizeof(GPIO_PinState));
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <init_button_reading+0x90>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f002 fcc7 	bl	8002c60 <malloc>
 80002d2:	4603      	mov	r3, r0
 80002d4:	461a      	mov	r2, r3
 80002d6:	4b19      	ldr	r3, [pc, #100]	; (800033c <init_button_reading+0x9c>)
 80002d8:	601a      	str	r2, [r3, #0]
	debounceButtonBuffer2 = (GPIO_PinState*)malloc(NO_OF_BUTTONS*sizeof(GPIO_PinState));
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <init_button_reading+0x90>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fcbe 	bl	8002c60 <malloc>
 80002e4:	4603      	mov	r3, r0
 80002e6:	461a      	mov	r2, r3
 80002e8:	4b15      	ldr	r3, [pc, #84]	; (8000340 <init_button_reading+0xa0>)
 80002ea:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
 80002f0:	e014      	b.n	800031c <init_button_reading+0x7c>
		buttonBuffer[i] = BUTTON_RELEASED;
 80002f2:	4b11      	ldr	r3, [pc, #68]	; (8000338 <init_button_reading+0x98>)
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	4413      	add	r3, r2
 80002fa:	2201      	movs	r2, #1
 80002fc:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = BUTTON_RELEASED;
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <init_button_reading+0x9c>)
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	4413      	add	r3, r2
 8000306:	2201      	movs	r2, #1
 8000308:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = BUTTON_RELEASED;
 800030a:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <init_button_reading+0xa0>)
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	4413      	add	r3, r2
 8000312:	2201      	movs	r2, #1
 8000314:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	3301      	adds	r3, #1
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	68fa      	ldr	r2, [r7, #12]
 800031e:	4b04      	ldr	r3, [pc, #16]	; (8000330 <init_button_reading+0x90>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	429a      	cmp	r2, r3
 8000324:	d3e5      	bcc.n	80002f2 <init_button_reading+0x52>
	}
}
 8000326:	bf00      	nop
 8000328:	bf00      	nop
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	2000011c 	.word	0x2000011c
 8000334:	20000120 	.word	0x20000120
 8000338:	200000b4 	.word	0x200000b4
 800033c:	200000b8 	.word	0x200000b8
 8000340:	200000bc 	.word	0x200000bc

08000344 <button_reading>:

void button_reading(void) {
 8000344:	b590      	push	{r4, r7, lr}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 800034a:	2300      	movs	r3, #0
 800034c:	71fb      	strb	r3, [r7, #7]
 800034e:	e031      	b.n	80003b4 <button_reading+0x70>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000350:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <button_reading+0x84>)
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	441a      	add	r2, r3
 8000358:	4b1c      	ldr	r3, [pc, #112]	; (80003cc <button_reading+0x88>)
 800035a:	6819      	ldr	r1, [r3, #0]
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	440b      	add	r3, r1
 8000360:	7812      	ldrb	r2, [r2, #0]
 8000362:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_PORT, buttonPort[i]);
 8000364:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <button_reading+0x8c>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	4413      	add	r3, r2
 800036e:	8819      	ldrh	r1, [r3, #0]
 8000370:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <button_reading+0x84>)
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	18d4      	adds	r4, r2, r3
 8000378:	4816      	ldr	r0, [pc, #88]	; (80003d4 <button_reading+0x90>)
 800037a:	f001 fc1f 	bl	8001bbc <HAL_GPIO_ReadPin>
 800037e:	4603      	mov	r3, r0
 8000380:	7023      	strb	r3, [r4, #0]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 8000382:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <button_reading+0x84>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	4413      	add	r3, r2
 800038a:	781a      	ldrb	r2, [r3, #0]
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <button_reading+0x88>)
 800038e:	6819      	ldr	r1, [r3, #0]
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	440b      	add	r3, r1
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	429a      	cmp	r2, r3
 8000398:	d109      	bne.n	80003ae <button_reading+0x6a>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <button_reading+0x84>)
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	441a      	add	r2, r3
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <button_reading+0x94>)
 80003a4:	6819      	ldr	r1, [r3, #0]
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	440b      	add	r3, r1
 80003aa:	7812      	ldrb	r2, [r2, #0]
 80003ac:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	3301      	adds	r3, #1
 80003b2:	71fb      	strb	r3, [r7, #7]
 80003b4:	79fa      	ldrb	r2, [r7, #7]
 80003b6:	4b09      	ldr	r3, [pc, #36]	; (80003dc <button_reading+0x98>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d3c8      	bcc.n	8000350 <button_reading+0xc>
		}
	}
}
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd90      	pop	{r4, r7, pc}
 80003c8:	200000b8 	.word	0x200000b8
 80003cc:	200000bc 	.word	0x200000bc
 80003d0:	20000120 	.word	0x20000120
 80003d4:	40010800 	.word	0x40010800
 80003d8:	200000b4 	.word	0x200000b4
 80003dc:	2000011c 	.word	0x2000011c

080003e0 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index) {
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 80003ea:	79fa      	ldrb	r2, [r7, #7]
 80003ec:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <is_button_pressed+0x38>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d301      	bcc.n	80003f8 <is_button_pressed+0x18>
 80003f4:	2300      	movs	r3, #0
 80003f6:	e009      	b.n	800040c <is_button_pressed+0x2c>
	return (buttonBuffer[index] == BUTTON_PRESSED);
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <is_button_pressed+0x3c>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	4413      	add	r3, r2
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	bf0c      	ite	eq
 8000406:	2301      	moveq	r3, #1
 8000408:	2300      	movne	r3, #0
 800040a:	b2db      	uxtb	r3, r3
}
 800040c:	4618      	mov	r0, r3
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	2000011c 	.word	0x2000011c
 800041c:	200000b4 	.word	0x200000b4

08000420 <init_led7>:
static const uint16_t* seg7En;

static uint8_t* seg7Val;
static uint16_t allseg;

void init_led7(const uint16_t* en, const uint16_t* port, uint8_t* buffer, unsigned int no_led7) {
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	60b9      	str	r1, [r7, #8]
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	603b      	str	r3, [r7, #0]
	NO_OF_LED7 = no_led7;
 800042e:	4a1d      	ldr	r2, [pc, #116]	; (80004a4 <init_led7+0x84>)
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	6013      	str	r3, [r2, #0]

	seg7En = en;
 8000434:	4a1c      	ldr	r2, [pc, #112]	; (80004a8 <init_led7+0x88>)
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	6013      	str	r3, [r2, #0]
	seg7Port = port;
 800043a:	4a1c      	ldr	r2, [pc, #112]	; (80004ac <init_led7+0x8c>)
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	6013      	str	r3, [r2, #0]
	seg7Val = buffer;
 8000440:	4a1b      	ldr	r2, [pc, #108]	; (80004b0 <init_led7+0x90>)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	6013      	str	r3, [r2, #0]
	allseg = seg7Port[0] | seg7Port[1] | seg7Port[2] | seg7Port[3] | seg7Port[4] | seg7Port[5] | seg7Port[6];
 8000446:	4b19      	ldr	r3, [pc, #100]	; (80004ac <init_led7+0x8c>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	881a      	ldrh	r2, [r3, #0]
 800044c:	4b17      	ldr	r3, [pc, #92]	; (80004ac <init_led7+0x8c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	3302      	adds	r3, #2
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	4313      	orrs	r3, r2
 8000456:	b29a      	uxth	r2, r3
 8000458:	4b14      	ldr	r3, [pc, #80]	; (80004ac <init_led7+0x8c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	3304      	adds	r3, #4
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <init_led7+0x8c>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	3306      	adds	r3, #6
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	4313      	orrs	r3, r2
 800046e:	b29a      	uxth	r2, r3
 8000470:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <init_led7+0x8c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	3308      	adds	r3, #8
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
 800047c:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <init_led7+0x8c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	330a      	adds	r3, #10
 8000482:	881b      	ldrh	r3, [r3, #0]
 8000484:	4313      	orrs	r3, r2
 8000486:	b29a      	uxth	r2, r3
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <init_led7+0x8c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	330c      	adds	r3, #12
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <init_led7+0x94>)
 8000496:	801a      	strh	r2, [r3, #0]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	200000c0 	.word	0x200000c0
 80004a8:	200000c8 	.word	0x200000c8
 80004ac:	200000c4 	.word	0x200000c4
 80004b0:	200000cc 	.word	0x200000cc
 80004b4:	200000d0 	.word	0x200000d0

080004b8 <display_7SEG>:

void display_7SEG(unsigned int index) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SEG_PORT, allseg, RESET_SEG);
 80004c0:	4b2b      	ldr	r3, [pc, #172]	; (8000570 <display_7SEG+0xb8>)
 80004c2:	881b      	ldrh	r3, [r3, #0]
 80004c4:	2201      	movs	r2, #1
 80004c6:	4619      	mov	r1, r3
 80004c8:	482a      	ldr	r0, [pc, #168]	; (8000574 <display_7SEG+0xbc>)
 80004ca:	f001 fb8e 	bl	8001bea <HAL_GPIO_WritePin>

	uint8_t hexcode = seg7Hex[seg7Val[index]];
 80004ce:	4b2a      	ldr	r3, [pc, #168]	; (8000578 <display_7SEG+0xc0>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4413      	add	r3, r2
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	461a      	mov	r2, r3
 80004da:	4b28      	ldr	r3, [pc, #160]	; (800057c <display_7SEG+0xc4>)
 80004dc:	5c9b      	ldrb	r3, [r3, r2]
 80004de:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < 7; i++) {
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	e015      	b.n	8000512 <display_7SEG+0x5a>
		if((hexcode & (0x40 >> i)) == 0)
 80004e6:	7bfa      	ldrb	r2, [r7, #15]
 80004e8:	2140      	movs	r1, #64	; 0x40
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	fa41 f303 	asr.w	r3, r1, r3
 80004f0:	4013      	ands	r3, r2
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d10a      	bne.n	800050c <display_7SEG+0x54>
			HAL_GPIO_WritePin(SEG_PORT, seg7Port[i], SET_SEG);
 80004f6:	4b22      	ldr	r3, [pc, #136]	; (8000580 <display_7SEG+0xc8>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	4413      	add	r3, r2
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	2200      	movs	r2, #0
 8000504:	4619      	mov	r1, r3
 8000506:	481b      	ldr	r0, [pc, #108]	; (8000574 <display_7SEG+0xbc>)
 8000508:	f001 fb6f 	bl	8001bea <HAL_GPIO_WritePin>
	for(int i = 0; i < 7; i++) {
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	3301      	adds	r3, #1
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	2b06      	cmp	r3, #6
 8000516:	dde6      	ble.n	80004e6 <display_7SEG+0x2e>
	}

	for(int i = 0;  i < NO_OF_LED7; i++) {
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	e01d      	b.n	800055a <display_7SEG+0xa2>
		if(i == index)
 800051e:	693b      	ldr	r3, [r7, #16]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	429a      	cmp	r2, r3
 8000524:	d10b      	bne.n	800053e <display_7SEG+0x86>
			HAL_GPIO_WritePin(SEG_PORT, seg7En[i], ENABLE_LED);
 8000526:	4b17      	ldr	r3, [pc, #92]	; (8000584 <display_7SEG+0xcc>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	4413      	add	r3, r2
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	2200      	movs	r2, #0
 8000534:	4619      	mov	r1, r3
 8000536:	480f      	ldr	r0, [pc, #60]	; (8000574 <display_7SEG+0xbc>)
 8000538:	f001 fb57 	bl	8001bea <HAL_GPIO_WritePin>
 800053c:	e00a      	b.n	8000554 <display_7SEG+0x9c>
		else
			HAL_GPIO_WritePin(SEG_PORT, seg7En[i], DISABLE_LED);
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <display_7SEG+0xcc>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	4413      	add	r3, r2
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	2201      	movs	r2, #1
 800054c:	4619      	mov	r1, r3
 800054e:	4809      	ldr	r0, [pc, #36]	; (8000574 <display_7SEG+0xbc>)
 8000550:	f001 fb4b 	bl	8001bea <HAL_GPIO_WritePin>
	for(int i = 0;  i < NO_OF_LED7; i++) {
 8000554:	693b      	ldr	r3, [r7, #16]
 8000556:	3301      	adds	r3, #1
 8000558:	613b      	str	r3, [r7, #16]
 800055a:	693a      	ldr	r2, [r7, #16]
 800055c:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <display_7SEG+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	429a      	cmp	r2, r3
 8000562:	d3dc      	bcc.n	800051e <display_7SEG+0x66>
	}
}
 8000564:	bf00      	nop
 8000566:	bf00      	nop
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	200000d0 	.word	0x200000d0
 8000574:	40010c00 	.word	0x40010c00
 8000578:	200000cc 	.word	0x200000cc
 800057c:	20000000 	.word	0x20000000
 8000580:	200000c4 	.word	0x200000c4
 8000584:	200000c8 	.word	0x200000c8
 8000588:	200000c0 	.word	0x200000c0

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b598      	push	{r3, r4, r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f001 f82a 	bl	80015e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f900 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f986 	bl	80008a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800059c:	f000 f938 	bl	8000810 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005a0:	4873      	ldr	r0, [pc, #460]	; (8000770 <main+0x1e4>)
 80005a2:	f001 ff8b 	bl	80024bc <HAL_TIM_Base_Start_IT>

  init_timer(&htim2, NO_OF_SEC_TIMERS, NO_OF_MIL_TIMERS);
 80005a6:	2302      	movs	r3, #2
 80005a8:	2202      	movs	r2, #2
 80005aa:	4619      	mov	r1, r3
 80005ac:	4870      	ldr	r0, [pc, #448]	; (8000770 <main+0x1e4>)
 80005ae:	f000 fc53 	bl	8000e58 <init_timer>
  init_led7(seg7_en, seg7_port, buffer_led7, NO_OF_LED7);
 80005b2:	2304      	movs	r3, #4
 80005b4:	4a6f      	ldr	r2, [pc, #444]	; (8000774 <main+0x1e8>)
 80005b6:	4970      	ldr	r1, [pc, #448]	; (8000778 <main+0x1ec>)
 80005b8:	4870      	ldr	r0, [pc, #448]	; (800077c <main+0x1f0>)
 80005ba:	f7ff ff31 	bl	8000420 <init_led7>
  init_fsm_input_processing(button_port, NO_OF_BUTTONS);
 80005be:	2104      	movs	r1, #4
 80005c0:	486f      	ldr	r0, [pc, #444]	; (8000780 <main+0x1f4>)
 80005c2:	f7ff fdc3 	bl	800014c <init_fsm_input_processing>
  init_traffic(traffic_port, traffic_time);
 80005c6:	496f      	ldr	r1, [pc, #444]	; (8000784 <main+0x1f8>)
 80005c8:	486f      	ldr	r0, [pc, #444]	; (8000788 <main+0x1fc>)
 80005ca:	f000 fe65 	bl	8001298 <init_traffic>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(trafficMode) {
 80005ce:	4b6f      	ldr	r3, [pc, #444]	; (800078c <main+0x200>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d007      	beq.n	80005e6 <main+0x5a>
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	f2c0 80ac 	blt.w	8000734 <main+0x1a8>
 80005dc:	3b01      	subs	r3, #1
 80005de:	2b02      	cmp	r3, #2
 80005e0:	f200 80a8 	bhi.w	8000734 <main+0x1a8>
 80005e4:	e027      	b.n	8000636 <main+0xaa>
	  case NORMAL:
		  if(getPressFlag(BUTTON_MODE)) {
 80005e6:	2000      	movs	r0, #0
 80005e8:	f7ff fe38 	bl	800025c <getPressFlag>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d010      	beq.n	8000614 <main+0x88>
			  resetPressFlag(BUTTON_MODE);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f7ff fe42 	bl	800027c <resetPressFlag>
			  trafficMode = CHANGE_RED;
 80005f8:	4b64      	ldr	r3, [pc, #400]	; (800078c <main+0x200>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
			  clearTraffic();
 80005fe:	f000 ff9d 	bl	800153c <clearTraffic>

			  controlSecTimer(TRAFFIC_VER_TIMER, STOP_TIMER);
 8000602:	2101      	movs	r1, #1
 8000604:	2000      	movs	r0, #0
 8000606:	f000 fdb1 	bl	800116c <controlSecTimer>
			  controlSecTimer(TRAFFIC_HOR_TIMER, STOP_TIMER);
 800060a:	2101      	movs	r1, #1
 800060c:	2001      	movs	r0, #1
 800060e:	f000 fdad 	bl	800116c <controlSecTimer>
			  break;
 8000612:	e08f      	b.n	8000734 <main+0x1a8>
		  }
		  traffic_display();
 8000614:	f000 fe8c 	bl	8001330 <traffic_display>
		  setBufferLed7(getSecCounter(TRAFFIC_VER_TIMER), getSecCounter(TRAFFIC_HOR_TIMER));
 8000618:	2000      	movs	r0, #0
 800061a:	f000 fd7f 	bl	800111c <getSecCounter>
 800061e:	4603      	mov	r3, r0
 8000620:	b2dc      	uxtb	r4, r3
 8000622:	2001      	movs	r0, #1
 8000624:	f000 fd7a 	bl	800111c <getSecCounter>
 8000628:	4603      	mov	r3, r0
 800062a:	b2db      	uxtb	r3, r3
 800062c:	4619      	mov	r1, r3
 800062e:	4620      	mov	r0, r4
 8000630:	f000 f9c0 	bl	80009b4 <setBufferLed7>
		  break;
 8000634:	e07e      	b.n	8000734 <main+0x1a8>
	  case CHANGE_RED:
	  case CHANGE_YELLOW:
	  case CHANGE_GREEN:
		  if(getPressFlag(BUTTON_MODE)) {
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff fe10 	bl	800025c <getPressFlag>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d026      	beq.n	8000690 <main+0x104>
			  resetPressFlag(BUTTON_MODE);
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff fe1a 	bl	800027c <resetPressFlag>
			  trafficMode = (trafficMode == CHANGE_GREEN)? NORMAL : trafficMode+1;
 8000648:	4b50      	ldr	r3, [pc, #320]	; (800078c <main+0x200>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b03      	cmp	r3, #3
 800064e:	d004      	beq.n	800065a <main+0xce>
 8000650:	4b4e      	ldr	r3, [pc, #312]	; (800078c <main+0x200>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	3301      	adds	r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	e000      	b.n	800065c <main+0xd0>
 800065a:	2300      	movs	r3, #0
 800065c:	4a4b      	ldr	r2, [pc, #300]	; (800078c <main+0x200>)
 800065e:	7013      	strb	r3, [r2, #0]
			  clearTraffic();
 8000660:	f000 ff6c 	bl	800153c <clearTraffic>

			  if(updateFlag == 0) {
 8000664:	4b4a      	ldr	r3, [pc, #296]	; (8000790 <main+0x204>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d104      	bne.n	8000676 <main+0xea>
				  copyArray(traffic_time, traffic_time_update, 6); // update buffer -> current buffer
 800066c:	2206      	movs	r2, #6
 800066e:	4949      	ldr	r1, [pc, #292]	; (8000794 <main+0x208>)
 8000670:	4844      	ldr	r0, [pc, #272]	; (8000784 <main+0x1f8>)
 8000672:	f000 faef 	bl	8000c54 <copyArray>
			  }

			  if(trafficMode == CHANGE_GREEN) {
 8000676:	4b45      	ldr	r3, [pc, #276]	; (800078c <main+0x200>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b03      	cmp	r3, #3
 800067c:	d159      	bne.n	8000732 <main+0x1a6>
				  controlSecTimer(TRAFFIC_VER_TIMER, START_TIMER);
 800067e:	2100      	movs	r1, #0
 8000680:	2000      	movs	r0, #0
 8000682:	f000 fd73 	bl	800116c <controlSecTimer>
				  controlSecTimer(TRAFFIC_HOR_TIMER, START_TIMER);
 8000686:	2100      	movs	r1, #0
 8000688:	2001      	movs	r0, #1
 800068a:	f000 fd6f 	bl	800116c <controlSecTimer>
			  }
			  break;
 800068e:	e050      	b.n	8000732 <main+0x1a6>
		  }
		  if(getPressFlag(BUTTON_INCREASE)) {
 8000690:	2001      	movs	r0, #1
 8000692:	f7ff fde3 	bl	800025c <getPressFlag>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d008      	beq.n	80006ae <main+0x122>
			  resetPressFlag(BUTTON_INCREASE) ;
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff fded 	bl	800027c <resetPressFlag>
			  increase(trafficMode, traffic_time_update);
 80006a2:	4b3a      	ldr	r3, [pc, #232]	; (800078c <main+0x200>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	493b      	ldr	r1, [pc, #236]	; (8000794 <main+0x208>)
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 f9ed 	bl	8000a88 <increase>
		  }
		  if(getPressFlag(BUTTON_DECREASE)) {
 80006ae:	2002      	movs	r0, #2
 80006b0:	f7ff fdd4 	bl	800025c <getPressFlag>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d008      	beq.n	80006cc <main+0x140>
			  resetPressFlag(BUTTON_DECREASE) ;
 80006ba:	2002      	movs	r0, #2
 80006bc:	f7ff fdde 	bl	800027c <resetPressFlag>
			  decrease(trafficMode, traffic_time_update);
 80006c0:	4b32      	ldr	r3, [pc, #200]	; (800078c <main+0x200>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4933      	ldr	r1, [pc, #204]	; (8000794 <main+0x208>)
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fa51 	bl	8000b6e <decrease>
		  }
		  if(getPressFlag(BUTTON_SET)) {
 80006cc:	2003      	movs	r0, #3
 80006ce:	f7ff fdc5 	bl	800025c <getPressFlag>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d005      	beq.n	80006e4 <main+0x158>
			  resetPressFlag(BUTTON_SET);
 80006d8:	2003      	movs	r0, #3
 80006da:	f7ff fdcf 	bl	800027c <resetPressFlag>
			  updateFlag = 1;
 80006de:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <main+0x204>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
		  }
		  if(trafficMode == CHANGE_RED) setBufferLed7(traffic_time_update[VER_RED], trafficMode);
 80006e4:	4b29      	ldr	r3, [pc, #164]	; (800078c <main+0x200>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d108      	bne.n	80006fe <main+0x172>
 80006ec:	4b29      	ldr	r3, [pc, #164]	; (8000794 <main+0x208>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4a26      	ldr	r2, [pc, #152]	; (800078c <main+0x200>)
 80006f2:	7812      	ldrb	r2, [r2, #0]
 80006f4:	4611      	mov	r1, r2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f95c 	bl	80009b4 <setBufferLed7>
 80006fc:	e01a      	b.n	8000734 <main+0x1a8>
		  else if(trafficMode == CHANGE_YELLOW) setBufferLed7(traffic_time_update[VER_YELLOW], trafficMode);
 80006fe:	4b23      	ldr	r3, [pc, #140]	; (800078c <main+0x200>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b02      	cmp	r3, #2
 8000704:	d108      	bne.n	8000718 <main+0x18c>
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <main+0x208>)
 8000708:	789b      	ldrb	r3, [r3, #2]
 800070a:	4a20      	ldr	r2, [pc, #128]	; (800078c <main+0x200>)
 800070c:	7812      	ldrb	r2, [r2, #0]
 800070e:	4611      	mov	r1, r2
 8000710:	4618      	mov	r0, r3
 8000712:	f000 f94f 	bl	80009b4 <setBufferLed7>
 8000716:	e00d      	b.n	8000734 <main+0x1a8>
		  else if(trafficMode == CHANGE_GREEN) setBufferLed7(traffic_time_update[VER_GREEN], trafficMode);
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <main+0x200>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b03      	cmp	r3, #3
 800071e:	d109      	bne.n	8000734 <main+0x1a8>
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <main+0x208>)
 8000722:	785b      	ldrb	r3, [r3, #1]
 8000724:	4a19      	ldr	r2, [pc, #100]	; (800078c <main+0x200>)
 8000726:	7812      	ldrb	r2, [r2, #0]
 8000728:	4611      	mov	r1, r2
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f942 	bl	80009b4 <setBufferLed7>
 8000730:	e000      	b.n	8000734 <main+0x1a8>
			  break;
 8000732:	bf00      	nop
	  }

	  fsm_for_input_processing();
 8000734:	f7ff fd48 	bl	80001c8 <fsm_for_input_processing>
	  scanLed7();
 8000738:	f000 f91a 	bl	8000970 <scanLed7>
	  blinkTraffic(trafficMode);
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <main+0x200>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	f000 f973 	bl	8000a2c <blinkTraffic>
	  if(isPeriodDone()) {
 8000746:	f000 ff13 	bl	8001570 <isPeriodDone>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	f43f af3e 	beq.w	80005ce <main+0x42>
		  if(updateFlag) {
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <main+0x204>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d007      	beq.n	800076a <main+0x1de>
			  updateFlag = 0;
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <main+0x204>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
			  copyArray(traffic_time_update, traffic_time, 6);
 8000760:	2206      	movs	r2, #6
 8000762:	4908      	ldr	r1, [pc, #32]	; (8000784 <main+0x1f8>)
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <main+0x208>)
 8000766:	f000 fa75 	bl	8000c54 <copyArray>
		  }
		  startNewPeriod();
 800076a:	f000 ff0b 	bl	8001584 <startNewPeriod>
	  switch(trafficMode) {
 800076e:	e72e      	b.n	80005ce <main+0x42>
 8000770:	20000124 	.word	0x20000124
 8000774:	2000000c 	.word	0x2000000c
 8000778:	08002d98 	.word	0x08002d98
 800077c:	08002da8 	.word	0x08002da8
 8000780:	08002db0 	.word	0x08002db0
 8000784:	20000010 	.word	0x20000010
 8000788:	08002db8 	.word	0x08002db8
 800078c:	200000d2 	.word	0x200000d2
 8000790:	200000d3 	.word	0x200000d3
 8000794:	20000018 	.word	0x20000018

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b090      	sub	sp, #64	; 0x40
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0318 	add.w	r3, r7, #24
 80007a2:	2228      	movs	r2, #40	; 0x28
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fa62 	bl	8002c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007be:	2301      	movs	r3, #1
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c2:	2310      	movs	r3, #16
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fa3c 	bl	8001c4c <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007da:	f000 fa59 	bl	8000c90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	230f      	movs	r3, #15
 80007e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 fca8 	bl	800214c <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000802:	f000 fa45 	bl	8000c90 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3740      	adds	r7, #64	; 0x40
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000824:	463b      	mov	r3, r7
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <MX_TIM2_Init+0x94>)
 800082e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000832:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <MX_TIM2_Init+0x94>)
 8000836:	f240 321f 	movw	r2, #799	; 0x31f
 800083a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_TIM2_Init+0x94>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <MX_TIM2_Init+0x94>)
 8000844:	2263      	movs	r2, #99	; 0x63
 8000846:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_TIM2_Init+0x94>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_TIM2_Init+0x94>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000854:	4813      	ldr	r0, [pc, #76]	; (80008a4 <MX_TIM2_Init+0x94>)
 8000856:	f001 fde1 	bl	800241c <HAL_TIM_Base_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000860:	f000 fa16 	bl	8000c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000868:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	4619      	mov	r1, r3
 8000870:	480c      	ldr	r0, [pc, #48]	; (80008a4 <MX_TIM2_Init+0x94>)
 8000872:	f001 ff77 	bl	8002764 <HAL_TIM_ConfigClockSource>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800087c:	f000 fa08 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_TIM2_Init+0x94>)
 800088e:	f002 f93f 	bl	8002b10 <HAL_TIMEx_MasterConfigSynchronization>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000898:	f000 f9fa 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000124 	.word	0x20000124

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b29      	ldr	r3, [pc, #164]	; (8000964 <MX_GPIO_Init+0xbc>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a28      	ldr	r2, [pc, #160]	; (8000964 <MX_GPIO_Init+0xbc>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b26      	ldr	r3, [pc, #152]	; (8000964 <MX_GPIO_Init+0xbc>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d4:	4b23      	ldr	r3, [pc, #140]	; (8000964 <MX_GPIO_Init+0xbc>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a22      	ldr	r2, [pc, #136]	; (8000964 <MX_GPIO_Init+0xbc>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b20      	ldr	r3, [pc, #128]	; (8000964 <MX_GPIO_Init+0xbc>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0308 	and.w	r3, r3, #8
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80008f2:	481d      	ldr	r0, [pc, #116]	; (8000968 <MX_GPIO_Init+0xc0>)
 80008f4:	f001 f979 	bl	8001bea <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80008f8:	2200      	movs	r2, #0
 80008fa:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80008fe:	481b      	ldr	r0, [pc, #108]	; (800096c <MX_GPIO_Init+0xc4>)
 8000900:	f001 f973 	bl	8001bea <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : DEBUG_Pin PA4 PA5 PA6
                           PA7 PA8 PA9 */
  GPIO_InitStruct.Pin = DEBUG_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000904:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000908:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2302      	movs	r3, #2
 8000914:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	4619      	mov	r1, r3
 800091c:	4812      	ldr	r0, [pc, #72]	; (8000968 <MX_GPIO_Init+0xc0>)
 800091e:	f000 ffd3 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000922:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000926:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2302      	movs	r3, #2
 8000932:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	4619      	mov	r1, r3
 800093a:	480c      	ldr	r0, [pc, #48]	; (800096c <MX_GPIO_Init+0xc4>)
 800093c:	f000 ffc4 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000940:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000944:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	4619      	mov	r1, r3
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_GPIO_Init+0xc0>)
 8000956:	f000 ffb7 	bl	80018c8 <HAL_GPIO_Init>

}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000
 8000968:	40010800 	.word	0x40010800
 800096c:	40010c00 	.word	0x40010c00

08000970 <scanLed7>:

/* USER CODE BEGIN 4 */
void scanLed7() {
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	static uint8_t index = 0;

	if(getMilFlag(SCAN_TIMER)) {
 8000974:	2000      	movs	r0, #0
 8000976:	f000 fb99 	bl	80010ac <getMilFlag>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d014      	beq.n	80009aa <scanLed7+0x3a>
		setMilTimer(SCAN_TIMER, scanTime);
 8000980:	23fa      	movs	r3, #250	; 0xfa
 8000982:	4619      	mov	r1, r3
 8000984:	2000      	movs	r0, #0
 8000986:	f000 fb11 	bl	8000fac <setMilTimer>
		display_7SEG(index++);
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <scanLed7+0x40>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	b2d1      	uxtb	r1, r2
 8000992:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <scanLed7+0x40>)
 8000994:	7011      	strb	r1, [r2, #0]
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fd8e 	bl	80004b8 <display_7SEG>
		if(index == 4) index = 0;
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <scanLed7+0x40>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b04      	cmp	r3, #4
 80009a2:	d102      	bne.n	80009aa <scanLed7+0x3a>
 80009a4:	4b02      	ldr	r3, [pc, #8]	; (80009b0 <scanLed7+0x40>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
	}
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200000d4 	.word	0x200000d4

080009b4 <setBufferLed7>:
void setBufferLed7(uint8_t firstPair, uint8_t secondPair) {
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	460a      	mov	r2, r1
 80009be:	71fb      	strb	r3, [r7, #7]
 80009c0:	4613      	mov	r3, r2
 80009c2:	71bb      	strb	r3, [r7, #6]
	buffer_led7[0] = firstPair / 10;
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <setBufferLed7+0x70>)
 80009c8:	fba2 2303 	umull	r2, r3, r2, r3
 80009cc:	08db      	lsrs	r3, r3, #3
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <setBufferLed7+0x74>)
 80009d2:	701a      	strb	r2, [r3, #0]
	buffer_led7[1] = firstPair % 10;
 80009d4:	79fa      	ldrb	r2, [r7, #7]
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <setBufferLed7+0x70>)
 80009d8:	fba3 1302 	umull	r1, r3, r3, r2
 80009dc:	08d9      	lsrs	r1, r3, #3
 80009de:	460b      	mov	r3, r1
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	440b      	add	r3, r1
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <setBufferLed7+0x74>)
 80009ec:	705a      	strb	r2, [r3, #1]
	buffer_led7[2] = secondPair / 10;
 80009ee:	79bb      	ldrb	r3, [r7, #6]
 80009f0:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <setBufferLed7+0x70>)
 80009f2:	fba2 2303 	umull	r2, r3, r2, r3
 80009f6:	08db      	lsrs	r3, r3, #3
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <setBufferLed7+0x74>)
 80009fc:	709a      	strb	r2, [r3, #2]
	buffer_led7[3] = secondPair % 10;
 80009fe:	79ba      	ldrb	r2, [r7, #6]
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <setBufferLed7+0x70>)
 8000a02:	fba3 1302 	umull	r1, r3, r3, r2
 8000a06:	08d9      	lsrs	r1, r3, #3
 8000a08:	460b      	mov	r3, r1
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	440b      	add	r3, r1
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <setBufferLed7+0x74>)
 8000a16:	70da      	strb	r2, [r3, #3]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	cccccccd 	.word	0xcccccccd
 8000a28:	2000000c 	.word	0x2000000c

08000a2c <blinkTraffic>:

void blinkTraffic(ModeState state) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
	if(state == NORMAL) return;
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d01f      	beq.n	8000a7c <blinkTraffic+0x50>
	if(getMilFlag(BLINK_TIMER)) {
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f000 fb35 	bl	80010ac <getMilFlag>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d01a      	beq.n	8000a7e <blinkTraffic+0x52>
		setMilTimer(BLINK_TIMER, blinkTime);
 8000a48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f000 faac 	bl	8000fac <setMilTimer>
		HAL_GPIO_TogglePin(TRAFFIC_PORT, (RED_VER << (state-1)) | (RED_HOR << (state-1)));
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	2210      	movs	r2, #16
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	b21a      	sxth	r2, r3
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	b21b      	sxth	r3, r3
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	4619      	mov	r1, r3
 8000a74:	4803      	ldr	r0, [pc, #12]	; (8000a84 <blinkTraffic+0x58>)
 8000a76:	f001 f8d0 	bl	8001c1a <HAL_GPIO_TogglePin>
 8000a7a:	e000      	b.n	8000a7e <blinkTraffic+0x52>
	if(state == NORMAL) return;
 8000a7c:	bf00      	nop
	}
}
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40010800 	.word	0x40010800

08000a88 <increase>:
//			RV          GV    YV
//	|-----------------|------|---|
//	|------------|----|----------|
//        GH       YH      RH
void increase(ModeState state, uint8_t* buffer) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	71fb      	strb	r3, [r7, #7]
	switch(state) {
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2b03      	cmp	r3, #3
 8000a98:	d029      	beq.n	8000aee <increase+0x66>
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	dc5b      	bgt.n	8000b56 <increase+0xce>
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d002      	beq.n	8000aa8 <increase+0x20>
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d045      	beq.n	8000b32 <increase+0xaa>
			buffer[VER_YELLOW]++;
			buffer[VER_GREEN]--;
		}
		break;
	default:
		break;
 8000aa6:	e056      	b.n	8000b56 <increase+0xce>
		if(buffer[VER_GREEN]-1 > 0 && buffer[HOR_RED]-1 > 1) {
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d953      	bls.n	8000b5a <increase+0xd2>
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	3303      	adds	r3, #3
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d94e      	bls.n	8000b5a <increase+0xd2>
			buffer[VER_RED]++;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	701a      	strb	r2, [r3, #0]
			buffer[VER_GREEN]--;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	3301      	adds	r3, #1
 8000acc:	781a      	ldrb	r2, [r3, #0]
 8000ace:	3a01      	subs	r2, #1
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	701a      	strb	r2, [r3, #0]
			buffer[HOR_RED]--;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	3303      	adds	r3, #3
 8000ad8:	781a      	ldrb	r2, [r3, #0]
 8000ada:	3a01      	subs	r2, #1
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	701a      	strb	r2, [r3, #0]
			buffer[HOR_GREEN]++;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	3304      	adds	r3, #4
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	3201      	adds	r2, #1
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	701a      	strb	r2, [r3, #0]
		break;
 8000aec:	e035      	b.n	8000b5a <increase+0xd2>
		if(buffer[VER_RED]-1 > 1 && buffer[HOR_GREEN]-1 > 0) {
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d933      	bls.n	8000b5e <increase+0xd6>
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	3304      	adds	r3, #4
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d92e      	bls.n	8000b5e <increase+0xd6>
			buffer[VER_GREEN]++;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	3201      	adds	r2, #1
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	701a      	strb	r2, [r3, #0]
			buffer[VER_RED]--;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	701a      	strb	r2, [r3, #0]
			buffer[HOR_GREEN]--;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	3304      	adds	r3, #4
 8000b1c:	781a      	ldrb	r2, [r3, #0]
 8000b1e:	3a01      	subs	r2, #1
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	701a      	strb	r2, [r3, #0]
			buffer[HOR_RED]++;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	3303      	adds	r3, #3
 8000b28:	781a      	ldrb	r2, [r3, #0]
 8000b2a:	3201      	adds	r2, #1
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	701a      	strb	r2, [r3, #0]
		break;
 8000b30:	e015      	b.n	8000b5e <increase+0xd6>
		if(buffer[VER_GREEN]-1 > 0) {
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d912      	bls.n	8000b62 <increase+0xda>
			buffer[VER_YELLOW]++;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	3302      	adds	r3, #2
 8000b40:	781a      	ldrb	r2, [r3, #0]
 8000b42:	3201      	adds	r2, #1
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	701a      	strb	r2, [r3, #0]
			buffer[VER_GREEN]--;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	781a      	ldrb	r2, [r3, #0]
 8000b4e:	3a01      	subs	r2, #1
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	701a      	strb	r2, [r3, #0]
		break;
 8000b54:	e005      	b.n	8000b62 <increase+0xda>
		break;
 8000b56:	bf00      	nop
 8000b58:	e004      	b.n	8000b64 <increase+0xdc>
		break;
 8000b5a:	bf00      	nop
 8000b5c:	e002      	b.n	8000b64 <increase+0xdc>
		break;
 8000b5e:	bf00      	nop
 8000b60:	e000      	b.n	8000b64 <increase+0xdc>
		break;
 8000b62:	bf00      	nop
	}
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <decrease>:
//			RV          GV    YV
//	|-----------------|------|---|
//	|------------|----|----------|
//        GH       YH      RH
void decrease(ModeState state, uint8_t* buffer) {
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	6039      	str	r1, [r7, #0]
 8000b78:	71fb      	strb	r3, [r7, #7]
	switch(state) {
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d028      	beq.n	8000bd2 <decrease+0x64>
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	dc5b      	bgt.n	8000c3c <decrease+0xce>
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d002      	beq.n	8000b8e <decrease+0x20>
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d045      	beq.n	8000c18 <decrease+0xaa>
			buffer[VER_YELLOW]--;
			buffer[VER_GREEN]++;
		}
		break;
	default:
		break;
 8000b8c:	e056      	b.n	8000c3c <decrease+0xce>
		if(buffer[VER_RED]-1 > 1 && buffer[VER_GREEN]-1 > 0) {
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d954      	bls.n	8000c40 <decrease+0xd2>
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d94f      	bls.n	8000c40 <decrease+0xd2>
			buffer[VER_RED]--;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	701a      	strb	r2, [r3, #0]
			buffer[VER_GREEN]++;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	3201      	adds	r2, #1
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	701a      	strb	r2, [r3, #0]
			buffer[HOR_RED]++;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	3303      	adds	r3, #3
 8000bbc:	781a      	ldrb	r2, [r3, #0]
 8000bbe:	3201      	adds	r2, #1
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	701a      	strb	r2, [r3, #0]
			buffer[HOR_GREEN]--;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	3304      	adds	r3, #4
 8000bc8:	781a      	ldrb	r2, [r3, #0]
 8000bca:	3a01      	subs	r2, #1
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	701a      	strb	r2, [r3, #0]
		break;
 8000bd0:	e036      	b.n	8000c40 <decrease+0xd2>
		if(buffer[VER_GREEN]-1 > 0 && buffer[HOR_RED]-1 > 1) {
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d933      	bls.n	8000c44 <decrease+0xd6>
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	3303      	adds	r3, #3
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d92e      	bls.n	8000c44 <decrease+0xd6>
			buffer[VER_GREEN]--;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	781a      	ldrb	r2, [r3, #0]
 8000bec:	3a01      	subs	r2, #1
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	701a      	strb	r2, [r3, #0]
			buffer[VER_RED]++;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	701a      	strb	r2, [r3, #0]
			buffer[HOR_GREEN]++;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	3304      	adds	r3, #4
 8000c02:	781a      	ldrb	r2, [r3, #0]
 8000c04:	3201      	adds	r2, #1
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	701a      	strb	r2, [r3, #0]
			buffer[HOR_RED]--;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	3303      	adds	r3, #3
 8000c0e:	781a      	ldrb	r2, [r3, #0]
 8000c10:	3a01      	subs	r2, #1
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	701a      	strb	r2, [r3, #0]
		break;
 8000c16:	e015      	b.n	8000c44 <decrease+0xd6>
		if(buffer[VER_YELLOW]-1 > 0) {
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	3302      	adds	r3, #2
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d912      	bls.n	8000c48 <decrease+0xda>
			buffer[VER_YELLOW]--;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	3302      	adds	r3, #2
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	3a01      	subs	r2, #1
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	701a      	strb	r2, [r3, #0]
			buffer[VER_GREEN]++;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	781a      	ldrb	r2, [r3, #0]
 8000c34:	3201      	adds	r2, #1
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	701a      	strb	r2, [r3, #0]
		break;
 8000c3a:	e005      	b.n	8000c48 <decrease+0xda>
		break;
 8000c3c:	bf00      	nop
 8000c3e:	e004      	b.n	8000c4a <decrease+0xdc>
		break;
 8000c40:	bf00      	nop
 8000c42:	e002      	b.n	8000c4a <decrease+0xdc>
		break;
 8000c44:	bf00      	nop
 8000c46:	e000      	b.n	8000c4a <decrease+0xdc>
		break;
 8000c48:	bf00      	nop
	}
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <copyArray>:
void copyArray(uint8_t* from, uint8_t* to, int n) {
 8000c54:	b480      	push	{r7}
 8000c56:	b087      	sub	sp, #28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < n; i++) {
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	e00a      	b.n	8000c7c <copyArray+0x28>
		to[i] = from[i];
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	441a      	add	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	68b9      	ldr	r1, [r7, #8]
 8000c70:	440b      	add	r3, r1
 8000c72:	7812      	ldrb	r2, [r2, #0]
 8000c74:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < n; i++) {
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dbf0      	blt.n	8000c66 <copyArray+0x12>
	}
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	371c      	adds	r7, #28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>
	...

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_MspInit+0x5c>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <HAL_MspInit+0x5c>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6193      	str	r3, [r2, #24]
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_MspInit+0x5c>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <HAL_MspInit+0x5c>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <HAL_MspInit+0x5c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	61d3      	str	r3, [r2, #28]
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <HAL_MspInit+0x5c>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <HAL_MspInit+0x60>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_MspInit+0x60>)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010000 	.word	0x40010000

08000d00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d10:	d113      	bne.n	8000d3a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_TIM_Base_MspInit+0x44>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <HAL_TIM_Base_MspInit+0x44>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	61d3      	str	r3, [r2, #28]
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_TIM_Base_MspInit+0x44>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	201c      	movs	r0, #28
 8000d30:	f000 fd93 	bl	800185a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d34:	201c      	movs	r0, #28
 8000d36:	f000 fdac 	bl	8001892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr

08000d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8e:	f000 fc71 	bl	8001674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <TIM2_IRQHandler+0x10>)
 8000d9e:	f001 fbd9 	bl	8002554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000124 	.word	0x20000124

08000dac <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000db6:	f001 ff15 	bl	8002be4 <__errno>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2216      	movs	r2, #22
 8000dbe:	601a      	str	r2, [r3, #0]
	return -1;
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <_exit>:

void _exit (int status)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ffe7 	bl	8000dac <_kill>
	while (1) {}		/* Make sure we hang here */
 8000dde:	e7fe      	b.n	8000dde <_exit+0x12>

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f001 fee8 	bl	8002be4 <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20002800 	.word	0x20002800
 8000e40:	00000400 	.word	0x00000400
 8000e44:	200000d8 	.word	0x200000d8
 8000e48:	20000180 	.word	0x20000180

08000e4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <init_timer>:

// array to store stop flag
static uint8_t* timer_mil_stop;
static uint8_t* timer_sec_stop;

void init_timer(TIM_HandleTypeDef *tim, unsigned int num_sec, unsigned int num_mil) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
	// init parameter for software timer
	TIMER_CYCLE = (tim->Instance->ARR+1) * (tim->Instance->PSC+1) / TIMER_CLOCK_FREQ;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	6812      	ldr	r2, [r2, #0]
 8000e70:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000e72:	3201      	adds	r2, #1
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	4a42      	ldr	r2, [pc, #264]	; (8000f84 <init_timer+0x12c>)
 8000e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7e:	0a5b      	lsrs	r3, r3, #9
 8000e80:	4a41      	ldr	r2, [pc, #260]	; (8000f88 <init_timer+0x130>)
 8000e82:	6013      	str	r3, [r2, #0]
	NO_OF_MIL_TIMERS = num_mil;
 8000e84:	4a41      	ldr	r2, [pc, #260]	; (8000f8c <init_timer+0x134>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
	NO_OF_SEC_TIMERS = num_sec;
 8000e8a:	4a41      	ldr	r2, [pc, #260]	; (8000f90 <init_timer+0x138>)
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	6013      	str	r3, [r2, #0]

	// init array for counter and flag
	timer_mil_counter = (unsigned int*)malloc(NO_OF_MIL_TIMERS * sizeof(unsigned int));
 8000e90:	4b3e      	ldr	r3, [pc, #248]	; (8000f8c <init_timer+0x134>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f001 fee2 	bl	8002c60 <malloc>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b3c      	ldr	r3, [pc, #240]	; (8000f94 <init_timer+0x13c>)
 8000ea2:	601a      	str	r2, [r3, #0]
	timer_sec_counter = (unsigned int*)malloc(NO_OF_SEC_TIMERS * sizeof(unsigned int));
 8000ea4:	4b3a      	ldr	r3, [pc, #232]	; (8000f90 <init_timer+0x138>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 fed8 	bl	8002c60 <malloc>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <init_timer+0x140>)
 8000eb6:	601a      	str	r2, [r3, #0]
	timer_mil_flag = (uint8_t*)malloc(NO_OF_MIL_TIMERS * sizeof(uint8_t));
 8000eb8:	4b34      	ldr	r3, [pc, #208]	; (8000f8c <init_timer+0x134>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f001 fecf 	bl	8002c60 <malloc>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b35      	ldr	r3, [pc, #212]	; (8000f9c <init_timer+0x144>)
 8000ec8:	601a      	str	r2, [r3, #0]
	timer_sec_flag = (uint8_t*)malloc(NO_OF_SEC_TIMERS * sizeof(uint8_t));
 8000eca:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <init_timer+0x138>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 fec6 	bl	8002c60 <malloc>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <init_timer+0x148>)
 8000eda:	601a      	str	r2, [r3, #0]
	timer_mil_stop = (uint8_t*)malloc(NO_OF_MIL_TIMERS * sizeof(uint8_t));
 8000edc:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <init_timer+0x134>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f001 febd 	bl	8002c60 <malloc>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <init_timer+0x14c>)
 8000eec:	601a      	str	r2, [r3, #0]
	timer_sec_stop = (uint8_t*)malloc(NO_OF_SEC_TIMERS * sizeof(uint8_t));
 8000eee:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <init_timer+0x138>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 feb4 	bl	8002c60 <malloc>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <init_timer+0x150>)
 8000efe:	601a      	str	r2, [r3, #0]

	// init value for array
	for(int i = 0; i < NO_OF_MIL_TIMERS; i++) {
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	e015      	b.n	8000f32 <init_timer+0xda>
		timer_mil_counter[i] = 0;
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <init_timer+0x13c>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
		timer_mil_flag[i] = 1;
 8000f14:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <init_timer+0x144>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]
		timer_mil_stop[i] = START_TIMER;
 8000f20:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <init_timer+0x14c>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	4413      	add	r3, r2
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_MIL_TIMERS; i++) {
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <init_timer+0x134>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d3e4      	bcc.n	8000f06 <init_timer+0xae>
	}
	for(int i = 0; i < NO_OF_SEC_TIMERS; i++) {
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	e015      	b.n	8000f6e <init_timer+0x116>
		timer_sec_counter[i] = 0;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <init_timer+0x140>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
		timer_sec_flag[i] = 1;
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <init_timer+0x148>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4413      	add	r3, r2
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
		timer_sec_stop[i] = START_TIMER;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <init_timer+0x150>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4413      	add	r3, r2
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_SEC_TIMERS; i++) {
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <init_timer+0x138>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d3e4      	bcc.n	8000f42 <init_timer+0xea>
	}
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	10624dd3 	.word	0x10624dd3
 8000f88:	200000dc 	.word	0x200000dc
 8000f8c:	200000e0 	.word	0x200000e0
 8000f90:	200000e4 	.word	0x200000e4
 8000f94:	200000e8 	.word	0x200000e8
 8000f98:	200000ec 	.word	0x200000ec
 8000f9c:	200000f0 	.word	0x200000f0
 8000fa0:	200000f4 	.word	0x200000f4
 8000fa4:	200000f8 	.word	0x200000f8
 8000fa8:	200000fc 	.word	0x200000fc

08000fac <setMilTimer>:

uint8_t setMilTimer(uint8_t timer, unsigned int value) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
	if((value * 1000) % TIMER_CYCLE != 0) {
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fbe:	fb02 f303 	mul.w	r3, r2, r3
 8000fc2:	4a15      	ldr	r2, [pc, #84]	; (8001018 <setMilTimer+0x6c>)
 8000fc4:	6812      	ldr	r2, [r2, #0]
 8000fc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fca:	fb02 f201 	mul.w	r2, r2, r1
 8000fce:	1a9b      	subs	r3, r3, r2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <setMilTimer+0x2c>
		return 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	e01a      	b.n	800100e <setMilTimer+0x62>
	}
	if(timer >= NO_OF_SEC_TIMERS) {
 8000fd8:	79fa      	ldrb	r2, [r7, #7]
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <setMilTimer+0x70>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d303      	bcc.n	8000fea <setMilTimer+0x3e>
		exit(-1);
 8000fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe6:	f001 fe03 	bl	8002bf0 <exit>
	}

	timer_mil_counter[timer] = value / TIMER_CYCLE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <setMilTimer+0x6c>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <setMilTimer+0x74>)
 8000ff0:	6819      	ldr	r1, [r3, #0]
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	6839      	ldr	r1, [r7, #0]
 8000ffa:	fbb1 f2f2 	udiv	r2, r1, r2
 8000ffe:	601a      	str	r2, [r3, #0]
	timer_mil_flag[timer] = 0;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <setMilTimer+0x78>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4413      	add	r3, r2
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
	return 1;
 800100c:	2301      	movs	r3, #1
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200000dc 	.word	0x200000dc
 800101c:	200000e4 	.word	0x200000e4
 8001020:	200000e8 	.word	0x200000e8
 8001024:	200000f0 	.word	0x200000f0

08001028 <setSecTimer>:
uint8_t setSecTimer(uint8_t timer, unsigned int value) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
	if((value * 1000) % TIMER_CYCLE != 0) {
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800103a:	fb02 f303 	mul.w	r3, r2, r3
 800103e:	4a17      	ldr	r2, [pc, #92]	; (800109c <setSecTimer+0x74>)
 8001040:	6812      	ldr	r2, [r2, #0]
 8001042:	fbb3 f1f2 	udiv	r1, r3, r2
 8001046:	fb02 f201 	mul.w	r2, r2, r1
 800104a:	1a9b      	subs	r3, r3, r2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <setSecTimer+0x2c>
		return 0;
 8001050:	2300      	movs	r3, #0
 8001052:	e01e      	b.n	8001092 <setSecTimer+0x6a>
	}
	if(timer >= NO_OF_SEC_TIMERS) {
 8001054:	79fa      	ldrb	r2, [r7, #7]
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <setSecTimer+0x78>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	d303      	bcc.n	8001066 <setSecTimer+0x3e>
		exit(-1);
 800105e:	f04f 30ff 	mov.w	r0, #4294967295
 8001062:	f001 fdc5 	bl	8002bf0 <exit>
	}

	timer_sec_counter[timer] = value*1000 / TIMER_CYCLE;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800106c:	fb02 f103 	mul.w	r1, r2, r3
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <setSecTimer+0x74>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <setSecTimer+0x7c>)
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4403      	add	r3, r0
 800107e:	fbb1 f2f2 	udiv	r2, r1, r2
 8001082:	601a      	str	r2, [r3, #0]
	timer_sec_flag[timer] = 0;
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <setSecTimer+0x80>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4413      	add	r3, r2
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
	return 1;
 8001090:	2301      	movs	r3, #1
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200000dc 	.word	0x200000dc
 80010a0:	200000e4 	.word	0x200000e4
 80010a4:	200000ec 	.word	0x200000ec
 80010a8:	200000f4 	.word	0x200000f4

080010ac <getMilFlag>:

uint8_t getMilFlag(uint8_t timer) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	if(timer >= NO_OF_SEC_TIMERS) {
 80010b6:	79fa      	ldrb	r2, [r7, #7]
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <getMilFlag+0x30>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d303      	bcc.n	80010c8 <getMilFlag+0x1c>
		exit(-1);
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f001 fd94 	bl	8002bf0 <exit>
	}
	return timer_mil_flag[timer];
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <getMilFlag+0x34>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	4413      	add	r3, r2
 80010d0:	781b      	ldrb	r3, [r3, #0]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200000e4 	.word	0x200000e4
 80010e0:	200000f0 	.word	0x200000f0

080010e4 <getSecFlag>:
uint8_t getSecFlag(uint8_t timer) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
	if(timer >= NO_OF_SEC_TIMERS) {
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <getSecFlag+0x30>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d303      	bcc.n	8001100 <getSecFlag+0x1c>
		exit(-1);
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f001 fd78 	bl	8002bf0 <exit>
	}
	return timer_sec_flag[timer];
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <getSecFlag+0x34>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	4413      	add	r3, r2
 8001108:	781b      	ldrb	r3, [r3, #0]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200000e4 	.word	0x200000e4
 8001118:	200000f4 	.word	0x200000f4

0800111c <getSecCounter>:
	if(timer >= NO_OF_MIL_TIMERS) {
		exit(-1);
	}
	return timer_mil_counter[timer];
}
unsigned int getSecCounter(uint8_t timer) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	if(timer >= NO_OF_SEC_TIMERS) {
 8001126:	79fa      	ldrb	r2, [r7, #7]
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <getSecCounter+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	429a      	cmp	r2, r3
 800112e:	d303      	bcc.n	8001138 <getSecCounter+0x1c>
		exit(-1);
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f001 fd5c 	bl	8002bf0 <exit>
	}
	return timer_sec_counter[timer] * TIMER_CYCLE / 1000;
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <getSecCounter+0x44>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <getSecCounter+0x48>)
 8001146:	6812      	ldr	r2, [r2, #0]
 8001148:	fb02 f303 	mul.w	r3, r2, r3
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <getSecCounter+0x4c>)
 800114e:	fba2 2303 	umull	r2, r3, r2, r3
 8001152:	099b      	lsrs	r3, r3, #6
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200000e4 	.word	0x200000e4
 8001160:	200000ec 	.word	0x200000ec
 8001164:	200000dc 	.word	0x200000dc
 8001168:	10624dd3 	.word	0x10624dd3

0800116c <controlSecTimer>:
}

void controlMilTimer(uint8_t timer, ControlTimer control) {
	timer_mil_stop[timer] = control;
}
void controlSecTimer(uint8_t timer, ControlTimer control) {
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	460a      	mov	r2, r1
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	4613      	mov	r3, r2
 800117a:	71bb      	strb	r3, [r7, #6]
	timer_sec_stop[timer] = control;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <controlSecTimer+0x28>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	4413      	add	r3, r2
 8001184:	79ba      	ldrb	r2, [r7, #6]
 8001186:	701a      	strb	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	200000fc 	.word	0x200000fc

08001198 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	button_reading();
 80011a0:	f7ff f8d0 	bl	8000344 <button_reading>
	for(int i = 0; i < NO_OF_MIL_TIMERS; i++) {
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	e029      	b.n	80011fe <HAL_TIM_PeriodElapsedCallback+0x66>
		if(timer_mil_stop[i] == STOP_TIMER) continue;
 80011aa:	4b33      	ldr	r3, [pc, #204]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4413      	add	r3, r2
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d01e      	beq.n	80011f6 <HAL_TIM_PeriodElapsedCallback+0x5e>
		if(timer_mil_counter[i] > 0) {
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d017      	beq.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x60>
			timer_mil_counter[i]--;
 80011c8:	4b2c      	ldr	r3, [pc, #176]	; (800127c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	3a01      	subs	r2, #1
 80011d6:	601a      	str	r2, [r3, #0]
			if(timer_mil_counter[i] == 0) {
 80011d8:	4b28      	ldr	r3, [pc, #160]	; (800127c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d107      	bne.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x60>
				timer_mil_flag[i] = 1;
 80011e8:	4b25      	ldr	r3, [pc, #148]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	e000      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x60>
		if(timer_mil_stop[i] == STOP_TIMER) continue;
 80011f6:	bf00      	nop
	for(int i = 0; i < NO_OF_MIL_TIMERS; i++) {
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	4b20      	ldr	r3, [pc, #128]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d3d0      	bcc.n	80011aa <HAL_TIM_PeriodElapsedCallback+0x12>
			}
		}
	}

	for(int i = 0; i < NO_OF_SEC_TIMERS; i++) {
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	e029      	b.n	8001262 <HAL_TIM_PeriodElapsedCallback+0xca>
		if(timer_sec_stop[i] == STOP_TIMER) continue;
 800120e:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	4413      	add	r3, r2
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d01e      	beq.n	800125a <HAL_TIM_PeriodElapsedCallback+0xc2>
		if(timer_sec_counter[i] > 0) {
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d017      	beq.n	800125c <HAL_TIM_PeriodElapsedCallback+0xc4>
			timer_sec_counter[i]--;
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	3a01      	subs	r2, #1
 800123a:	601a      	str	r2, [r3, #0]
			if(timer_sec_counter[i] == 0) {
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d107      	bne.n	800125c <HAL_TIM_PeriodElapsedCallback+0xc4>
				timer_sec_flag[i] = 1;
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4413      	add	r3, r2
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
 8001258:	e000      	b.n	800125c <HAL_TIM_PeriodElapsedCallback+0xc4>
		if(timer_sec_stop[i] == STOP_TIMER) continue;
 800125a:	bf00      	nop
	for(int i = 0; i < NO_OF_SEC_TIMERS; i++) {
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	3301      	adds	r3, #1
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	429a      	cmp	r2, r3
 800126a:	d3d0      	bcc.n	800120e <HAL_TIM_PeriodElapsedCallback+0x76>
			}
		}
	}
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200000f8 	.word	0x200000f8
 800127c:	200000e8 	.word	0x200000e8
 8001280:	200000f0 	.word	0x200000f0
 8001284:	200000e0 	.word	0x200000e0
 8001288:	200000fc 	.word	0x200000fc
 800128c:	200000ec 	.word	0x200000ec
 8001290:	200000f4 	.word	0x200000f4
 8001294:	200000e4 	.word	0x200000e4

08001298 <init_traffic>:

static uint16_t allpin;
static uint8_t readyForNewPeriod = 1;
static uint8_t periodDone = 0;

void init_traffic(const uint16_t* port, uint8_t* time) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
	lightPort = port;
 80012a2:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <init_traffic+0x80>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6013      	str	r3, [r2, #0]
	lightTime = time;
 80012a8:	4a1c      	ldr	r2, [pc, #112]	; (800131c <init_traffic+0x84>)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	6013      	str	r3, [r2, #0]

	ver_state = STATE_YELLOW;
 80012ae:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <init_traffic+0x88>)
 80012b0:	2202      	movs	r2, #2
 80012b2:	701a      	strb	r2, [r3, #0]
	hor_state = STATE_RED;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <init_traffic+0x8c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]

	allpin = lightPort[0] | lightPort[1] | lightPort[2] | lightPort[3] | lightPort[4] | lightPort[5];
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <init_traffic+0x80>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	881a      	ldrh	r2, [r3, #0]
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <init_traffic+0x80>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3302      	adds	r3, #2
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <init_traffic+0x80>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	3304      	adds	r3, #4
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <init_traffic+0x80>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3306      	adds	r3, #6
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <init_traffic+0x80>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3308      	adds	r3, #8
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <init_traffic+0x80>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	330a      	adds	r3, #10
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <init_traffic+0x90>)
 80012fe:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(TRAFFIC_PORT, allpin, LIGHT_RESET);
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <init_traffic+0x90>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	2201      	movs	r2, #1
 8001306:	4619      	mov	r1, r3
 8001308:	4808      	ldr	r0, [pc, #32]	; (800132c <init_traffic+0x94>)
 800130a:	f000 fc6e 	bl	8001bea <HAL_GPIO_WritePin>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000104 	.word	0x20000104
 800131c:	20000108 	.word	0x20000108
 8001320:	20000100 	.word	0x20000100
 8001324:	20000101 	.word	0x20000101
 8001328:	2000010c 	.word	0x2000010c
 800132c:	40010800 	.word	0x40010800

08001330 <traffic_display>:

void traffic_display(void) {
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	switch(ver_state) {
 8001334:	4b7a      	ldr	r3, [pc, #488]	; (8001520 <traffic_display+0x1f0>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b03      	cmp	r3, #3
 800133a:	d873      	bhi.n	8001424 <traffic_display+0xf4>
 800133c:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <traffic_display+0x14>)
 800133e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001342:	bf00      	nop
 8001344:	08001355 	.word	0x08001355
 8001348:	0800138f 	.word	0x0800138f
 800134c:	080013cb 	.word	0x080013cb
 8001350:	08001401 	.word	0x08001401
	case STATE_RED:
		if(getSecFlag(TRAFFIC_VER_TIMER)) {
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff fec5 	bl	80010e4 <getSecFlag>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00d      	beq.n	800137c <traffic_display+0x4c>
			setSecTimer(TRAFFIC_VER_TIMER, lightTime[VER_GREEN]);
 8001360:	4b70      	ldr	r3, [pc, #448]	; (8001524 <traffic_display+0x1f4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff fe5c 	bl	8001028 <setSecTimer>
			ver_state = STATE_GREEN;
 8001370:	4b6b      	ldr	r3, [pc, #428]	; (8001520 <traffic_display+0x1f0>)
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]

			clearTraffic();
 8001376:	f000 f8e1 	bl	800153c <clearTraffic>
			break;
 800137a:	e053      	b.n	8001424 <traffic_display+0xf4>
		}
		HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[VER_RED], LIGHT_SET);
 800137c:	4b6a      	ldr	r3, [pc, #424]	; (8001528 <traffic_display+0x1f8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	2200      	movs	r2, #0
 8001384:	4619      	mov	r1, r3
 8001386:	4869      	ldr	r0, [pc, #420]	; (800152c <traffic_display+0x1fc>)
 8001388:	f000 fc2f 	bl	8001bea <HAL_GPIO_WritePin>
		break;
 800138c:	e04a      	b.n	8001424 <traffic_display+0xf4>
	case STATE_GREEN:
		if(getSecFlag(TRAFFIC_VER_TIMER)) {
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff fea8 	bl	80010e4 <getSecFlag>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00d      	beq.n	80013b6 <traffic_display+0x86>
			setSecTimer(TRAFFIC_VER_TIMER, lightTime[VER_YELLOW]);
 800139a:	4b62      	ldr	r3, [pc, #392]	; (8001524 <traffic_display+0x1f4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3302      	adds	r3, #2
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	4619      	mov	r1, r3
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff fe3f 	bl	8001028 <setSecTimer>
			ver_state = STATE_YELLOW;
 80013aa:	4b5d      	ldr	r3, [pc, #372]	; (8001520 <traffic_display+0x1f0>)
 80013ac:	2202      	movs	r2, #2
 80013ae:	701a      	strb	r2, [r3, #0]

			clearTraffic();
 80013b0:	f000 f8c4 	bl	800153c <clearTraffic>
			break;
 80013b4:	e036      	b.n	8001424 <traffic_display+0xf4>
		}
		HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[VER_GREEN], LIGHT_SET);
 80013b6:	4b5c      	ldr	r3, [pc, #368]	; (8001528 <traffic_display+0x1f8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3302      	adds	r3, #2
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	2200      	movs	r2, #0
 80013c0:	4619      	mov	r1, r3
 80013c2:	485a      	ldr	r0, [pc, #360]	; (800152c <traffic_display+0x1fc>)
 80013c4:	f000 fc11 	bl	8001bea <HAL_GPIO_WritePin>
		break;
 80013c8:	e02c      	b.n	8001424 <traffic_display+0xf4>
	case STATE_YELLOW:
		if(getSecFlag(TRAFFIC_VER_TIMER)) {
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff fe8a 	bl	80010e4 <getSecFlag>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00a      	beq.n	80013ec <traffic_display+0xbc>
			ver_state = STATE_WAIT;
 80013d6:	4b52      	ldr	r3, [pc, #328]	; (8001520 <traffic_display+0x1f0>)
 80013d8:	2203      	movs	r2, #3
 80013da:	701a      	strb	r2, [r3, #0]

			readyForNewPeriod = 0;
 80013dc:	4b54      	ldr	r3, [pc, #336]	; (8001530 <traffic_display+0x200>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
			periodDone = 1;
 80013e2:	4b54      	ldr	r3, [pc, #336]	; (8001534 <traffic_display+0x204>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
			clearTraffic();
 80013e8:	f000 f8a8 	bl	800153c <clearTraffic>
		}
		HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[VER_YELLOW], LIGHT_SET);
 80013ec:	4b4e      	ldr	r3, [pc, #312]	; (8001528 <traffic_display+0x1f8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3304      	adds	r3, #4
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	2200      	movs	r2, #0
 80013f6:	4619      	mov	r1, r3
 80013f8:	484c      	ldr	r0, [pc, #304]	; (800152c <traffic_display+0x1fc>)
 80013fa:	f000 fbf6 	bl	8001bea <HAL_GPIO_WritePin>
		break;
 80013fe:	e011      	b.n	8001424 <traffic_display+0xf4>
	case STATE_WAIT:
		if(readyForNewPeriod) {
 8001400:	4b4b      	ldr	r3, [pc, #300]	; (8001530 <traffic_display+0x200>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00c      	beq.n	8001422 <traffic_display+0xf2>
			periodDone = 0;
 8001408:	4b4a      	ldr	r3, [pc, #296]	; (8001534 <traffic_display+0x204>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
			ver_state = STATE_RED;
 800140e:	4b44      	ldr	r3, [pc, #272]	; (8001520 <traffic_display+0x1f0>)
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
			setSecTimer(TRAFFIC_VER_TIMER, lightTime[VER_RED]);
 8001414:	4b43      	ldr	r3, [pc, #268]	; (8001524 <traffic_display+0x1f4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	4619      	mov	r1, r3
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff fe03 	bl	8001028 <setSecTimer>
		}
		break;
 8001422:	bf00      	nop
	}



	switch(hor_state) {
 8001424:	4b44      	ldr	r3, [pc, #272]	; (8001538 <traffic_display+0x208>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b03      	cmp	r3, #3
 800142a:	d876      	bhi.n	800151a <traffic_display+0x1ea>
 800142c:	a201      	add	r2, pc, #4	; (adr r2, 8001434 <traffic_display+0x104>)
 800142e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001432:	bf00      	nop
 8001434:	080014bd 	.word	0x080014bd
 8001438:	08001445 	.word	0x08001445
 800143c:	08001481 	.word	0x08001481
 8001440:	080014f5 	.word	0x080014f5
	case STATE_GREEN:
		if(getSecFlag(TRAFFIC_HOR_TIMER)) {
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff fe4d 	bl	80010e4 <getSecFlag>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00d      	beq.n	800146c <traffic_display+0x13c>
			setSecTimer(TRAFFIC_HOR_TIMER, lightTime[HOR_YELLOW]);
 8001450:	4b34      	ldr	r3, [pc, #208]	; (8001524 <traffic_display+0x1f4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	3305      	adds	r3, #5
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	2001      	movs	r0, #1
 800145c:	f7ff fde4 	bl	8001028 <setSecTimer>
			hor_state = STATE_YELLOW;
 8001460:	4b35      	ldr	r3, [pc, #212]	; (8001538 <traffic_display+0x208>)
 8001462:	2202      	movs	r2, #2
 8001464:	701a      	strb	r2, [r3, #0]

			clearTraffic();
 8001466:	f000 f869 	bl	800153c <clearTraffic>
			break;
 800146a:	e056      	b.n	800151a <traffic_display+0x1ea>
		}
		HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[HOR_GREEN], LIGHT_SET);
 800146c:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <traffic_display+0x1f8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3308      	adds	r3, #8
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	2200      	movs	r2, #0
 8001476:	4619      	mov	r1, r3
 8001478:	482c      	ldr	r0, [pc, #176]	; (800152c <traffic_display+0x1fc>)
 800147a:	f000 fbb6 	bl	8001bea <HAL_GPIO_WritePin>
		break;
 800147e:	e04c      	b.n	800151a <traffic_display+0x1ea>
	case STATE_YELLOW:
		if(getSecFlag(TRAFFIC_HOR_TIMER)) {
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff fe2f 	bl	80010e4 <getSecFlag>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00d      	beq.n	80014a8 <traffic_display+0x178>
			setSecTimer(TRAFFIC_HOR_TIMER, lightTime[HOR_RED]);
 800148c:	4b25      	ldr	r3, [pc, #148]	; (8001524 <traffic_display+0x1f4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3303      	adds	r3, #3
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	2001      	movs	r0, #1
 8001498:	f7ff fdc6 	bl	8001028 <setSecTimer>
			hor_state = STATE_RED;
 800149c:	4b26      	ldr	r3, [pc, #152]	; (8001538 <traffic_display+0x208>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]

			clearTraffic();
 80014a2:	f000 f84b 	bl	800153c <clearTraffic>
			break;
 80014a6:	e038      	b.n	800151a <traffic_display+0x1ea>
		}
		HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[HOR_YELLOW], LIGHT_SET);
 80014a8:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <traffic_display+0x1f8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	330a      	adds	r3, #10
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	481d      	ldr	r0, [pc, #116]	; (800152c <traffic_display+0x1fc>)
 80014b6:	f000 fb98 	bl	8001bea <HAL_GPIO_WritePin>
		break;
 80014ba:	e02e      	b.n	800151a <traffic_display+0x1ea>
	case STATE_RED:
		if(getSecFlag(TRAFFIC_HOR_TIMER)) {
 80014bc:	2001      	movs	r0, #1
 80014be:	f7ff fe11 	bl	80010e4 <getSecFlag>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00b      	beq.n	80014e0 <traffic_display+0x1b0>
			hor_state = STATE_WAIT;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <traffic_display+0x208>)
 80014ca:	2203      	movs	r2, #3
 80014cc:	701a      	strb	r2, [r3, #0]

			readyForNewPeriod = 0;
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <traffic_display+0x200>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
			periodDone = 1;
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <traffic_display+0x204>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
			clearTraffic();
 80014da:	f000 f82f 	bl	800153c <clearTraffic>
			break;
 80014de:	e01c      	b.n	800151a <traffic_display+0x1ea>
		}
		HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[HOR_RED], LIGHT_SET);
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <traffic_display+0x1f8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3306      	adds	r3, #6
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	2200      	movs	r2, #0
 80014ea:	4619      	mov	r1, r3
 80014ec:	480f      	ldr	r0, [pc, #60]	; (800152c <traffic_display+0x1fc>)
 80014ee:	f000 fb7c 	bl	8001bea <HAL_GPIO_WritePin>
		break;
 80014f2:	e012      	b.n	800151a <traffic_display+0x1ea>
	case STATE_WAIT:
		if(readyForNewPeriod) {
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <traffic_display+0x200>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00d      	beq.n	8001518 <traffic_display+0x1e8>
			periodDone = 0;
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <traffic_display+0x204>)
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
			hor_state = STATE_GREEN;
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <traffic_display+0x208>)
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]
			setSecTimer(TRAFFIC_HOR_TIMER, lightTime[HOR_GREEN]);
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <traffic_display+0x1f4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	3304      	adds	r3, #4
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	2001      	movs	r0, #1
 8001514:	f7ff fd88 	bl	8001028 <setSecTimer>
		}
		break;
 8001518:	bf00      	nop
	}

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000100 	.word	0x20000100
 8001524:	20000108 	.word	0x20000108
 8001528:	20000104 	.word	0x20000104
 800152c:	40010800 	.word	0x40010800
 8001530:	20000024 	.word	0x20000024
 8001534:	2000010e 	.word	0x2000010e
 8001538:	20000101 	.word	0x20000101

0800153c <clearTraffic>:

void clearTraffic(void) {
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[VER_YELLOW], LIGHT_RESET);
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <clearTraffic+0x28>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3304      	adds	r3, #4
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	2201      	movs	r2, #1
 800154a:	4619      	mov	r1, r3
 800154c:	4806      	ldr	r0, [pc, #24]	; (8001568 <clearTraffic+0x2c>)
 800154e:	f000 fb4c 	bl	8001bea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC_PORT, allpin, LIGHT_RESET);
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <clearTraffic+0x30>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	2201      	movs	r2, #1
 8001558:	4619      	mov	r1, r3
 800155a:	4803      	ldr	r0, [pc, #12]	; (8001568 <clearTraffic+0x2c>)
 800155c:	f000 fb45 	bl	8001bea <HAL_GPIO_WritePin>
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000104 	.word	0x20000104
 8001568:	40010800 	.word	0x40010800
 800156c:	2000010c 	.word	0x2000010c

08001570 <isPeriodDone>:

uint8_t isPeriodDone(void) {
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
	return periodDone;
 8001574:	4b02      	ldr	r3, [pc, #8]	; (8001580 <isPeriodDone+0x10>)
 8001576:	781b      	ldrb	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	2000010e 	.word	0x2000010e

08001584 <startNewPeriod>:
void startNewPeriod(void) {
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
	readyForNewPeriod = 1;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <startNewPeriod+0x14>)
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000024 	.word	0x20000024

0800159c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800159c:	480c      	ldr	r0, [pc, #48]	; (80015d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800159e:	490d      	ldr	r1, [pc, #52]	; (80015d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015a0:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a4:	e002      	b.n	80015ac <LoopCopyDataInit>

080015a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015aa:	3304      	adds	r3, #4

080015ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b0:	d3f9      	bcc.n	80015a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b4:	4c0a      	ldr	r4, [pc, #40]	; (80015e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b8:	e001      	b.n	80015be <LoopFillZerobss>

080015ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015bc:	3204      	adds	r2, #4

080015be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c0:	d3fb      	bcc.n	80015ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015c2:	f7ff fc43 	bl	8000e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015c6:	f001 fb27 	bl	8002c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ca:	f7fe ffdf 	bl	800058c <main>
  bx lr
 80015ce:	4770      	bx	lr
  ldr r0, =_sdata
 80015d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80015d8:	08002de0 	.word	0x08002de0
  ldr r2, =_sbss
 80015dc:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80015e0:	20000180 	.word	0x20000180

080015e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC1_2_IRQHandler>
	...

080015e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <HAL_Init+0x28>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a07      	ldr	r2, [pc, #28]	; (8001610 <HAL_Init+0x28>)
 80015f2:	f043 0310 	orr.w	r3, r3, #16
 80015f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f8:	2003      	movs	r0, #3
 80015fa:	f000 f923 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fe:	200f      	movs	r0, #15
 8001600:	f000 f808 	bl	8001614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001604:	f7ff fb4a 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40022000 	.word	0x40022000

08001614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_InitTick+0x54>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_InitTick+0x58>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162a:	fbb3 f3f1 	udiv	r3, r3, r1
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f93b 	bl	80018ae <HAL_SYSTICK_Config>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e00e      	b.n	8001660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b0f      	cmp	r3, #15
 8001646:	d80a      	bhi.n	800165e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001648:	2200      	movs	r2, #0
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	f000 f903 	bl	800185a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001654:	4a06      	ldr	r2, [pc, #24]	; (8001670 <HAL_InitTick+0x5c>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	e000      	b.n	8001660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000020 	.word	0x20000020
 800166c:	2000002c 	.word	0x2000002c
 8001670:	20000028 	.word	0x20000028

08001674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <HAL_IncTick+0x1c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <HAL_IncTick+0x20>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4413      	add	r3, r2
 8001684:	4a03      	ldr	r2, [pc, #12]	; (8001694 <HAL_IncTick+0x20>)
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	2000002c 	.word	0x2000002c
 8001694:	2000016c 	.word	0x2000016c

08001698 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return uwTick;
 800169c:	4b02      	ldr	r3, [pc, #8]	; (80016a8 <HAL_GetTick+0x10>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	2000016c 	.word	0x2000016c

080016ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c8:	4013      	ands	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016de:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	60d3      	str	r3, [r2, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <__NVIC_GetPriorityGrouping+0x18>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 0307 	and.w	r3, r3, #7
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	2b00      	cmp	r3, #0
 8001720:	db0b      	blt.n	800173a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	f003 021f 	and.w	r2, r3, #31
 8001728:	4906      	ldr	r1, [pc, #24]	; (8001744 <__NVIC_EnableIRQ+0x34>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	2001      	movs	r0, #1
 8001732:	fa00 f202 	lsl.w	r2, r0, r2
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	e000e100 	.word	0xe000e100

08001748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	; (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	; (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	; 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
         );
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	; 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001810:	d301      	bcc.n	8001816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001812:	2301      	movs	r3, #1
 8001814:	e00f      	b.n	8001836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <SysTick_Config+0x40>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181e:	210f      	movs	r1, #15
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	f7ff ff90 	bl	8001748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <SysTick_Config+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <SysTick_Config+0x40>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff2d 	bl	80016ac <__NVIC_SetPriorityGrouping>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800186c:	f7ff ff42 	bl	80016f4 <__NVIC_GetPriorityGrouping>
 8001870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	6978      	ldr	r0, [r7, #20]
 8001878:	f7ff ff90 	bl	800179c <NVIC_EncodePriority>
 800187c:	4602      	mov	r2, r0
 800187e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff5f 	bl	8001748 <__NVIC_SetPriority>
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff35 	bl	8001710 <__NVIC_EnableIRQ>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ffa2 	bl	8001800 <SysTick_Config>
 80018bc:	4603      	mov	r3, r0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b08b      	sub	sp, #44	; 0x2c
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018da:	e148      	b.n	8001b6e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018dc:	2201      	movs	r2, #1
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	f040 8137 	bne.w	8001b68 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4aa3      	ldr	r2, [pc, #652]	; (8001b8c <HAL_GPIO_Init+0x2c4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d05e      	beq.n	80019c2 <HAL_GPIO_Init+0xfa>
 8001904:	4aa1      	ldr	r2, [pc, #644]	; (8001b8c <HAL_GPIO_Init+0x2c4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d875      	bhi.n	80019f6 <HAL_GPIO_Init+0x12e>
 800190a:	4aa1      	ldr	r2, [pc, #644]	; (8001b90 <HAL_GPIO_Init+0x2c8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d058      	beq.n	80019c2 <HAL_GPIO_Init+0xfa>
 8001910:	4a9f      	ldr	r2, [pc, #636]	; (8001b90 <HAL_GPIO_Init+0x2c8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d86f      	bhi.n	80019f6 <HAL_GPIO_Init+0x12e>
 8001916:	4a9f      	ldr	r2, [pc, #636]	; (8001b94 <HAL_GPIO_Init+0x2cc>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d052      	beq.n	80019c2 <HAL_GPIO_Init+0xfa>
 800191c:	4a9d      	ldr	r2, [pc, #628]	; (8001b94 <HAL_GPIO_Init+0x2cc>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d869      	bhi.n	80019f6 <HAL_GPIO_Init+0x12e>
 8001922:	4a9d      	ldr	r2, [pc, #628]	; (8001b98 <HAL_GPIO_Init+0x2d0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d04c      	beq.n	80019c2 <HAL_GPIO_Init+0xfa>
 8001928:	4a9b      	ldr	r2, [pc, #620]	; (8001b98 <HAL_GPIO_Init+0x2d0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d863      	bhi.n	80019f6 <HAL_GPIO_Init+0x12e>
 800192e:	4a9b      	ldr	r2, [pc, #620]	; (8001b9c <HAL_GPIO_Init+0x2d4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d046      	beq.n	80019c2 <HAL_GPIO_Init+0xfa>
 8001934:	4a99      	ldr	r2, [pc, #612]	; (8001b9c <HAL_GPIO_Init+0x2d4>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d85d      	bhi.n	80019f6 <HAL_GPIO_Init+0x12e>
 800193a:	2b12      	cmp	r3, #18
 800193c:	d82a      	bhi.n	8001994 <HAL_GPIO_Init+0xcc>
 800193e:	2b12      	cmp	r3, #18
 8001940:	d859      	bhi.n	80019f6 <HAL_GPIO_Init+0x12e>
 8001942:	a201      	add	r2, pc, #4	; (adr r2, 8001948 <HAL_GPIO_Init+0x80>)
 8001944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001948:	080019c3 	.word	0x080019c3
 800194c:	0800199d 	.word	0x0800199d
 8001950:	080019af 	.word	0x080019af
 8001954:	080019f1 	.word	0x080019f1
 8001958:	080019f7 	.word	0x080019f7
 800195c:	080019f7 	.word	0x080019f7
 8001960:	080019f7 	.word	0x080019f7
 8001964:	080019f7 	.word	0x080019f7
 8001968:	080019f7 	.word	0x080019f7
 800196c:	080019f7 	.word	0x080019f7
 8001970:	080019f7 	.word	0x080019f7
 8001974:	080019f7 	.word	0x080019f7
 8001978:	080019f7 	.word	0x080019f7
 800197c:	080019f7 	.word	0x080019f7
 8001980:	080019f7 	.word	0x080019f7
 8001984:	080019f7 	.word	0x080019f7
 8001988:	080019f7 	.word	0x080019f7
 800198c:	080019a5 	.word	0x080019a5
 8001990:	080019b9 	.word	0x080019b9
 8001994:	4a82      	ldr	r2, [pc, #520]	; (8001ba0 <HAL_GPIO_Init+0x2d8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d013      	beq.n	80019c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800199a:	e02c      	b.n	80019f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	623b      	str	r3, [r7, #32]
          break;
 80019a2:	e029      	b.n	80019f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	3304      	adds	r3, #4
 80019aa:	623b      	str	r3, [r7, #32]
          break;
 80019ac:	e024      	b.n	80019f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	3308      	adds	r3, #8
 80019b4:	623b      	str	r3, [r7, #32]
          break;
 80019b6:	e01f      	b.n	80019f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	330c      	adds	r3, #12
 80019be:	623b      	str	r3, [r7, #32]
          break;
 80019c0:	e01a      	b.n	80019f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d102      	bne.n	80019d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ca:	2304      	movs	r3, #4
 80019cc:	623b      	str	r3, [r7, #32]
          break;
 80019ce:	e013      	b.n	80019f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d105      	bne.n	80019e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d8:	2308      	movs	r3, #8
 80019da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	611a      	str	r2, [r3, #16]
          break;
 80019e2:	e009      	b.n	80019f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e4:	2308      	movs	r3, #8
 80019e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	615a      	str	r2, [r3, #20]
          break;
 80019ee:	e003      	b.n	80019f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
          break;
 80019f4:	e000      	b.n	80019f8 <HAL_GPIO_Init+0x130>
          break;
 80019f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2bff      	cmp	r3, #255	; 0xff
 80019fc:	d801      	bhi.n	8001a02 <HAL_GPIO_Init+0x13a>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	e001      	b.n	8001a06 <HAL_GPIO_Init+0x13e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3304      	adds	r3, #4
 8001a06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2bff      	cmp	r3, #255	; 0xff
 8001a0c:	d802      	bhi.n	8001a14 <HAL_GPIO_Init+0x14c>
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	e002      	b.n	8001a1a <HAL_GPIO_Init+0x152>
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	3b08      	subs	r3, #8
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	210f      	movs	r1, #15
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	6a39      	ldr	r1, [r7, #32]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	fa01 f303 	lsl.w	r3, r1, r3
 8001a34:	431a      	orrs	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 8090 	beq.w	8001b68 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a48:	4b56      	ldr	r3, [pc, #344]	; (8001ba4 <HAL_GPIO_Init+0x2dc>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	4a55      	ldr	r2, [pc, #340]	; (8001ba4 <HAL_GPIO_Init+0x2dc>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6193      	str	r3, [r2, #24]
 8001a54:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <HAL_GPIO_Init+0x2dc>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a60:	4a51      	ldr	r2, [pc, #324]	; (8001ba8 <HAL_GPIO_Init+0x2e0>)
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	089b      	lsrs	r3, r3, #2
 8001a66:	3302      	adds	r3, #2
 8001a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	220f      	movs	r2, #15
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4013      	ands	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a49      	ldr	r2, [pc, #292]	; (8001bac <HAL_GPIO_Init+0x2e4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d00d      	beq.n	8001aa8 <HAL_GPIO_Init+0x1e0>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a48      	ldr	r2, [pc, #288]	; (8001bb0 <HAL_GPIO_Init+0x2e8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d007      	beq.n	8001aa4 <HAL_GPIO_Init+0x1dc>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a47      	ldr	r2, [pc, #284]	; (8001bb4 <HAL_GPIO_Init+0x2ec>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d101      	bne.n	8001aa0 <HAL_GPIO_Init+0x1d8>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e004      	b.n	8001aaa <HAL_GPIO_Init+0x1e2>
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e002      	b.n	8001aaa <HAL_GPIO_Init+0x1e2>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <HAL_GPIO_Init+0x1e2>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aac:	f002 0203 	and.w	r2, r2, #3
 8001ab0:	0092      	lsls	r2, r2, #2
 8001ab2:	4093      	lsls	r3, r2
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aba:	493b      	ldr	r1, [pc, #236]	; (8001ba8 <HAL_GPIO_Init+0x2e0>)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ad4:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4937      	ldr	r1, [pc, #220]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	600b      	str	r3, [r1, #0]
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ae2:	4b35      	ldr	r3, [pc, #212]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4933      	ldr	r1, [pc, #204]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001afc:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	492d      	ldr	r1, [pc, #180]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b0a:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	4929      	ldr	r1, [pc, #164]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	4923      	ldr	r1, [pc, #140]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	608b      	str	r3, [r1, #8]
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b32:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	491f      	ldr	r1, [pc, #124]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d006      	beq.n	8001b5a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	4919      	ldr	r1, [pc, #100]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	60cb      	str	r3, [r1, #12]
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	4915      	ldr	r1, [pc, #84]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f47f aeaf 	bne.w	80018dc <HAL_GPIO_Init+0x14>
  }
}
 8001b7e:	bf00      	nop
 8001b80:	bf00      	nop
 8001b82:	372c      	adds	r7, #44	; 0x2c
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	10320000 	.word	0x10320000
 8001b90:	10310000 	.word	0x10310000
 8001b94:	10220000 	.word	0x10220000
 8001b98:	10210000 	.word	0x10210000
 8001b9c:	10120000 	.word	0x10120000
 8001ba0:	10110000 	.word	0x10110000
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40010000 	.word	0x40010000
 8001bac:	40010800 	.word	0x40010800
 8001bb0:	40010c00 	.word	0x40010c00
 8001bb4:	40011000 	.word	0x40011000
 8001bb8:	40010400 	.word	0x40010400

08001bbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	887b      	ldrh	r3, [r7, #2]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	e001      	b.n	8001bde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	807b      	strh	r3, [r7, #2]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bfa:	787b      	ldrb	r3, [r7, #1]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c00:	887a      	ldrh	r2, [r7, #2]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c06:	e003      	b.n	8001c10 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c08:	887b      	ldrh	r3, [r7, #2]
 8001c0a:	041a      	lsls	r2, r3, #16
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	611a      	str	r2, [r3, #16]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr

08001c1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b085      	sub	sp, #20
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c2c:	887a      	ldrh	r2, [r7, #2]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4013      	ands	r3, r2
 8001c32:	041a      	lsls	r2, r3, #16
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	887b      	ldrh	r3, [r7, #2]
 8001c3a:	400b      	ands	r3, r1
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	611a      	str	r2, [r3, #16]
}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e26c      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8087 	beq.w	8001d7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c6c:	4b92      	ldr	r3, [pc, #584]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d00c      	beq.n	8001c92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c78:	4b8f      	ldr	r3, [pc, #572]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d112      	bne.n	8001caa <HAL_RCC_OscConfig+0x5e>
 8001c84:	4b8c      	ldr	r3, [pc, #560]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c90:	d10b      	bne.n	8001caa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c92:	4b89      	ldr	r3, [pc, #548]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d06c      	beq.n	8001d78 <HAL_RCC_OscConfig+0x12c>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d168      	bne.n	8001d78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e246      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb2:	d106      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x76>
 8001cb4:	4b80      	ldr	r3, [pc, #512]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a7f      	ldr	r2, [pc, #508]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	e02e      	b.n	8001d20 <HAL_RCC_OscConfig+0xd4>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x98>
 8001cca:	4b7b      	ldr	r3, [pc, #492]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a7a      	ldr	r2, [pc, #488]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	4b78      	ldr	r3, [pc, #480]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a77      	ldr	r2, [pc, #476]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e01d      	b.n	8001d20 <HAL_RCC_OscConfig+0xd4>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0xbc>
 8001cee:	4b72      	ldr	r3, [pc, #456]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a71      	ldr	r2, [pc, #452]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b6f      	ldr	r3, [pc, #444]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a6e      	ldr	r2, [pc, #440]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0xd4>
 8001d08:	4b6b      	ldr	r3, [pc, #428]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a6a      	ldr	r2, [pc, #424]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b68      	ldr	r3, [pc, #416]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a67      	ldr	r2, [pc, #412]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d013      	beq.n	8001d50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7ff fcb6 	bl	8001698 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff fcb2 	bl	8001698 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e1fa      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d42:	4b5d      	ldr	r3, [pc, #372]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0xe4>
 8001d4e:	e014      	b.n	8001d7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff fca2 	bl	8001698 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff fc9e 	bl	8001698 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e1e6      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6a:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x10c>
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d063      	beq.n	8001e4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d86:	4b4c      	ldr	r3, [pc, #304]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00b      	beq.n	8001daa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d92:	4b49      	ldr	r3, [pc, #292]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d11c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x18c>
 8001d9e:	4b46      	ldr	r3, [pc, #280]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d116      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001daa:	4b43      	ldr	r3, [pc, #268]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d005      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x176>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d001      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e1ba      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc2:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4939      	ldr	r1, [pc, #228]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd6:	e03a      	b.n	8001e4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d020      	beq.n	8001e22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de0:	4b36      	ldr	r3, [pc, #216]	; (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7ff fc57 	bl	8001698 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dee:	f7ff fc53 	bl	8001698 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e19b      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e00:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4927      	ldr	r1, [pc, #156]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	600b      	str	r3, [r1, #0]
 8001e20:	e015      	b.n	8001e4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e22:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff fc36 	bl	8001698 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e30:	f7ff fc32 	bl	8001698 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e17a      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e42:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d03a      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d019      	beq.n	8001e96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e62:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e68:	f7ff fc16 	bl	8001698 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e70:	f7ff fc12 	bl	8001698 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e15a      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e82:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e8e:	2001      	movs	r0, #1
 8001e90:	f000 faa6 	bl	80023e0 <RCC_Delay>
 8001e94:	e01c      	b.n	8001ed0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9c:	f7ff fbfc 	bl	8001698 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea2:	e00f      	b.n	8001ec4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea4:	f7ff fbf8 	bl	8001698 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d908      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e140      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	42420000 	.word	0x42420000
 8001ec0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec4:	4b9e      	ldr	r3, [pc, #632]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1e9      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80a6 	beq.w	800202a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee2:	4b97      	ldr	r3, [pc, #604]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10d      	bne.n	8001f0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eee:	4b94      	ldr	r3, [pc, #592]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	4a93      	ldr	r2, [pc, #588]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	61d3      	str	r3, [r2, #28]
 8001efa:	4b91      	ldr	r3, [pc, #580]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f06:	2301      	movs	r3, #1
 8001f08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0a:	4b8e      	ldr	r3, [pc, #568]	; (8002144 <HAL_RCC_OscConfig+0x4f8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d118      	bne.n	8001f48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f16:	4b8b      	ldr	r3, [pc, #556]	; (8002144 <HAL_RCC_OscConfig+0x4f8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a8a      	ldr	r2, [pc, #552]	; (8002144 <HAL_RCC_OscConfig+0x4f8>)
 8001f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f22:	f7ff fbb9 	bl	8001698 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2a:	f7ff fbb5 	bl	8001698 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b64      	cmp	r3, #100	; 0x64
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e0fd      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3c:	4b81      	ldr	r3, [pc, #516]	; (8002144 <HAL_RCC_OscConfig+0x4f8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d106      	bne.n	8001f5e <HAL_RCC_OscConfig+0x312>
 8001f50:	4b7b      	ldr	r3, [pc, #492]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4a7a      	ldr	r2, [pc, #488]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6213      	str	r3, [r2, #32]
 8001f5c:	e02d      	b.n	8001fba <HAL_RCC_OscConfig+0x36e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x334>
 8001f66:	4b76      	ldr	r3, [pc, #472]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a75      	ldr	r2, [pc, #468]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	6213      	str	r3, [r2, #32]
 8001f72:	4b73      	ldr	r3, [pc, #460]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4a72      	ldr	r2, [pc, #456]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	f023 0304 	bic.w	r3, r3, #4
 8001f7c:	6213      	str	r3, [r2, #32]
 8001f7e:	e01c      	b.n	8001fba <HAL_RCC_OscConfig+0x36e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b05      	cmp	r3, #5
 8001f86:	d10c      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x356>
 8001f88:	4b6d      	ldr	r3, [pc, #436]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4a6c      	ldr	r2, [pc, #432]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	6213      	str	r3, [r2, #32]
 8001f94:	4b6a      	ldr	r3, [pc, #424]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4a69      	ldr	r2, [pc, #420]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6213      	str	r3, [r2, #32]
 8001fa0:	e00b      	b.n	8001fba <HAL_RCC_OscConfig+0x36e>
 8001fa2:	4b67      	ldr	r3, [pc, #412]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4a66      	ldr	r2, [pc, #408]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	6213      	str	r3, [r2, #32]
 8001fae:	4b64      	ldr	r3, [pc, #400]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4a63      	ldr	r2, [pc, #396]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	f023 0304 	bic.w	r3, r3, #4
 8001fb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d015      	beq.n	8001fee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fb69 	bl	8001698 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7ff fb65 	bl	8001698 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e0ab      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe0:	4b57      	ldr	r3, [pc, #348]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0ee      	beq.n	8001fca <HAL_RCC_OscConfig+0x37e>
 8001fec:	e014      	b.n	8002018 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fee:	f7ff fb53 	bl	8001698 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff4:	e00a      	b.n	800200c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7ff fb4f 	bl	8001698 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	f241 3288 	movw	r2, #5000	; 0x1388
 8002004:	4293      	cmp	r3, r2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e095      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800200c:	4b4c      	ldr	r3, [pc, #304]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1ee      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002018:	7dfb      	ldrb	r3, [r7, #23]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d105      	bne.n	800202a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201e:	4b48      	ldr	r3, [pc, #288]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	4a47      	ldr	r2, [pc, #284]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002028:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 8081 	beq.w	8002136 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002034:	4b42      	ldr	r3, [pc, #264]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b08      	cmp	r3, #8
 800203e:	d061      	beq.n	8002104 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d146      	bne.n	80020d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002048:	4b3f      	ldr	r3, [pc, #252]	; (8002148 <HAL_RCC_OscConfig+0x4fc>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204e:	f7ff fb23 	bl	8001698 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002056:	f7ff fb1f 	bl	8001698 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e067      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002068:	4b35      	ldr	r3, [pc, #212]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f0      	bne.n	8002056 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800207c:	d108      	bne.n	8002090 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800207e:	4b30      	ldr	r3, [pc, #192]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	492d      	ldr	r1, [pc, #180]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002090:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a19      	ldr	r1, [r3, #32]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	430b      	orrs	r3, r1
 80020a2:	4927      	ldr	r1, [pc, #156]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a8:	4b27      	ldr	r3, [pc, #156]	; (8002148 <HAL_RCC_OscConfig+0x4fc>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ae:	f7ff faf3 	bl	8001698 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b6:	f7ff faef 	bl	8001698 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e037      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c8:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0f0      	beq.n	80020b6 <HAL_RCC_OscConfig+0x46a>
 80020d4:	e02f      	b.n	8002136 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d6:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <HAL_RCC_OscConfig+0x4fc>)
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020dc:	f7ff fadc 	bl	8001698 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e4:	f7ff fad8 	bl	8001698 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e020      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x498>
 8002102:	e018      	b.n	8002136 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e013      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	429a      	cmp	r2, r3
 8002122:	d106      	bne.n	8002132 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d001      	beq.n	8002136 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	40007000 	.word	0x40007000
 8002148:	42420060 	.word	0x42420060

0800214c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0d0      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002160:	4b6a      	ldr	r3, [pc, #424]	; (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d910      	bls.n	8002190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b67      	ldr	r3, [pc, #412]	; (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 0207 	bic.w	r2, r3, #7
 8002176:	4965      	ldr	r1, [pc, #404]	; (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b63      	ldr	r3, [pc, #396]	; (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0b8      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d020      	beq.n	80021de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a8:	4b59      	ldr	r3, [pc, #356]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	4a58      	ldr	r2, [pc, #352]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c0:	4b53      	ldr	r3, [pc, #332]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4a52      	ldr	r2, [pc, #328]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021cc:	4b50      	ldr	r3, [pc, #320]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	494d      	ldr	r1, [pc, #308]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d040      	beq.n	800226c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f2:	4b47      	ldr	r3, [pc, #284]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d115      	bne.n	800222a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e07f      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d107      	bne.n	800221a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220a:	4b41      	ldr	r3, [pc, #260]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e073      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221a:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e06b      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800222a:	4b39      	ldr	r3, [pc, #228]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f023 0203 	bic.w	r2, r3, #3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4936      	ldr	r1, [pc, #216]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800223c:	f7ff fa2c 	bl	8001698 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002242:	e00a      	b.n	800225a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002244:	f7ff fa28 	bl	8001698 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e053      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225a:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 020c 	and.w	r2, r3, #12
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	429a      	cmp	r2, r3
 800226a:	d1eb      	bne.n	8002244 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800226c:	4b27      	ldr	r3, [pc, #156]	; (800230c <HAL_RCC_ClockConfig+0x1c0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d210      	bcs.n	800229c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b24      	ldr	r3, [pc, #144]	; (800230c <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 0207 	bic.w	r2, r3, #7
 8002282:	4922      	ldr	r1, [pc, #136]	; (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b20      	ldr	r3, [pc, #128]	; (800230c <HAL_RCC_ClockConfig+0x1c0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e032      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a8:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4916      	ldr	r1, [pc, #88]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	490e      	ldr	r1, [pc, #56]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022da:	f000 f821 	bl	8002320 <HAL_RCC_GetSysClockFreq>
 80022de:	4602      	mov	r2, r0
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	490a      	ldr	r1, [pc, #40]	; (8002314 <HAL_RCC_ClockConfig+0x1c8>)
 80022ec:	5ccb      	ldrb	r3, [r1, r3]
 80022ee:	fa22 f303 	lsr.w	r3, r2, r3
 80022f2:	4a09      	ldr	r2, [pc, #36]	; (8002318 <HAL_RCC_ClockConfig+0x1cc>)
 80022f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <HAL_RCC_ClockConfig+0x1d0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff f98a 	bl	8001614 <HAL_InitTick>

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40022000 	.word	0x40022000
 8002310:	40021000 	.word	0x40021000
 8002314:	08002dc4 	.word	0x08002dc4
 8002318:	20000020 	.word	0x20000020
 800231c:	20000028 	.word	0x20000028

08002320 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002320:	b490      	push	{r4, r7}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002326:	4b2a      	ldr	r3, [pc, #168]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002328:	1d3c      	adds	r4, r7, #4
 800232a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800232c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002330:	f240 2301 	movw	r3, #513	; 0x201
 8002334:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	2300      	movs	r3, #0
 800233c:	61bb      	str	r3, [r7, #24]
 800233e:	2300      	movs	r3, #0
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800234a:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b04      	cmp	r3, #4
 8002358:	d002      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x40>
 800235a:	2b08      	cmp	r3, #8
 800235c:	d003      	beq.n	8002366 <HAL_RCC_GetSysClockFreq+0x46>
 800235e:	e02d      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002360:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002362:	623b      	str	r3, [r7, #32]
      break;
 8002364:	e02d      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	0c9b      	lsrs	r3, r3, #18
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002372:	4413      	add	r3, r2
 8002374:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002378:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d013      	beq.n	80023ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	0c5b      	lsrs	r3, r3, #17
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002392:	4413      	add	r3, r2
 8002394:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002398:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800239e:	fb02 f203 	mul.w	r2, r2, r3
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
 80023aa:	e004      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	4a0b      	ldr	r2, [pc, #44]	; (80023dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	623b      	str	r3, [r7, #32]
      break;
 80023ba:	e002      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023be:	623b      	str	r3, [r7, #32]
      break;
 80023c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023c2:	6a3b      	ldr	r3, [r7, #32]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3728      	adds	r7, #40	; 0x28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc90      	pop	{r4, r7}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	08002d88 	.word	0x08002d88
 80023d4:	40021000 	.word	0x40021000
 80023d8:	007a1200 	.word	0x007a1200
 80023dc:	003d0900 	.word	0x003d0900

080023e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <RCC_Delay+0x34>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <RCC_Delay+0x38>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	0a5b      	lsrs	r3, r3, #9
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	fb02 f303 	mul.w	r3, r2, r3
 80023fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023fc:	bf00      	nop
  }
  while (Delay --);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1e5a      	subs	r2, r3, #1
 8002402:	60fa      	str	r2, [r7, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f9      	bne.n	80023fc <RCC_Delay+0x1c>
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	20000020 	.word	0x20000020
 8002418:	10624dd3 	.word	0x10624dd3

0800241c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e041      	b.n	80024b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fe fc5c 	bl	8000d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3304      	adds	r3, #4
 8002458:	4619      	mov	r1, r3
 800245a:	4610      	mov	r0, r2
 800245c:	f000 fa6a 	bl	8002934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d001      	beq.n	80024d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e035      	b.n	8002540 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a16      	ldr	r2, [pc, #88]	; (800254c <HAL_TIM_Base_Start_IT+0x90>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d009      	beq.n	800250a <HAL_TIM_Base_Start_IT+0x4e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fe:	d004      	beq.n	800250a <HAL_TIM_Base_Start_IT+0x4e>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a12      	ldr	r2, [pc, #72]	; (8002550 <HAL_TIM_Base_Start_IT+0x94>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d111      	bne.n	800252e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b06      	cmp	r3, #6
 800251a:	d010      	beq.n	800253e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252c:	e007      	b.n	800253e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0201 	orr.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40012c00 	.word	0x40012c00
 8002550:	40000400 	.word	0x40000400

08002554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b02      	cmp	r3, #2
 8002568:	d122      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b02      	cmp	r3, #2
 8002576:	d11b      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0202 	mvn.w	r2, #2
 8002580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f9b1 	bl	80028fe <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f9a4 	bl	80028ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f9b3 	bl	8002910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d122      	bne.n	8002604 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d11b      	bne.n	8002604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0204 	mvn.w	r2, #4
 80025d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2202      	movs	r2, #2
 80025da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f987 	bl	80028fe <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f97a 	bl	80028ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f989 	bl	8002910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b08      	cmp	r3, #8
 8002610:	d122      	bne.n	8002658 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b08      	cmp	r3, #8
 800261e:	d11b      	bne.n	8002658 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0208 	mvn.w	r2, #8
 8002628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2204      	movs	r2, #4
 800262e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f95d 	bl	80028fe <HAL_TIM_IC_CaptureCallback>
 8002644:	e005      	b.n	8002652 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f950 	bl	80028ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f95f 	bl	8002910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b10      	cmp	r3, #16
 8002664:	d122      	bne.n	80026ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b10      	cmp	r3, #16
 8002672:	d11b      	bne.n	80026ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0210 	mvn.w	r2, #16
 800267c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2208      	movs	r2, #8
 8002682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f933 	bl	80028fe <HAL_TIM_IC_CaptureCallback>
 8002698:	e005      	b.n	80026a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f926 	bl	80028ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f935 	bl	8002910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10e      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d107      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0201 	mvn.w	r2, #1
 80026d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe fd60 	bl	8001198 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	2b80      	cmp	r3, #128	; 0x80
 80026e4:	d10e      	bne.n	8002704 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f0:	2b80      	cmp	r3, #128	; 0x80
 80026f2:	d107      	bne.n	8002704 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fa67 	bl	8002bd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d10e      	bne.n	8002730 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271c:	2b40      	cmp	r3, #64	; 0x40
 800271e:	d107      	bne.n	8002730 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f8f9 	bl	8002922 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	2b20      	cmp	r3, #32
 800273c:	d10e      	bne.n	800275c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0320 	and.w	r3, r3, #32
 8002748:	2b20      	cmp	r3, #32
 800274a:	d107      	bne.n	800275c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0220 	mvn.w	r2, #32
 8002754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 fa32 	bl	8002bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_TIM_ConfigClockSource+0x18>
 8002778:	2302      	movs	r3, #2
 800277a:	e0b3      	b.n	80028e4 <HAL_TIM_ConfigClockSource+0x180>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2202      	movs	r2, #2
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800279a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b4:	d03e      	beq.n	8002834 <HAL_TIM_ConfigClockSource+0xd0>
 80027b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ba:	f200 8087 	bhi.w	80028cc <HAL_TIM_ConfigClockSource+0x168>
 80027be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c2:	f000 8085 	beq.w	80028d0 <HAL_TIM_ConfigClockSource+0x16c>
 80027c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ca:	d87f      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x168>
 80027cc:	2b70      	cmp	r3, #112	; 0x70
 80027ce:	d01a      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0xa2>
 80027d0:	2b70      	cmp	r3, #112	; 0x70
 80027d2:	d87b      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x168>
 80027d4:	2b60      	cmp	r3, #96	; 0x60
 80027d6:	d050      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x116>
 80027d8:	2b60      	cmp	r3, #96	; 0x60
 80027da:	d877      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x168>
 80027dc:	2b50      	cmp	r3, #80	; 0x50
 80027de:	d03c      	beq.n	800285a <HAL_TIM_ConfigClockSource+0xf6>
 80027e0:	2b50      	cmp	r3, #80	; 0x50
 80027e2:	d873      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x168>
 80027e4:	2b40      	cmp	r3, #64	; 0x40
 80027e6:	d058      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x136>
 80027e8:	2b40      	cmp	r3, #64	; 0x40
 80027ea:	d86f      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x168>
 80027ec:	2b30      	cmp	r3, #48	; 0x30
 80027ee:	d064      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x156>
 80027f0:	2b30      	cmp	r3, #48	; 0x30
 80027f2:	d86b      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x168>
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d060      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x156>
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d867      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x168>
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d05c      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x156>
 8002800:	2b10      	cmp	r3, #16
 8002802:	d05a      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002804:	e062      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6899      	ldr	r1, [r3, #8]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f000 f95c 	bl	8002ad2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002828:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	609a      	str	r2, [r3, #8]
      break;
 8002832:	e04e      	b.n	80028d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6899      	ldr	r1, [r3, #8]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f000 f945 	bl	8002ad2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002856:	609a      	str	r2, [r3, #8]
      break;
 8002858:	e03b      	b.n	80028d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6859      	ldr	r1, [r3, #4]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	461a      	mov	r2, r3
 8002868:	f000 f8bc 	bl	80029e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2150      	movs	r1, #80	; 0x50
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f913 	bl	8002a9e <TIM_ITRx_SetConfig>
      break;
 8002878:	e02b      	b.n	80028d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	461a      	mov	r2, r3
 8002888:	f000 f8da 	bl	8002a40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2160      	movs	r1, #96	; 0x60
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f903 	bl	8002a9e <TIM_ITRx_SetConfig>
      break;
 8002898:	e01b      	b.n	80028d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6818      	ldr	r0, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6859      	ldr	r1, [r3, #4]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	461a      	mov	r2, r3
 80028a8:	f000 f89c 	bl	80029e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2140      	movs	r1, #64	; 0x40
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 f8f3 	bl	8002a9e <TIM_ITRx_SetConfig>
      break;
 80028b8:	e00b      	b.n	80028d2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4619      	mov	r1, r3
 80028c4:	4610      	mov	r0, r2
 80028c6:	f000 f8ea 	bl	8002a9e <TIM_ITRx_SetConfig>
        break;
 80028ca:	e002      	b.n	80028d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028cc:	bf00      	nop
 80028ce:	e000      	b.n	80028d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a25      	ldr	r2, [pc, #148]	; (80029dc <TIM_Base_SetConfig+0xa8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d007      	beq.n	800295c <TIM_Base_SetConfig+0x28>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002952:	d003      	beq.n	800295c <TIM_Base_SetConfig+0x28>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a22      	ldr	r2, [pc, #136]	; (80029e0 <TIM_Base_SetConfig+0xac>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d108      	bne.n	800296e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a1a      	ldr	r2, [pc, #104]	; (80029dc <TIM_Base_SetConfig+0xa8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d007      	beq.n	8002986 <TIM_Base_SetConfig+0x52>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297c:	d003      	beq.n	8002986 <TIM_Base_SetConfig+0x52>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <TIM_Base_SetConfig+0xac>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d108      	bne.n	8002998 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4313      	orrs	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a07      	ldr	r2, [pc, #28]	; (80029dc <TIM_Base_SetConfig+0xa8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d103      	bne.n	80029cc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	615a      	str	r2, [r3, #20]
}
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	40012c00 	.word	0x40012c00
 80029e0:	40000400 	.word	0x40000400

080029e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	f023 0201 	bic.w	r2, r3, #1
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f023 030a 	bic.w	r3, r3, #10
 8002a20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	621a      	str	r2, [r3, #32]
}
 8002a36:	bf00      	nop
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f023 0210 	bic.w	r2, r3, #16
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	031b      	lsls	r3, r3, #12
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	621a      	str	r2, [r3, #32]
}
 8002a94:	bf00      	nop
 8002a96:	371c      	adds	r7, #28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f043 0307 	orr.w	r3, r3, #7
 8002ac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	609a      	str	r2, [r3, #8]
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b087      	sub	sp, #28
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	021a      	lsls	r2, r3, #8
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	609a      	str	r2, [r3, #8]
}
 8002b06:	bf00      	nop
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e041      	b.n	8002bac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a14      	ldr	r2, [pc, #80]	; (8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d009      	beq.n	8002b80 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b74:	d004      	beq.n	8002b80 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a10      	ldr	r2, [pc, #64]	; (8002bbc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d10c      	bne.n	8002b9a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40012c00 	.word	0x40012c00
 8002bbc:	40000400 	.word	0x40000400

08002bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <__errno>:
 8002be4:	4b01      	ldr	r3, [pc, #4]	; (8002bec <__errno+0x8>)
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000030 	.word	0x20000030

08002bf0 <exit>:
 8002bf0:	b508      	push	{r3, lr}
 8002bf2:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <exit+0x20>)
 8002bf4:	4604      	mov	r4, r0
 8002bf6:	b113      	cbz	r3, 8002bfe <exit+0xe>
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	f3af 8000 	nop.w
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <exit+0x24>)
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002c04:	b103      	cbz	r3, 8002c08 <exit+0x18>
 8002c06:	4798      	blx	r3
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f7fe f8df 	bl	8000dcc <_exit>
 8002c0e:	bf00      	nop
 8002c10:	00000000 	.word	0x00000000
 8002c14:	08002dd4 	.word	0x08002dd4

08002c18 <__libc_init_array>:
 8002c18:	b570      	push	{r4, r5, r6, lr}
 8002c1a:	2600      	movs	r6, #0
 8002c1c:	4d0c      	ldr	r5, [pc, #48]	; (8002c50 <__libc_init_array+0x38>)
 8002c1e:	4c0d      	ldr	r4, [pc, #52]	; (8002c54 <__libc_init_array+0x3c>)
 8002c20:	1b64      	subs	r4, r4, r5
 8002c22:	10a4      	asrs	r4, r4, #2
 8002c24:	42a6      	cmp	r6, r4
 8002c26:	d109      	bne.n	8002c3c <__libc_init_array+0x24>
 8002c28:	f000 f8a2 	bl	8002d70 <_init>
 8002c2c:	2600      	movs	r6, #0
 8002c2e:	4d0a      	ldr	r5, [pc, #40]	; (8002c58 <__libc_init_array+0x40>)
 8002c30:	4c0a      	ldr	r4, [pc, #40]	; (8002c5c <__libc_init_array+0x44>)
 8002c32:	1b64      	subs	r4, r4, r5
 8002c34:	10a4      	asrs	r4, r4, #2
 8002c36:	42a6      	cmp	r6, r4
 8002c38:	d105      	bne.n	8002c46 <__libc_init_array+0x2e>
 8002c3a:	bd70      	pop	{r4, r5, r6, pc}
 8002c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c40:	4798      	blx	r3
 8002c42:	3601      	adds	r6, #1
 8002c44:	e7ee      	b.n	8002c24 <__libc_init_array+0xc>
 8002c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c4a:	4798      	blx	r3
 8002c4c:	3601      	adds	r6, #1
 8002c4e:	e7f2      	b.n	8002c36 <__libc_init_array+0x1e>
 8002c50:	08002dd8 	.word	0x08002dd8
 8002c54:	08002dd8 	.word	0x08002dd8
 8002c58:	08002dd8 	.word	0x08002dd8
 8002c5c:	08002ddc 	.word	0x08002ddc

08002c60 <malloc>:
 8002c60:	4b02      	ldr	r3, [pc, #8]	; (8002c6c <malloc+0xc>)
 8002c62:	4601      	mov	r1, r0
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	f000 b80b 	b.w	8002c80 <_malloc_r>
 8002c6a:	bf00      	nop
 8002c6c:	20000030 	.word	0x20000030

08002c70 <memset>:
 8002c70:	4603      	mov	r3, r0
 8002c72:	4402      	add	r2, r0
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d100      	bne.n	8002c7a <memset+0xa>
 8002c78:	4770      	bx	lr
 8002c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c7e:	e7f9      	b.n	8002c74 <memset+0x4>

08002c80 <_malloc_r>:
 8002c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c82:	1ccd      	adds	r5, r1, #3
 8002c84:	f025 0503 	bic.w	r5, r5, #3
 8002c88:	3508      	adds	r5, #8
 8002c8a:	2d0c      	cmp	r5, #12
 8002c8c:	bf38      	it	cc
 8002c8e:	250c      	movcc	r5, #12
 8002c90:	2d00      	cmp	r5, #0
 8002c92:	4606      	mov	r6, r0
 8002c94:	db01      	blt.n	8002c9a <_malloc_r+0x1a>
 8002c96:	42a9      	cmp	r1, r5
 8002c98:	d903      	bls.n	8002ca2 <_malloc_r+0x22>
 8002c9a:	230c      	movs	r3, #12
 8002c9c:	6033      	str	r3, [r6, #0]
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ca2:	f000 f857 	bl	8002d54 <__malloc_lock>
 8002ca6:	4921      	ldr	r1, [pc, #132]	; (8002d2c <_malloc_r+0xac>)
 8002ca8:	680a      	ldr	r2, [r1, #0]
 8002caa:	4614      	mov	r4, r2
 8002cac:	b99c      	cbnz	r4, 8002cd6 <_malloc_r+0x56>
 8002cae:	4f20      	ldr	r7, [pc, #128]	; (8002d30 <_malloc_r+0xb0>)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	b923      	cbnz	r3, 8002cbe <_malloc_r+0x3e>
 8002cb4:	4621      	mov	r1, r4
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	f000 f83c 	bl	8002d34 <_sbrk_r>
 8002cbc:	6038      	str	r0, [r7, #0]
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	4630      	mov	r0, r6
 8002cc2:	f000 f837 	bl	8002d34 <_sbrk_r>
 8002cc6:	1c43      	adds	r3, r0, #1
 8002cc8:	d123      	bne.n	8002d12 <_malloc_r+0x92>
 8002cca:	230c      	movs	r3, #12
 8002ccc:	4630      	mov	r0, r6
 8002cce:	6033      	str	r3, [r6, #0]
 8002cd0:	f000 f846 	bl	8002d60 <__malloc_unlock>
 8002cd4:	e7e3      	b.n	8002c9e <_malloc_r+0x1e>
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	1b5b      	subs	r3, r3, r5
 8002cda:	d417      	bmi.n	8002d0c <_malloc_r+0x8c>
 8002cdc:	2b0b      	cmp	r3, #11
 8002cde:	d903      	bls.n	8002ce8 <_malloc_r+0x68>
 8002ce0:	6023      	str	r3, [r4, #0]
 8002ce2:	441c      	add	r4, r3
 8002ce4:	6025      	str	r5, [r4, #0]
 8002ce6:	e004      	b.n	8002cf2 <_malloc_r+0x72>
 8002ce8:	6863      	ldr	r3, [r4, #4]
 8002cea:	42a2      	cmp	r2, r4
 8002cec:	bf0c      	ite	eq
 8002cee:	600b      	streq	r3, [r1, #0]
 8002cf0:	6053      	strne	r3, [r2, #4]
 8002cf2:	4630      	mov	r0, r6
 8002cf4:	f000 f834 	bl	8002d60 <__malloc_unlock>
 8002cf8:	f104 000b 	add.w	r0, r4, #11
 8002cfc:	1d23      	adds	r3, r4, #4
 8002cfe:	f020 0007 	bic.w	r0, r0, #7
 8002d02:	1ac2      	subs	r2, r0, r3
 8002d04:	d0cc      	beq.n	8002ca0 <_malloc_r+0x20>
 8002d06:	1a1b      	subs	r3, r3, r0
 8002d08:	50a3      	str	r3, [r4, r2]
 8002d0a:	e7c9      	b.n	8002ca0 <_malloc_r+0x20>
 8002d0c:	4622      	mov	r2, r4
 8002d0e:	6864      	ldr	r4, [r4, #4]
 8002d10:	e7cc      	b.n	8002cac <_malloc_r+0x2c>
 8002d12:	1cc4      	adds	r4, r0, #3
 8002d14:	f024 0403 	bic.w	r4, r4, #3
 8002d18:	42a0      	cmp	r0, r4
 8002d1a:	d0e3      	beq.n	8002ce4 <_malloc_r+0x64>
 8002d1c:	1a21      	subs	r1, r4, r0
 8002d1e:	4630      	mov	r0, r6
 8002d20:	f000 f808 	bl	8002d34 <_sbrk_r>
 8002d24:	3001      	adds	r0, #1
 8002d26:	d1dd      	bne.n	8002ce4 <_malloc_r+0x64>
 8002d28:	e7cf      	b.n	8002cca <_malloc_r+0x4a>
 8002d2a:	bf00      	nop
 8002d2c:	20000110 	.word	0x20000110
 8002d30:	20000114 	.word	0x20000114

08002d34 <_sbrk_r>:
 8002d34:	b538      	push	{r3, r4, r5, lr}
 8002d36:	2300      	movs	r3, #0
 8002d38:	4d05      	ldr	r5, [pc, #20]	; (8002d50 <_sbrk_r+0x1c>)
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	4608      	mov	r0, r1
 8002d3e:	602b      	str	r3, [r5, #0]
 8002d40:	f7fe f84e 	bl	8000de0 <_sbrk>
 8002d44:	1c43      	adds	r3, r0, #1
 8002d46:	d102      	bne.n	8002d4e <_sbrk_r+0x1a>
 8002d48:	682b      	ldr	r3, [r5, #0]
 8002d4a:	b103      	cbz	r3, 8002d4e <_sbrk_r+0x1a>
 8002d4c:	6023      	str	r3, [r4, #0]
 8002d4e:	bd38      	pop	{r3, r4, r5, pc}
 8002d50:	20000170 	.word	0x20000170

08002d54 <__malloc_lock>:
 8002d54:	4801      	ldr	r0, [pc, #4]	; (8002d5c <__malloc_lock+0x8>)
 8002d56:	f000 b809 	b.w	8002d6c <__retarget_lock_acquire_recursive>
 8002d5a:	bf00      	nop
 8002d5c:	20000178 	.word	0x20000178

08002d60 <__malloc_unlock>:
 8002d60:	4801      	ldr	r0, [pc, #4]	; (8002d68 <__malloc_unlock+0x8>)
 8002d62:	f000 b804 	b.w	8002d6e <__retarget_lock_release_recursive>
 8002d66:	bf00      	nop
 8002d68:	20000178 	.word	0x20000178

08002d6c <__retarget_lock_acquire_recursive>:
 8002d6c:	4770      	bx	lr

08002d6e <__retarget_lock_release_recursive>:
 8002d6e:	4770      	bx	lr

08002d70 <_init>:
 8002d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d72:	bf00      	nop
 8002d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d76:	bc08      	pop	{r3}
 8002d78:	469e      	mov	lr, r3
 8002d7a:	4770      	bx	lr

08002d7c <_fini>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	bf00      	nop
 8002d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d82:	bc08      	pop	{r3}
 8002d84:	469e      	mov	lr, r3
 8002d86:	4770      	bx	lr
