
chapter3OOP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002d28  08002d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d74  08002d74  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002d74  08002d74  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d74  08002d74  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d74  08002d74  00012d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d78  08002d78  00012d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000090  08002e0c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08002e0c  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1e0  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267e  00000000  00000000  0002f299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00031918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  00032498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d79  00000000  00000000  00032ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da88  00000000  00000000  0004bc69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087c66  00000000  00000000  000596f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1357  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f70  00000000  00000000  000e13ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d10 	.word	0x08002d10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08002d10 	.word	0x08002d10

0800014c <copyArray>:
 *      Author: fhdtr
 */

#include "functionality.h"

void copyArray(uint8_t* from, uint8_t* to, int n) {
 800014c:	b480      	push	{r7}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < n; i++) {
 8000158:	2300      	movs	r3, #0
 800015a:	617b      	str	r3, [r7, #20]
 800015c:	e00a      	b.n	8000174 <copyArray+0x28>
		to[i] = from[i];
 800015e:	697b      	ldr	r3, [r7, #20]
 8000160:	68fa      	ldr	r2, [r7, #12]
 8000162:	441a      	add	r2, r3
 8000164:	697b      	ldr	r3, [r7, #20]
 8000166:	68b9      	ldr	r1, [r7, #8]
 8000168:	440b      	add	r3, r1
 800016a:	7812      	ldrb	r2, [r2, #0]
 800016c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < n; i++) {
 800016e:	697b      	ldr	r3, [r7, #20]
 8000170:	3301      	adds	r3, #1
 8000172:	617b      	str	r3, [r7, #20]
 8000174:	697a      	ldr	r2, [r7, #20]
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	429a      	cmp	r2, r3
 800017a:	dbf0      	blt.n	800015e <copyArray+0x12>
	}
}
 800017c:	bf00      	nop
 800017e:	bf00      	nop
 8000180:	371c      	adds	r7, #28
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr

08000188 <init_fsm_input_processing>:
  * @retval None
  *
  */


void init_fsm_input_processing(TIM_HandleTypeDef* htim) {
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
	init_timer(htim, NO_OF_SEC_TIMERS, NO_OF_MIL_TIMERS);
 8000190:	2302      	movs	r3, #2
 8000192:	2202      	movs	r2, #2
 8000194:	4619      	mov	r1, r3
 8000196:	6878      	ldr	r0, [r7, #4]
 8000198:	f000 fe2c 	bl	8000df4 <init_timer>
	init_led7(seg7_en, seg7_port, buffer_led7, NO_OF_LED7);
 800019c:	2304      	movs	r3, #4
 800019e:	4a14      	ldr	r2, [pc, #80]	; (80001f0 <init_fsm_input_processing+0x68>)
 80001a0:	4914      	ldr	r1, [pc, #80]	; (80001f4 <init_fsm_input_processing+0x6c>)
 80001a2:	4815      	ldr	r0, [pc, #84]	; (80001f8 <init_fsm_input_processing+0x70>)
 80001a4:	f000 fb88 	bl	80008b8 <init_led7>
	init_button_reading(button_port, NO_OF_BUTTONS);
 80001a8:	2102      	movs	r1, #2
 80001aa:	4814      	ldr	r0, [pc, #80]	; (80001fc <init_fsm_input_processing+0x74>)
 80001ac:	f000 fac4 	bl	8000738 <init_button_reading>
	init_traffic(traffic_port, traffic_time, traffic_time_update);
 80001b0:	4a13      	ldr	r2, [pc, #76]	; (8000200 <init_fsm_input_processing+0x78>)
 80001b2:	4914      	ldr	r1, [pc, #80]	; (8000204 <init_fsm_input_processing+0x7c>)
 80001b4:	4814      	ldr	r0, [pc, #80]	; (8000208 <init_fsm_input_processing+0x80>)
 80001b6:	f001 f83d 	bl	8001234 <init_traffic>



	buttonState = (ButtonState*)malloc(NO_OF_BUTTONS*sizeof(ButtonState));
 80001ba:	2002      	movs	r0, #2
 80001bc:	f002 fd20 	bl	8002c00 <malloc>
 80001c0:	4603      	mov	r3, r0
 80001c2:	461a      	mov	r2, r3
 80001c4:	4b11      	ldr	r3, [pc, #68]	; (800020c <init_fsm_input_processing+0x84>)
 80001c6:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 80001c8:	2300      	movs	r3, #0
 80001ca:	60fb      	str	r3, [r7, #12]
 80001cc:	e008      	b.n	80001e0 <init_fsm_input_processing+0x58>
		 buttonState[i] = STATE_RELEASED;
 80001ce:	4b0f      	ldr	r3, [pc, #60]	; (800020c <init_fsm_input_processing+0x84>)
 80001d0:	681a      	ldr	r2, [r3, #0]
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	4413      	add	r3, r2
 80001d6:	2200      	movs	r2, #0
 80001d8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	3301      	adds	r3, #1
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	ddf3      	ble.n	80001ce <init_fsm_input_processing+0x46>
	}


}
 80001e6:	bf00      	nop
 80001e8:	bf00      	nop
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	08002d38 	.word	0x08002d38
 80001f8:	08002d48 	.word	0x08002d48
 80001fc:	08002d50 	.word	0x08002d50
 8000200:	2000000c 	.word	0x2000000c
 8000204:	20000004 	.word	0x20000004
 8000208:	08002d54 	.word	0x08002d54
 800020c:	20000114 	.word	0x20000114

08000210 <fsm_for_input_processing>:
  * @note   None
  *
  * @param  None
  * @retval None
  */
void fsm_for_input_processing(void) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 8000216:	2300      	movs	r3, #0
 8000218:	607b      	str	r3, [r7, #4]
 800021a:	e032      	b.n	8000282 <fsm_for_input_processing+0x72>
		switch(buttonState[i]) {
 800021c:	4b1d      	ldr	r3, [pc, #116]	; (8000294 <fsm_for_input_processing+0x84>)
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4413      	add	r3, r2
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d002      	beq.n	8000230 <fsm_for_input_processing+0x20>
 800022a:	2b01      	cmp	r3, #1
 800022c:	d00f      	beq.n	800024e <fsm_for_input_processing+0x3e>
 800022e:	e025      	b.n	800027c <fsm_for_input_processing+0x6c>
		case STATE_RELEASED:
			if(is_button_pressed(i)) {
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	b2db      	uxtb	r3, r3
 8000234:	4618      	mov	r0, r3
 8000236:	f000 fb1f 	bl	8000878 <is_button_pressed>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d01a      	beq.n	8000276 <fsm_for_input_processing+0x66>
				buttonState[i] = STATE_PRESSED;
 8000240:	4b14      	ldr	r3, [pc, #80]	; (8000294 <fsm_for_input_processing+0x84>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4413      	add	r3, r2
 8000248:	2201      	movs	r2, #1
 800024a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800024c:	e013      	b.n	8000276 <fsm_for_input_processing+0x66>
		case STATE_PRESSED:
			if(!is_button_pressed(i)) {
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	b2db      	uxtb	r3, r3
 8000252:	4618      	mov	r0, r3
 8000254:	f000 fb10 	bl	8000878 <is_button_pressed>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d10d      	bne.n	800027a <fsm_for_input_processing+0x6a>
				buttonState[i] = STATE_RELEASED;
 800025e:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <fsm_for_input_processing+0x84>)
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4413      	add	r3, r2
 8000266:	2200      	movs	r2, #0
 8000268:	701a      	strb	r2, [r3, #0]
				process(i);
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f864 	bl	800033c <process>
			}
			break;
 8000274:	e001      	b.n	800027a <fsm_for_input_processing+0x6a>
			break;
 8000276:	bf00      	nop
 8000278:	e000      	b.n	800027c <fsm_for_input_processing+0x6c>
			break;
 800027a:	bf00      	nop
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3301      	adds	r3, #1
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2b01      	cmp	r3, #1
 8000286:	ddc9      	ble.n	800021c <fsm_for_input_processing+0xc>
		}
	}
}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	20000114 	.word	0x20000114

08000298 <fsm_for_traffic_control>:

void fsm_for_traffic_control(void) {
 8000298:	b598      	push	{r3, r4, r7, lr}
 800029a:	af00      	add	r7, sp, #0
	switch(trafficMode) {
 800029c:	4b25      	ldr	r3, [pc, #148]	; (8000334 <fsm_for_traffic_control+0x9c>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b07      	cmp	r3, #7
 80002a2:	d843      	bhi.n	800032c <fsm_for_traffic_control+0x94>
 80002a4:	a201      	add	r2, pc, #4	; (adr r2, 80002ac <fsm_for_traffic_control+0x14>)
 80002a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002aa:	bf00      	nop
 80002ac:	080002cd 	.word	0x080002cd
 80002b0:	080002ef 	.word	0x080002ef
 80002b4:	080002ef 	.word	0x080002ef
 80002b8:	080002ef 	.word	0x080002ef
 80002bc:	08000307 	.word	0x08000307
 80002c0:	08000307 	.word	0x08000307
 80002c4:	08000307 	.word	0x08000307
 80002c8:	0800031f 	.word	0x0800031f
	case NORMAL:
		traffic_display();
 80002cc:	f001 f804 	bl	80012d8 <traffic_display>
		setBufferLed7(getSecCounter(TRAFFIC_VER_TIMER), getSecCounter(TRAFFIC_HOR_TIMER));
 80002d0:	2000      	movs	r0, #0
 80002d2:	f000 fef1 	bl	80010b8 <getSecCounter>
 80002d6:	4603      	mov	r3, r0
 80002d8:	b2dc      	uxtb	r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	f000 feec 	bl	80010b8 <getSecCounter>
 80002e0:	4603      	mov	r3, r0
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	4619      	mov	r1, r3
 80002e6:	4620      	mov	r0, r4
 80002e8:	f000 f894 	bl	8000414 <setBufferLed7>
		break;
 80002ec:	e01e      	b.n	800032c <fsm_for_traffic_control+0x94>
	case PLUS_RED:
	case PLUS_GREEN:
	case PLUS_YELLOW:
		setBufferLed7(traffic_time_update[trafficMode-1], 2);
 80002ee:	4b11      	ldr	r3, [pc, #68]	; (8000334 <fsm_for_traffic_control+0x9c>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	3b01      	subs	r3, #1
 80002f4:	4a10      	ldr	r2, [pc, #64]	; (8000338 <fsm_for_traffic_control+0xa0>)
 80002f6:	5cd3      	ldrb	r3, [r2, r3]
 80002f8:	2102      	movs	r1, #2
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 f88a 	bl	8000414 <setBufferLed7>
		blinkTraffic();
 8000300:	f000 f9ce 	bl	80006a0 <blinkTraffic>
		break;
 8000304:	e012      	b.n	800032c <fsm_for_traffic_control+0x94>
	case MINUS_RED:
	case MINUS_GREEN:
	case MINUS_YELLOW:
		setBufferLed7(traffic_time_update[trafficMode-4], 3);
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <fsm_for_traffic_control+0x9c>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	3b04      	subs	r3, #4
 800030c:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <fsm_for_traffic_control+0xa0>)
 800030e:	5cd3      	ldrb	r3, [r2, r3]
 8000310:	2103      	movs	r1, #3
 8000312:	4618      	mov	r0, r3
 8000314:	f000 f87e 	bl	8000414 <setBufferLed7>
		blinkTraffic();
 8000318:	f000 f9c2 	bl	80006a0 <blinkTraffic>
		break;
 800031c:	e006      	b.n	800032c <fsm_for_traffic_control+0x94>
	case CONFIRM:
		setBufferLed7(4, 4);
 800031e:	2104      	movs	r1, #4
 8000320:	2004      	movs	r0, #4
 8000322:	f000 f877 	bl	8000414 <setBufferLed7>
		blinkTraffic();
 8000326:	f000 f9bb 	bl	80006a0 <blinkTraffic>
		break;
 800032a:	bf00      	nop
	}
	scanLed7();
 800032c:	f000 f8ae 	bl	800048c <scanLed7>
}
 8000330:	bf00      	nop
 8000332:	bd98      	pop	{r3, r4, r7, pc}
 8000334:	200000ac 	.word	0x200000ac
 8000338:	2000000c 	.word	0x2000000c

0800033c <process>:

void process(ButtonArrayAccess button) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
	static uint8_t updateFlag = 0;
	switch(button) {
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d002      	beq.n	8000352 <process+0x16>
 800034c:	2b01      	cmp	r3, #1
 800034e:	d037      	beq.n	80003c0 <process+0x84>
		default:
			break;
		}
		break;
	}
}
 8000350:	e053      	b.n	80003fa <process+0xbe>
		switch(trafficMode) {
 8000352:	4b2c      	ldr	r3, [pc, #176]	; (8000404 <process+0xc8>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d002      	beq.n	8000360 <process+0x24>
 800035a:	2b07      	cmp	r3, #7
 800035c:	d009      	beq.n	8000372 <process+0x36>
			break;
 800035e:	e01f      	b.n	80003a0 <process+0x64>
			controlSecTimer(TRAFFIC_VER_TIMER, STOP_TIMER);
 8000360:	2101      	movs	r1, #1
 8000362:	2000      	movs	r0, #0
 8000364:	f000 fed0 	bl	8001108 <controlSecTimer>
			controlSecTimer(TRAFFIC_HOR_TIMER, STOP_TIMER);
 8000368:	2101      	movs	r1, #1
 800036a:	2001      	movs	r0, #1
 800036c:	f000 fecc 	bl	8001108 <controlSecTimer>
			break;
 8000370:	e017      	b.n	80003a2 <process+0x66>
			if(updateFlag) {
 8000372:	4b25      	ldr	r3, [pc, #148]	; (8000408 <process+0xcc>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d005      	beq.n	8000386 <process+0x4a>
				updateFlag = 0;
 800037a:	4b23      	ldr	r3, [pc, #140]	; (8000408 <process+0xcc>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
				updateNextPeriod();
 8000380:	f001 f8d0 	bl	8001524 <updateNextPeriod>
 8000384:	e004      	b.n	8000390 <process+0x54>
				copyArray(traffic_time, traffic_time_update, 6);
 8000386:	2206      	movs	r2, #6
 8000388:	4920      	ldr	r1, [pc, #128]	; (800040c <process+0xd0>)
 800038a:	4821      	ldr	r0, [pc, #132]	; (8000410 <process+0xd4>)
 800038c:	f7ff fede 	bl	800014c <copyArray>
			controlSecTimer(TRAFFIC_VER_TIMER, START_TIMER);
 8000390:	2100      	movs	r1, #0
 8000392:	2000      	movs	r0, #0
 8000394:	f000 feb8 	bl	8001108 <controlSecTimer>
			controlSecTimer(TRAFFIC_HOR_TIMER, START_TIMER);
 8000398:	2100      	movs	r1, #0
 800039a:	2001      	movs	r0, #1
 800039c:	f000 feb4 	bl	8001108 <controlSecTimer>
			break;
 80003a0:	bf00      	nop
		clearTraffic();
 80003a2:	f001 f89d 	bl	80014e0 <clearTraffic>
		trafficMode = (trafficMode != CONFIRM)? trafficMode+1 : NORMAL;
 80003a6:	4b17      	ldr	r3, [pc, #92]	; (8000404 <process+0xc8>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2b07      	cmp	r3, #7
 80003ac:	d004      	beq.n	80003b8 <process+0x7c>
 80003ae:	4b15      	ldr	r3, [pc, #84]	; (8000404 <process+0xc8>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	3301      	adds	r3, #1
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	e000      	b.n	80003ba <process+0x7e>
 80003b8:	2300      	movs	r3, #0
 80003ba:	4a12      	ldr	r2, [pc, #72]	; (8000404 <process+0xc8>)
 80003bc:	7013      	strb	r3, [r2, #0]
		break;
 80003be:	e01c      	b.n	80003fa <process+0xbe>
		switch(trafficMode) {
 80003c0:	4b10      	ldr	r3, [pc, #64]	; (8000404 <process+0xc8>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b07      	cmp	r3, #7
 80003c6:	d012      	beq.n	80003ee <process+0xb2>
 80003c8:	2b07      	cmp	r3, #7
 80003ca:	dc14      	bgt.n	80003f6 <process+0xba>
 80003cc:	2b03      	cmp	r3, #3
 80003ce:	dc02      	bgt.n	80003d6 <process+0x9a>
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	dc04      	bgt.n	80003de <process+0xa2>
			break;
 80003d4:	e00f      	b.n	80003f6 <process+0xba>
 80003d6:	3b04      	subs	r3, #4
 80003d8:	2b02      	cmp	r3, #2
 80003da:	d80c      	bhi.n	80003f6 <process+0xba>
 80003dc:	e003      	b.n	80003e6 <process+0xaa>
			increase(traffic_time_update);
 80003de:	480b      	ldr	r0, [pc, #44]	; (800040c <process+0xd0>)
 80003e0:	f000 f876 	bl	80004d0 <increase>
			break;
 80003e4:	e008      	b.n	80003f8 <process+0xbc>
			decrease(traffic_time_update);
 80003e6:	4809      	ldr	r0, [pc, #36]	; (800040c <process+0xd0>)
 80003e8:	f000 f8e6 	bl	80005b8 <decrease>
			break;
 80003ec:	e004      	b.n	80003f8 <process+0xbc>
			updateFlag = 1;
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <process+0xcc>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	701a      	strb	r2, [r3, #0]
			break;
 80003f4:	e000      	b.n	80003f8 <process+0xbc>
			break;
 80003f6:	bf00      	nop
		break;
 80003f8:	bf00      	nop
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	200000ac 	.word	0x200000ac
 8000408:	200000ad 	.word	0x200000ad
 800040c:	2000000c 	.word	0x2000000c
 8000410:	20000004 	.word	0x20000004

08000414 <setBufferLed7>:


void setBufferLed7(uint8_t firstPair, uint8_t secondPair) {
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	460a      	mov	r2, r1
 800041e:	71fb      	strb	r3, [r7, #7]
 8000420:	4613      	mov	r3, r2
 8000422:	71bb      	strb	r3, [r7, #6]
	buffer_led7[0] = firstPair / 10;
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	4a17      	ldr	r2, [pc, #92]	; (8000484 <setBufferLed7+0x70>)
 8000428:	fba2 2303 	umull	r2, r3, r2, r3
 800042c:	08db      	lsrs	r3, r3, #3
 800042e:	b2da      	uxtb	r2, r3
 8000430:	4b15      	ldr	r3, [pc, #84]	; (8000488 <setBufferLed7+0x74>)
 8000432:	701a      	strb	r2, [r3, #0]
	buffer_led7[1] = firstPair % 10;
 8000434:	79fa      	ldrb	r2, [r7, #7]
 8000436:	4b13      	ldr	r3, [pc, #76]	; (8000484 <setBufferLed7+0x70>)
 8000438:	fba3 1302 	umull	r1, r3, r3, r2
 800043c:	08d9      	lsrs	r1, r3, #3
 800043e:	460b      	mov	r3, r1
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	440b      	add	r3, r1
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	1ad3      	subs	r3, r2, r3
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <setBufferLed7+0x74>)
 800044c:	705a      	strb	r2, [r3, #1]
	buffer_led7[2] = secondPair / 10;
 800044e:	79bb      	ldrb	r3, [r7, #6]
 8000450:	4a0c      	ldr	r2, [pc, #48]	; (8000484 <setBufferLed7+0x70>)
 8000452:	fba2 2303 	umull	r2, r3, r2, r3
 8000456:	08db      	lsrs	r3, r3, #3
 8000458:	b2da      	uxtb	r2, r3
 800045a:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <setBufferLed7+0x74>)
 800045c:	709a      	strb	r2, [r3, #2]
	buffer_led7[3] = secondPair % 10;
 800045e:	79ba      	ldrb	r2, [r7, #6]
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <setBufferLed7+0x70>)
 8000462:	fba3 1302 	umull	r1, r3, r3, r2
 8000466:	08d9      	lsrs	r1, r3, #3
 8000468:	460b      	mov	r3, r1
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	440b      	add	r3, r1
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	1ad3      	subs	r3, r2, r3
 8000472:	b2da      	uxtb	r2, r3
 8000474:	4b04      	ldr	r3, [pc, #16]	; (8000488 <setBufferLed7+0x74>)
 8000476:	70da      	strb	r2, [r3, #3]
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	cccccccd 	.word	0xcccccccd
 8000488:	20000000 	.word	0x20000000

0800048c <scanLed7>:

void scanLed7() {
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	static uint8_t index = 0;

	if(getMilFlag(SCAN_TIMER)) {
 8000490:	2000      	movs	r0, #0
 8000492:	f000 fdd9 	bl	8001048 <getMilFlag>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d014      	beq.n	80004c6 <scanLed7+0x3a>
		setMilTimer(SCAN_TIMER, scanTime);
 800049c:	23fa      	movs	r3, #250	; 0xfa
 800049e:	4619      	mov	r1, r3
 80004a0:	2000      	movs	r0, #0
 80004a2:	f000 fd51 	bl	8000f48 <setMilTimer>
		display_7SEG(index++);
 80004a6:	4b09      	ldr	r3, [pc, #36]	; (80004cc <scanLed7+0x40>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	1c5a      	adds	r2, r3, #1
 80004ac:	b2d1      	uxtb	r1, r2
 80004ae:	4a07      	ldr	r2, [pc, #28]	; (80004cc <scanLed7+0x40>)
 80004b0:	7011      	strb	r1, [r2, #0]
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 fa4c 	bl	8000950 <display_7SEG>
		if(index == 4) index = 0;
 80004b8:	4b04      	ldr	r3, [pc, #16]	; (80004cc <scanLed7+0x40>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b04      	cmp	r3, #4
 80004be:	d102      	bne.n	80004c6 <scanLed7+0x3a>
 80004c0:	4b02      	ldr	r3, [pc, #8]	; (80004cc <scanLed7+0x40>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	701a      	strb	r2, [r3, #0]
	}
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	200000ae 	.word	0x200000ae

080004d0 <increase>:

//			RV          GV    YV
//	|-----------------|------|---|
//	|------------|----|----------|
//        GH       YH      RH
void increase(uint8_t* buffer) {
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	switch(trafficMode) {
 80004d8:	4b36      	ldr	r3, [pc, #216]	; (80005b4 <increase+0xe4>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b03      	cmp	r3, #3
 80004de:	d04b      	beq.n	8000578 <increase+0xa8>
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	dc5b      	bgt.n	800059c <increase+0xcc>
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d002      	beq.n	80004ee <increase+0x1e>
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d023      	beq.n	8000534 <increase+0x64>
			buffer[VER_YELLOW]++;
			buffer[VER_GREEN]--;
		}
		break;
	default:
		break;
 80004ec:	e056      	b.n	800059c <increase+0xcc>
		if(buffer[VER_GREEN]-1 > 0 && buffer[HOR_RED]-1 > 1) {
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	3301      	adds	r3, #1
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d953      	bls.n	80005a0 <increase+0xd0>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	3303      	adds	r3, #3
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d94e      	bls.n	80005a0 <increase+0xd0>
			buffer[VER_RED]++;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	3301      	adds	r3, #1
 8000508:	b2da      	uxtb	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	701a      	strb	r2, [r3, #0]
			buffer[VER_GREEN]--;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	3301      	adds	r3, #1
 8000512:	781a      	ldrb	r2, [r3, #0]
 8000514:	3a01      	subs	r2, #1
 8000516:	b2d2      	uxtb	r2, r2
 8000518:	701a      	strb	r2, [r3, #0]
			buffer[HOR_RED]--;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3303      	adds	r3, #3
 800051e:	781a      	ldrb	r2, [r3, #0]
 8000520:	3a01      	subs	r2, #1
 8000522:	b2d2      	uxtb	r2, r2
 8000524:	701a      	strb	r2, [r3, #0]
			buffer[HOR_GREEN]++;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3304      	adds	r3, #4
 800052a:	781a      	ldrb	r2, [r3, #0]
 800052c:	3201      	adds	r2, #1
 800052e:	b2d2      	uxtb	r2, r2
 8000530:	701a      	strb	r2, [r3, #0]
		break;
 8000532:	e035      	b.n	80005a0 <increase+0xd0>
		if(buffer[VER_RED]-1 > 1 && buffer[HOR_GREEN]-1 > 0) {
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b02      	cmp	r3, #2
 800053a:	d933      	bls.n	80005a4 <increase+0xd4>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3304      	adds	r3, #4
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d92e      	bls.n	80005a4 <increase+0xd4>
			buffer[VER_GREEN]++;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	3301      	adds	r3, #1
 800054a:	781a      	ldrb	r2, [r3, #0]
 800054c:	3201      	adds	r2, #1
 800054e:	b2d2      	uxtb	r2, r2
 8000550:	701a      	strb	r2, [r3, #0]
			buffer[VER_RED]--;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	3b01      	subs	r3, #1
 8000558:	b2da      	uxtb	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	701a      	strb	r2, [r3, #0]
			buffer[HOR_GREEN]--;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	3304      	adds	r3, #4
 8000562:	781a      	ldrb	r2, [r3, #0]
 8000564:	3a01      	subs	r2, #1
 8000566:	b2d2      	uxtb	r2, r2
 8000568:	701a      	strb	r2, [r3, #0]
			buffer[HOR_RED]++;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3303      	adds	r3, #3
 800056e:	781a      	ldrb	r2, [r3, #0]
 8000570:	3201      	adds	r2, #1
 8000572:	b2d2      	uxtb	r2, r2
 8000574:	701a      	strb	r2, [r3, #0]
		break;
 8000576:	e015      	b.n	80005a4 <increase+0xd4>
		if(buffer[VER_GREEN]-1 > 0) {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3301      	adds	r3, #1
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d912      	bls.n	80005a8 <increase+0xd8>
			buffer[VER_YELLOW]++;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	3302      	adds	r3, #2
 8000586:	781a      	ldrb	r2, [r3, #0]
 8000588:	3201      	adds	r2, #1
 800058a:	b2d2      	uxtb	r2, r2
 800058c:	701a      	strb	r2, [r3, #0]
			buffer[VER_GREEN]--;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3301      	adds	r3, #1
 8000592:	781a      	ldrb	r2, [r3, #0]
 8000594:	3a01      	subs	r2, #1
 8000596:	b2d2      	uxtb	r2, r2
 8000598:	701a      	strb	r2, [r3, #0]
		break;
 800059a:	e005      	b.n	80005a8 <increase+0xd8>
		break;
 800059c:	bf00      	nop
 800059e:	e004      	b.n	80005aa <increase+0xda>
		break;
 80005a0:	bf00      	nop
 80005a2:	e002      	b.n	80005aa <increase+0xda>
		break;
 80005a4:	bf00      	nop
 80005a6:	e000      	b.n	80005aa <increase+0xda>
		break;
 80005a8:	bf00      	nop
	}
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	200000ac 	.word	0x200000ac

080005b8 <decrease>:

void decrease(uint8_t* buffer) {
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	switch(trafficMode) {
 80005c0:	4b36      	ldr	r3, [pc, #216]	; (800069c <decrease+0xe4>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b06      	cmp	r3, #6
 80005c6:	d04b      	beq.n	8000660 <decrease+0xa8>
 80005c8:	2b06      	cmp	r3, #6
 80005ca:	dc5b      	bgt.n	8000684 <decrease+0xcc>
 80005cc:	2b04      	cmp	r3, #4
 80005ce:	d002      	beq.n	80005d6 <decrease+0x1e>
 80005d0:	2b05      	cmp	r3, #5
 80005d2:	d022      	beq.n	800061a <decrease+0x62>
			buffer[VER_YELLOW]--;
			buffer[VER_GREEN]++;
		}
		break;
	default:
		break;
 80005d4:	e056      	b.n	8000684 <decrease+0xcc>
		if(buffer[VER_RED]-1 > 1 && buffer[VER_GREEN]-1 > 0) {
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d954      	bls.n	8000688 <decrease+0xd0>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3301      	adds	r3, #1
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d94f      	bls.n	8000688 <decrease+0xd0>
			buffer[VER_RED]--;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	701a      	strb	r2, [r3, #0]
			buffer[VER_GREEN]++;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3301      	adds	r3, #1
 80005f8:	781a      	ldrb	r2, [r3, #0]
 80005fa:	3201      	adds	r2, #1
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	701a      	strb	r2, [r3, #0]
			buffer[HOR_RED]++;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3303      	adds	r3, #3
 8000604:	781a      	ldrb	r2, [r3, #0]
 8000606:	3201      	adds	r2, #1
 8000608:	b2d2      	uxtb	r2, r2
 800060a:	701a      	strb	r2, [r3, #0]
			buffer[HOR_GREEN]--;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3304      	adds	r3, #4
 8000610:	781a      	ldrb	r2, [r3, #0]
 8000612:	3a01      	subs	r2, #1
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	701a      	strb	r2, [r3, #0]
		break;
 8000618:	e036      	b.n	8000688 <decrease+0xd0>
		if(buffer[VER_GREEN]-1 > 0 && buffer[HOR_RED]-1 > 1) {
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3301      	adds	r3, #1
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d933      	bls.n	800068c <decrease+0xd4>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3303      	adds	r3, #3
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b02      	cmp	r3, #2
 800062c:	d92e      	bls.n	800068c <decrease+0xd4>
			buffer[VER_GREEN]--;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3301      	adds	r3, #1
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	3a01      	subs	r2, #1
 8000636:	b2d2      	uxtb	r2, r2
 8000638:	701a      	strb	r2, [r3, #0]
			buffer[VER_RED]++;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	3301      	adds	r3, #1
 8000640:	b2da      	uxtb	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	701a      	strb	r2, [r3, #0]
			buffer[HOR_GREEN]++;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3304      	adds	r3, #4
 800064a:	781a      	ldrb	r2, [r3, #0]
 800064c:	3201      	adds	r2, #1
 800064e:	b2d2      	uxtb	r2, r2
 8000650:	701a      	strb	r2, [r3, #0]
			buffer[HOR_RED]--;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	3303      	adds	r3, #3
 8000656:	781a      	ldrb	r2, [r3, #0]
 8000658:	3a01      	subs	r2, #1
 800065a:	b2d2      	uxtb	r2, r2
 800065c:	701a      	strb	r2, [r3, #0]
		break;
 800065e:	e015      	b.n	800068c <decrease+0xd4>
		if(buffer[VER_YELLOW]-1 > 0) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3302      	adds	r3, #2
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d912      	bls.n	8000690 <decrease+0xd8>
			buffer[VER_YELLOW]--;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	3302      	adds	r3, #2
 800066e:	781a      	ldrb	r2, [r3, #0]
 8000670:	3a01      	subs	r2, #1
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	701a      	strb	r2, [r3, #0]
			buffer[VER_GREEN]++;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3301      	adds	r3, #1
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	3201      	adds	r2, #1
 800067e:	b2d2      	uxtb	r2, r2
 8000680:	701a      	strb	r2, [r3, #0]
		break;
 8000682:	e005      	b.n	8000690 <decrease+0xd8>
		break;
 8000684:	bf00      	nop
 8000686:	e004      	b.n	8000692 <decrease+0xda>
		break;
 8000688:	bf00      	nop
 800068a:	e002      	b.n	8000692 <decrease+0xda>
		break;
 800068c:	bf00      	nop
 800068e:	e000      	b.n	8000692 <decrease+0xda>
		break;
 8000690:	bf00      	nop
	}
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	200000ac 	.word	0x200000ac

080006a0 <blinkTraffic>:


void blinkTraffic() {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	if(trafficMode == NORMAL) return;
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <blinkTraffic+0x90>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d03e      	beq.n	800072a <blinkTraffic+0x8a>

	if(getMilFlag(BLINK_TIMER)) {
 80006ac:	2001      	movs	r0, #1
 80006ae:	f000 fccb 	bl	8001048 <getMilFlag>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d039      	beq.n	800072c <blinkTraffic+0x8c>
		setMilTimer(BLINK_TIMER, blinkTime);
 80006b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006bc:	4619      	mov	r1, r3
 80006be:	2001      	movs	r0, #1
 80006c0:	f000 fc42 	bl	8000f48 <setMilTimer>
		if(trafficMode == PLUS_RED || trafficMode == MINUS_RED) {
 80006c4:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <blinkTraffic+0x90>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d003      	beq.n	80006d4 <blinkTraffic+0x34>
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <blinkTraffic+0x90>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	d104      	bne.n	80006de <blinkTraffic+0x3e>
			HAL_GPIO_TogglePin(TRAFFIC_PORT, RED_VER | RED_HOR);
 80006d4:	2190      	movs	r1, #144	; 0x90
 80006d6:	4817      	ldr	r0, [pc, #92]	; (8000734 <blinkTraffic+0x94>)
 80006d8:	f001 fa6f 	bl	8001bba <HAL_GPIO_TogglePin>
 80006dc:	e026      	b.n	800072c <blinkTraffic+0x8c>
		}
		else if(trafficMode == PLUS_GREEN || trafficMode == MINUS_GREEN) {
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <blinkTraffic+0x90>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d003      	beq.n	80006ee <blinkTraffic+0x4e>
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <blinkTraffic+0x90>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b05      	cmp	r3, #5
 80006ec:	d105      	bne.n	80006fa <blinkTraffic+0x5a>
			HAL_GPIO_TogglePin(TRAFFIC_PORT, GREEN_VER | GREEN_HOR);
 80006ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 80006f2:	4810      	ldr	r0, [pc, #64]	; (8000734 <blinkTraffic+0x94>)
 80006f4:	f001 fa61 	bl	8001bba <HAL_GPIO_TogglePin>
 80006f8:	e018      	b.n	800072c <blinkTraffic+0x8c>
		}
		else if(trafficMode == PLUS_YELLOW || trafficMode == MINUS_YELLOW){
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <blinkTraffic+0x90>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b03      	cmp	r3, #3
 8000700:	d003      	beq.n	800070a <blinkTraffic+0x6a>
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <blinkTraffic+0x90>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b06      	cmp	r3, #6
 8000708:	d105      	bne.n	8000716 <blinkTraffic+0x76>
			HAL_GPIO_TogglePin(TRAFFIC_PORT, YELLOW_VER | YELLOW_HOR);
 800070a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800070e:	4809      	ldr	r0, [pc, #36]	; (8000734 <blinkTraffic+0x94>)
 8000710:	f001 fa53 	bl	8001bba <HAL_GPIO_TogglePin>
 8000714:	e00a      	b.n	800072c <blinkTraffic+0x8c>
		}
		else if(trafficMode == CONFIRM){
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <blinkTraffic+0x90>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b07      	cmp	r3, #7
 800071c:	d106      	bne.n	800072c <blinkTraffic+0x8c>
			HAL_GPIO_TogglePin(TRAFFIC_PORT, YELLOW_VER | YELLOW_HOR | GREEN_VER | GREEN_HOR | RED_VER | RED_HOR);
 800071e:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8000722:	4804      	ldr	r0, [pc, #16]	; (8000734 <blinkTraffic+0x94>)
 8000724:	f001 fa49 	bl	8001bba <HAL_GPIO_TogglePin>
 8000728:	e000      	b.n	800072c <blinkTraffic+0x8c>
	if(trafficMode == NORMAL) return;
 800072a:	bf00      	nop
		}
	}
}
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200000ac 	.word	0x200000ac
 8000734:	40010800 	.word	0x40010800

08000738 <init_button_reading>:
  *
  * @param  port: Array of GPIO port for buttons
  * @param  no_buttons: number of buttons
  * @retval None
  */
void init_button_reading(const uint16_t* port, unsigned int no_buttons) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
	NO_OF_BUTTONS = no_buttons;
 8000742:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <init_button_reading+0x90>)
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	6013      	str	r3, [r2, #0]

	buttonPort = port; // take array from user
 8000748:	4a20      	ldr	r2, [pc, #128]	; (80007cc <init_button_reading+0x94>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6013      	str	r3, [r2, #0]

	buttonBuffer = (GPIO_PinState*)malloc(NO_OF_BUTTONS*sizeof(GPIO_PinState));
 800074e:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <init_button_reading+0x90>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fa54 	bl	8002c00 <malloc>
 8000758:	4603      	mov	r3, r0
 800075a:	461a      	mov	r2, r3
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <init_button_reading+0x98>)
 800075e:	601a      	str	r2, [r3, #0]
	debounceButtonBuffer1 = (GPIO_PinState*)malloc(NO_OF_BUTTONS*sizeof(GPIO_PinState));
 8000760:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <init_button_reading+0x90>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f002 fa4b 	bl	8002c00 <malloc>
 800076a:	4603      	mov	r3, r0
 800076c:	461a      	mov	r2, r3
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <init_button_reading+0x9c>)
 8000770:	601a      	str	r2, [r3, #0]
	debounceButtonBuffer2 = (GPIO_PinState*)malloc(NO_OF_BUTTONS*sizeof(GPIO_PinState));
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <init_button_reading+0x90>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	f002 fa42 	bl	8002c00 <malloc>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <init_button_reading+0xa0>)
 8000782:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	e014      	b.n	80007b4 <init_button_reading+0x7c>
		buttonBuffer[i] = BUTTON_RELEASED;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <init_button_reading+0x98>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	4413      	add	r3, r2
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = BUTTON_RELEASED;
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <init_button_reading+0x9c>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	4413      	add	r3, r2
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = BUTTON_RELEASED;
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <init_button_reading+0xa0>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	4413      	add	r3, r2
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3301      	adds	r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <init_button_reading+0x90>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d3e5      	bcc.n	800078a <init_button_reading+0x52>
	}
}
 80007be:	bf00      	nop
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000118 	.word	0x20000118
 80007cc:	2000011c 	.word	0x2000011c
 80007d0:	200000b0 	.word	0x200000b0
 80007d4:	200000b4 	.word	0x200000b4
 80007d8:	200000b8 	.word	0x200000b8

080007dc <button_reading>:
  * @note   None
  *
  * @param  None
  * @retval None
  */
void button_reading(void) {
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 80007e2:	2300      	movs	r3, #0
 80007e4:	71fb      	strb	r3, [r7, #7]
 80007e6:	e031      	b.n	800084c <button_reading+0x70>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <button_reading+0x84>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	441a      	add	r2, r3
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <button_reading+0x88>)
 80007f2:	6819      	ldr	r1, [r3, #0]
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	440b      	add	r3, r1
 80007f8:	7812      	ldrb	r2, [r2, #0]
 80007fa:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_PORT, buttonPort[i]);
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <button_reading+0x8c>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	4413      	add	r3, r2
 8000806:	8819      	ldrh	r1, [r3, #0]
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <button_reading+0x84>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	18d4      	adds	r4, r2, r3
 8000810:	4816      	ldr	r0, [pc, #88]	; (800086c <button_reading+0x90>)
 8000812:	f001 f9a3 	bl	8001b5c <HAL_GPIO_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	7023      	strb	r3, [r4, #0]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <button_reading+0x84>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4413      	add	r3, r2
 8000822:	781a      	ldrb	r2, [r3, #0]
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <button_reading+0x88>)
 8000826:	6819      	ldr	r1, [r3, #0]
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	440b      	add	r3, r1
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	429a      	cmp	r2, r3
 8000830:	d109      	bne.n	8000846 <button_reading+0x6a>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <button_reading+0x84>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	441a      	add	r2, r3
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <button_reading+0x94>)
 800083c:	6819      	ldr	r1, [r3, #0]
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	440b      	add	r3, r1
 8000842:	7812      	ldrb	r2, [r2, #0]
 8000844:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	3301      	adds	r3, #1
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	79fa      	ldrb	r2, [r7, #7]
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <button_reading+0x98>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	d3c8      	bcc.n	80007e8 <button_reading+0xc>
		}
	}
}
 8000856:	bf00      	nop
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	bd90      	pop	{r4, r7, pc}
 8000860:	200000b4 	.word	0x200000b4
 8000864:	200000b8 	.word	0x200000b8
 8000868:	2000011c 	.word	0x2000011c
 800086c:	40010800 	.word	0x40010800
 8000870:	200000b0 	.word	0x200000b0
 8000874:	20000118 	.word	0x20000118

08000878 <is_button_pressed>:
  * @note   None
  *
  * @param  index: the index of button which we want to check
  * @retval output is 1 if the button is pressed, otherwise 0
  */
unsigned char is_button_pressed(uint8_t index) {
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 8000882:	79fa      	ldrb	r2, [r7, #7]
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <is_button_pressed+0x38>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	429a      	cmp	r2, r3
 800088a:	d301      	bcc.n	8000890 <is_button_pressed+0x18>
 800088c:	2300      	movs	r3, #0
 800088e:	e009      	b.n	80008a4 <is_button_pressed+0x2c>
	return (buttonBuffer[index] == BUTTON_PRESSED);
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <is_button_pressed+0x3c>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	4413      	add	r3, r2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	bf0c      	ite	eq
 800089e:	2301      	moveq	r3, #1
 80008a0:	2300      	movne	r3, #0
 80008a2:	b2db      	uxtb	r3, r3
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000118 	.word	0x20000118
 80008b4:	200000b0 	.word	0x200000b0

080008b8 <init_led7>:
  * @param  port: Array of GPIO port for segments
  * @param  buffer: Array of value for each led7
  * @param  no_led7: number of led7
  * @retval None
  */
void init_led7(const uint16_t* en, const uint16_t* port, uint8_t* buffer, unsigned int no_led7) {
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
 80008c4:	603b      	str	r3, [r7, #0]
	NO_OF_LED7 = no_led7;
 80008c6:	4a1d      	ldr	r2, [pc, #116]	; (800093c <init_led7+0x84>)
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	6013      	str	r3, [r2, #0]

	seg7En = en;
 80008cc:	4a1c      	ldr	r2, [pc, #112]	; (8000940 <init_led7+0x88>)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	6013      	str	r3, [r2, #0]
	seg7Port = port;
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <init_led7+0x8c>)
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	6013      	str	r3, [r2, #0]
	seg7Val = buffer;
 80008d8:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <init_led7+0x90>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6013      	str	r3, [r2, #0]
	allseg = seg7Port[0] | seg7Port[1] | seg7Port[2] | seg7Port[3] | seg7Port[4] | seg7Port[5] | seg7Port[6];
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <init_led7+0x8c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	881a      	ldrh	r2, [r3, #0]
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <init_led7+0x8c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3302      	adds	r3, #2
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <init_led7+0x8c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	3304      	adds	r3, #4
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <init_led7+0x8c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	3306      	adds	r3, #6
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	4313      	orrs	r3, r2
 8000906:	b29a      	uxth	r2, r3
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <init_led7+0x8c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	3308      	adds	r3, #8
 800090e:	881b      	ldrh	r3, [r3, #0]
 8000910:	4313      	orrs	r3, r2
 8000912:	b29a      	uxth	r2, r3
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <init_led7+0x8c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	330a      	adds	r3, #10
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	4313      	orrs	r3, r2
 800091e:	b29a      	uxth	r2, r3
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <init_led7+0x8c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	330c      	adds	r3, #12
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	4313      	orrs	r3, r2
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <init_led7+0x94>)
 800092e:	801a      	strh	r2, [r3, #0]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	200000bc 	.word	0x200000bc
 8000940:	200000c4 	.word	0x200000c4
 8000944:	200000c0 	.word	0x200000c0
 8000948:	200000c8 	.word	0x200000c8
 800094c:	200000cc 	.word	0x200000cc

08000950 <display_7SEG>:
  * @note   None
  *
  * @param  index: the led7 which will be enabled
  * @retval None
  */
void display_7SEG(unsigned int index) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SEG_PORT, allseg, RESET_SEG);
 8000958:	4b2b      	ldr	r3, [pc, #172]	; (8000a08 <display_7SEG+0xb8>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	2201      	movs	r2, #1
 800095e:	4619      	mov	r1, r3
 8000960:	482a      	ldr	r0, [pc, #168]	; (8000a0c <display_7SEG+0xbc>)
 8000962:	f001 f912 	bl	8001b8a <HAL_GPIO_WritePin>

	uint8_t hexcode = seg7Hex[seg7Val[index]];
 8000966:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <display_7SEG+0xc0>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <display_7SEG+0xc4>)
 8000974:	5c9b      	ldrb	r3, [r3, r2]
 8000976:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < 7; i++) {
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	e015      	b.n	80009aa <display_7SEG+0x5a>
		if((hexcode & (0x40 >> i)) == 0)
 800097e:	7bfa      	ldrb	r2, [r7, #15]
 8000980:	2140      	movs	r1, #64	; 0x40
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	fa41 f303 	asr.w	r3, r1, r3
 8000988:	4013      	ands	r3, r2
 800098a:	2b00      	cmp	r3, #0
 800098c:	d10a      	bne.n	80009a4 <display_7SEG+0x54>
			HAL_GPIO_WritePin(SEG_PORT, seg7Port[i], SET_SEG);
 800098e:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <display_7SEG+0xc8>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	2200      	movs	r2, #0
 800099c:	4619      	mov	r1, r3
 800099e:	481b      	ldr	r0, [pc, #108]	; (8000a0c <display_7SEG+0xbc>)
 80009a0:	f001 f8f3 	bl	8001b8a <HAL_GPIO_WritePin>
	for(int i = 0; i < 7; i++) {
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	3301      	adds	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	2b06      	cmp	r3, #6
 80009ae:	dde6      	ble.n	800097e <display_7SEG+0x2e>
	}

	for(int i = 0;  i < NO_OF_LED7; i++) {
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	e01d      	b.n	80009f2 <display_7SEG+0xa2>
		if(i == index)
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d10b      	bne.n	80009d6 <display_7SEG+0x86>
			HAL_GPIO_WritePin(SEG_PORT, seg7En[i], ENABLE_LED);
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <display_7SEG+0xcc>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	4413      	add	r3, r2
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	2200      	movs	r2, #0
 80009cc:	4619      	mov	r1, r3
 80009ce:	480f      	ldr	r0, [pc, #60]	; (8000a0c <display_7SEG+0xbc>)
 80009d0:	f001 f8db 	bl	8001b8a <HAL_GPIO_WritePin>
 80009d4:	e00a      	b.n	80009ec <display_7SEG+0x9c>
		else
			HAL_GPIO_WritePin(SEG_PORT, seg7En[i], DISABLE_LED);
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <display_7SEG+0xcc>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4413      	add	r3, r2
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	2201      	movs	r2, #1
 80009e4:	4619      	mov	r1, r3
 80009e6:	4809      	ldr	r0, [pc, #36]	; (8000a0c <display_7SEG+0xbc>)
 80009e8:	f001 f8cf 	bl	8001b8a <HAL_GPIO_WritePin>
	for(int i = 0;  i < NO_OF_LED7; i++) {
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	3301      	adds	r3, #1
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <display_7SEG+0xd0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d3dc      	bcc.n	80009b6 <display_7SEG+0x66>
	}
}
 80009fc:	bf00      	nop
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000cc 	.word	0x200000cc
 8000a0c:	40010c00 	.word	0x40010c00
 8000a10:	200000c8 	.word	0x200000c8
 8000a14:	20000014 	.word	0x20000014
 8000a18:	200000c0 	.word	0x200000c0
 8000a1c:	200000c4 	.word	0x200000c4
 8000a20:	200000bc 	.word	0x200000bc

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a28:	f000 fdae 	bl	8001588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2c:	f000 f812 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a30:	f000 f898 	bl	8000b64 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a34:	f000 f84a 	bl	8000acc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a38:	4805      	ldr	r0, [pc, #20]	; (8000a50 <main+0x2c>)
 8000a3a:	f001 fd0f 	bl	800245c <HAL_TIM_Base_Start_IT>

  init_fsm_input_processing(&htim2);
 8000a3e:	4804      	ldr	r0, [pc, #16]	; (8000a50 <main+0x2c>)
 8000a40:	f7ff fba2 	bl	8000188 <init_fsm_input_processing>
//		  }
//		  if(trafficMode == CHANGE_RED) setBufferLed7(traffic_time_update[VER_RED], trafficMode);
//		  else if(trafficMode == CHANGE_YELLOW) setBufferLed7(traffic_time_update[VER_YELLOW], trafficMode);
//		  else if(trafficMode == CHANGE_GREEN) setBufferLed7(traffic_time_update[VER_GREEN], trafficMode);
//	  }
	  fsm_for_input_processing();
 8000a44:	f7ff fbe4 	bl	8000210 <fsm_for_input_processing>
	  fsm_for_traffic_control();
 8000a48:	f7ff fc26 	bl	8000298 <fsm_for_traffic_control>
	  fsm_for_input_processing();
 8000a4c:	e7fa      	b.n	8000a44 <main+0x20>
 8000a4e:	bf00      	nop
 8000a50:	20000120 	.word	0x20000120

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b090      	sub	sp, #64	; 0x40
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0318 	add.w	r3, r7, #24
 8000a5e:	2228      	movs	r2, #40	; 0x28
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 f8d4 	bl	8002c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7e:	2310      	movs	r3, #16
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a86:	f107 0318 	add.w	r3, r7, #24
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 f8ae 	bl	8001bec <HAL_RCC_OscConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a96:	f000 f8c9 	bl	8000c2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fb1a 	bl	80020ec <HAL_RCC_ClockConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000abe:	f000 f8b5 	bl	8000c2c <Error_Handler>
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3740      	adds	r7, #64	; 0x40
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_TIM2_Init+0x94>)
 8000aea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <MX_TIM2_Init+0x94>)
 8000af2:	f240 321f 	movw	r2, #799	; 0x31f
 8000af6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <MX_TIM2_Init+0x94>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_TIM2_Init+0x94>)
 8000b00:	2263      	movs	r2, #99	; 0x63
 8000b02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_TIM2_Init+0x94>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_TIM2_Init+0x94>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b10:	4813      	ldr	r0, [pc, #76]	; (8000b60 <MX_TIM2_Init+0x94>)
 8000b12:	f001 fc53 	bl	80023bc <HAL_TIM_Base_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b1c:	f000 f886 	bl	8000c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <MX_TIM2_Init+0x94>)
 8000b2e:	f001 fde9 	bl	8002704 <HAL_TIM_ConfigClockSource>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b38:	f000 f878 	bl	8000c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b44:	463b      	mov	r3, r7
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_TIM2_Init+0x94>)
 8000b4a:	f001 ffb1 	bl	8002ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b54:	f000 f86a 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000120 	.word	0x20000120

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <MX_GPIO_Init+0xbc>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a28      	ldr	r2, [pc, #160]	; (8000c20 <MX_GPIO_Init+0xbc>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <MX_GPIO_Init+0xbc>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b90:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <MX_GPIO_Init+0xbc>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a22      	ldr	r2, [pc, #136]	; (8000c20 <MX_GPIO_Init+0xbc>)
 8000b96:	f043 0308 	orr.w	r3, r3, #8
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <MX_GPIO_Init+0xbc>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0308 	and.w	r3, r3, #8
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8000bae:	481d      	ldr	r0, [pc, #116]	; (8000c24 <MX_GPIO_Init+0xc0>)
 8000bb0:	f000 ffeb 	bl	8001b8a <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000bba:	481b      	ldr	r0, [pc, #108]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000bbc:	f000 ffe5 	bl	8001b8a <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : DEBUG_Pin PA4 PA5 PA6
                           PA7 PA8 PA9 */
  GPIO_InitStruct.Pin = DEBUG_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000bc0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000bc4:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4812      	ldr	r0, [pc, #72]	; (8000c24 <MX_GPIO_Init+0xc0>)
 8000bda:	f000 fe45 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000bde:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000be2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2302      	movs	r3, #2
 8000bee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480c      	ldr	r0, [pc, #48]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000bf8:	f000 fe36 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000bfc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000c00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0308 	add.w	r3, r7, #8
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_GPIO_Init+0xc0>)
 8000c12:	f000 fe29 	bl	8001868 <HAL_GPIO_Init>

}
 8000c16:	bf00      	nop
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40010800 	.word	0x40010800
 8000c28:	40010c00 	.word	0x40010c00

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <Error_Handler+0x8>
	...

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_MspInit+0x5c>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <HAL_MspInit+0x5c>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6193      	str	r3, [r2, #24]
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_MspInit+0x5c>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_MspInit+0x5c>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <HAL_MspInit+0x5c>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	61d3      	str	r3, [r2, #28]
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <HAL_MspInit+0x5c>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_MspInit+0x60>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_MspInit+0x60>)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40010000 	.word	0x40010000

08000c9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cac:	d113      	bne.n	8000cd6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_TIM_Base_MspInit+0x44>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_TIM_Base_MspInit+0x44>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	61d3      	str	r3, [r2, #28]
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_TIM_Base_MspInit+0x44>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	201c      	movs	r0, #28
 8000ccc:	f000 fd95 	bl	80017fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cd0:	201c      	movs	r0, #28
 8000cd2:	f000 fdae 	bl	8001832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <NMI_Handler+0x4>

08000cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr

08000d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2a:	f000 fc73 	bl	8001614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <TIM2_IRQHandler+0x10>)
 8000d3a:	f001 fbdb 	bl	80024f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000120 	.word	0x20000120

08000d48 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d52:	f001 ff17 	bl	8002b84 <__errno>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2216      	movs	r2, #22
 8000d5a:	601a      	str	r2, [r3, #0]
	return -1;
 8000d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <_exit>:

void _exit (int status)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ffe7 	bl	8000d48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d7a:	e7fe      	b.n	8000d7a <_exit+0x12>

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f001 feea 	bl	8002b84 <__errno>
 8000db0:	4603      	mov	r3, r0
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20002800 	.word	0x20002800
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	200000d0 	.word	0x200000d0
 8000de4:	20000180 	.word	0x20000180

08000de8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <init_timer>:
  * @param  tim: Timer structure to get the Period and Prescaler
  * @param  num_sec: number of second based timers
  * @param  num_mil: number of millisecond based timers
  * @retval None
  */
void init_timer(TIM_HandleTypeDef *tim, unsigned int num_sec, unsigned int num_mil) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
	// init parameter for software timer
	TIMER_CYCLE = (tim->Instance->ARR+1) * (tim->Instance->PSC+1) / TIMER_CLOCK_FREQ;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e06:	3301      	adds	r3, #1
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	6812      	ldr	r2, [r2, #0]
 8000e0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000e0e:	3201      	adds	r2, #1
 8000e10:	fb02 f303 	mul.w	r3, r2, r3
 8000e14:	4a42      	ldr	r2, [pc, #264]	; (8000f20 <init_timer+0x12c>)
 8000e16:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1a:	0a5b      	lsrs	r3, r3, #9
 8000e1c:	4a41      	ldr	r2, [pc, #260]	; (8000f24 <init_timer+0x130>)
 8000e1e:	6013      	str	r3, [r2, #0]
	NO_OF_MIL_TIMERS = num_mil;
 8000e20:	4a41      	ldr	r2, [pc, #260]	; (8000f28 <init_timer+0x134>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
	NO_OF_SEC_TIMERS = num_sec;
 8000e26:	4a41      	ldr	r2, [pc, #260]	; (8000f2c <init_timer+0x138>)
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	6013      	str	r3, [r2, #0]

	// init array for counter and flag
	timer_mil_counter = (unsigned int*)malloc(NO_OF_MIL_TIMERS * sizeof(unsigned int));
 8000e2c:	4b3e      	ldr	r3, [pc, #248]	; (8000f28 <init_timer+0x134>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fee4 	bl	8002c00 <malloc>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b3c      	ldr	r3, [pc, #240]	; (8000f30 <init_timer+0x13c>)
 8000e3e:	601a      	str	r2, [r3, #0]
	timer_sec_counter = (unsigned int*)malloc(NO_OF_SEC_TIMERS * sizeof(unsigned int));
 8000e40:	4b3a      	ldr	r3, [pc, #232]	; (8000f2c <init_timer+0x138>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 feda 	bl	8002c00 <malloc>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	461a      	mov	r2, r3
 8000e50:	4b38      	ldr	r3, [pc, #224]	; (8000f34 <init_timer+0x140>)
 8000e52:	601a      	str	r2, [r3, #0]
	timer_mil_flag = (uint8_t*)malloc(NO_OF_MIL_TIMERS * sizeof(uint8_t));
 8000e54:	4b34      	ldr	r3, [pc, #208]	; (8000f28 <init_timer+0x134>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 fed1 	bl	8002c00 <malloc>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b35      	ldr	r3, [pc, #212]	; (8000f38 <init_timer+0x144>)
 8000e64:	601a      	str	r2, [r3, #0]
	timer_sec_flag = (uint8_t*)malloc(NO_OF_SEC_TIMERS * sizeof(uint8_t));
 8000e66:	4b31      	ldr	r3, [pc, #196]	; (8000f2c <init_timer+0x138>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 fec8 	bl	8002c00 <malloc>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b31      	ldr	r3, [pc, #196]	; (8000f3c <init_timer+0x148>)
 8000e76:	601a      	str	r2, [r3, #0]
	timer_mil_stop = (uint8_t*)malloc(NO_OF_MIL_TIMERS * sizeof(uint8_t));
 8000e78:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <init_timer+0x134>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 febf 	bl	8002c00 <malloc>
 8000e82:	4603      	mov	r3, r0
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <init_timer+0x14c>)
 8000e88:	601a      	str	r2, [r3, #0]
	timer_sec_stop = (uint8_t*)malloc(NO_OF_SEC_TIMERS * sizeof(uint8_t));
 8000e8a:	4b28      	ldr	r3, [pc, #160]	; (8000f2c <init_timer+0x138>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 feb6 	bl	8002c00 <malloc>
 8000e94:	4603      	mov	r3, r0
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <init_timer+0x150>)
 8000e9a:	601a      	str	r2, [r3, #0]

	// init value for array
	for(int i = 0; i < NO_OF_MIL_TIMERS; i++) {
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	e015      	b.n	8000ece <init_timer+0xda>
		timer_mil_counter[i] = 0;
 8000ea2:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <init_timer+0x13c>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
		timer_mil_flag[i] = 1;
 8000eb0:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <init_timer+0x144>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	2201      	movs	r2, #1
 8000eba:	701a      	strb	r2, [r3, #0]
		timer_mil_stop[i] = START_TIMER;
 8000ebc:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <init_timer+0x14c>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_MIL_TIMERS; i++) {
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <init_timer+0x134>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d3e4      	bcc.n	8000ea2 <init_timer+0xae>
	}
	for(int i = 0; i < NO_OF_SEC_TIMERS; i++) {
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	e015      	b.n	8000f0a <init_timer+0x116>
		timer_sec_counter[i] = 0;
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <init_timer+0x140>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
		timer_sec_flag[i] = 1;
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <init_timer+0x148>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
		timer_sec_stop[i] = START_TIMER;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <init_timer+0x150>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4413      	add	r3, r2
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_SEC_TIMERS; i++) {
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	3301      	adds	r3, #1
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <init_timer+0x138>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d3e4      	bcc.n	8000ede <init_timer+0xea>
	}
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	10624dd3 	.word	0x10624dd3
 8000f24:	200000d4 	.word	0x200000d4
 8000f28:	200000d8 	.word	0x200000d8
 8000f2c:	200000dc 	.word	0x200000dc
 8000f30:	200000e0 	.word	0x200000e0
 8000f34:	200000e4 	.word	0x200000e4
 8000f38:	200000e8 	.word	0x200000e8
 8000f3c:	200000ec 	.word	0x200000ec
 8000f40:	200000f0 	.word	0x200000f0
 8000f44:	200000f4 	.word	0x200000f4

08000f48 <setMilTimer>:
  *
  * @param  timer: a specific timer
  * @param  value: time interval
  * @retval None
  */
uint8_t setMilTimer(uint8_t timer, unsigned int value) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
	if((value * 1000) % TIMER_CYCLE != 0) {
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f5a:	fb02 f303 	mul.w	r3, r2, r3
 8000f5e:	4a15      	ldr	r2, [pc, #84]	; (8000fb4 <setMilTimer+0x6c>)
 8000f60:	6812      	ldr	r2, [r2, #0]
 8000f62:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f66:	fb02 f201 	mul.w	r2, r2, r1
 8000f6a:	1a9b      	subs	r3, r3, r2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <setMilTimer+0x2c>
		return 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	e01a      	b.n	8000faa <setMilTimer+0x62>
	}
	if(timer >= NO_OF_SEC_TIMERS) {
 8000f74:	79fa      	ldrb	r2, [r7, #7]
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <setMilTimer+0x70>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d303      	bcc.n	8000f86 <setMilTimer+0x3e>
		exit(-1);
 8000f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f82:	f001 fe05 	bl	8002b90 <exit>
	}

	timer_mil_counter[timer] = value / TIMER_CYCLE;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <setMilTimer+0x6c>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <setMilTimer+0x74>)
 8000f8c:	6819      	ldr	r1, [r3, #0]
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	440b      	add	r3, r1
 8000f94:	6839      	ldr	r1, [r7, #0]
 8000f96:	fbb1 f2f2 	udiv	r2, r1, r2
 8000f9a:	601a      	str	r2, [r3, #0]
	timer_mil_flag[timer] = 0;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <setMilTimer+0x78>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
	return 1;
 8000fa8:	2301      	movs	r3, #1
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000d4 	.word	0x200000d4
 8000fb8:	200000dc 	.word	0x200000dc
 8000fbc:	200000e0 	.word	0x200000e0
 8000fc0:	200000e8 	.word	0x200000e8

08000fc4 <setSecTimer>:
  *
  * @param  timer: a specific timer
  * @param  value: time interval
  * @retval None
  */
uint8_t setSecTimer(uint8_t timer, unsigned int value) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
	if((value * 1000) % TIMER_CYCLE != 0) {
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fd6:	fb02 f303 	mul.w	r3, r2, r3
 8000fda:	4a17      	ldr	r2, [pc, #92]	; (8001038 <setSecTimer+0x74>)
 8000fdc:	6812      	ldr	r2, [r2, #0]
 8000fde:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fe2:	fb02 f201 	mul.w	r2, r2, r1
 8000fe6:	1a9b      	subs	r3, r3, r2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <setSecTimer+0x2c>
		return 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	e01e      	b.n	800102e <setSecTimer+0x6a>
	}
	if(timer >= NO_OF_SEC_TIMERS) {
 8000ff0:	79fa      	ldrb	r2, [r7, #7]
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <setSecTimer+0x78>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d303      	bcc.n	8001002 <setSecTimer+0x3e>
		exit(-1);
 8000ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffe:	f001 fdc7 	bl	8002b90 <exit>
	}

	timer_sec_counter[timer] = value*1000 / TIMER_CYCLE;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001008:	fb02 f103 	mul.w	r1, r2, r3
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <setSecTimer+0x74>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <setSecTimer+0x7c>)
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4403      	add	r3, r0
 800101a:	fbb1 f2f2 	udiv	r2, r1, r2
 800101e:	601a      	str	r2, [r3, #0]
	timer_sec_flag[timer] = 0;
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <setSecTimer+0x80>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	4413      	add	r3, r2
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
	return 1;
 800102c:	2301      	movs	r3, #1
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200000d4 	.word	0x200000d4
 800103c:	200000dc 	.word	0x200000dc
 8001040:	200000e4 	.word	0x200000e4
 8001044:	200000ec 	.word	0x200000ec

08001048 <getMilFlag>:
  * @note   None
  *
  * @param  timer: a specific timer
  * @retval return 1 if the timer is done its counting down, otherwise 0
  */
uint8_t getMilFlag(uint8_t timer) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	if(timer >= NO_OF_SEC_TIMERS) {
 8001052:	79fa      	ldrb	r2, [r7, #7]
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <getMilFlag+0x30>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	d303      	bcc.n	8001064 <getMilFlag+0x1c>
		exit(-1);
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f001 fd96 	bl	8002b90 <exit>
	}
	return timer_mil_flag[timer];
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <getMilFlag+0x34>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000dc 	.word	0x200000dc
 800107c:	200000e8 	.word	0x200000e8

08001080 <getSecFlag>:
  * @note   None
  *
  * @param  timer: a specific timer
  * @retval return 1 if the timer is done its counting down, otherwise 0
  */
uint8_t getSecFlag(uint8_t timer) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
	if(timer >= NO_OF_SEC_TIMERS) {
 800108a:	79fa      	ldrb	r2, [r7, #7]
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <getSecFlag+0x30>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d303      	bcc.n	800109c <getSecFlag+0x1c>
		exit(-1);
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f001 fd7a 	bl	8002b90 <exit>
	}
	return timer_sec_flag[timer];
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <getSecFlag+0x34>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	4413      	add	r3, r2
 80010a4:	781b      	ldrb	r3, [r3, #0]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200000dc 	.word	0x200000dc
 80010b4:	200000ec 	.word	0x200000ec

080010b8 <getSecCounter>:
  * @note   None
  *
  * @param  timer: a specific timer
  * @retval return counting value
  */
unsigned int getSecCounter(uint8_t timer) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	if(timer >= NO_OF_SEC_TIMERS) {
 80010c2:	79fa      	ldrb	r2, [r7, #7]
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <getSecCounter+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d303      	bcc.n	80010d4 <getSecCounter+0x1c>
		exit(-1);
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f001 fd5e 	bl	8002b90 <exit>
	}
	return timer_sec_counter[timer] * TIMER_CYCLE / 1000;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <getSecCounter+0x44>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a07      	ldr	r2, [pc, #28]	; (8001100 <getSecCounter+0x48>)
 80010e2:	6812      	ldr	r2, [r2, #0]
 80010e4:	fb02 f303 	mul.w	r3, r2, r3
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <getSecCounter+0x4c>)
 80010ea:	fba2 2303 	umull	r2, r3, r2, r3
 80010ee:	099b      	lsrs	r3, r3, #6
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200000dc 	.word	0x200000dc
 80010fc:	200000e4 	.word	0x200000e4
 8001100:	200000d4 	.word	0x200000d4
 8001104:	10624dd3 	.word	0x10624dd3

08001108 <controlSecTimer>:
  *
  * @param  timer: a specific timer
  * @param  control: stop or continue command. This can be START_TIMER or STOP_TIMER
  * @retval None
  */
void controlSecTimer(uint8_t timer, ControlTimer control) {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	460a      	mov	r2, r1
 8001112:	71fb      	strb	r3, [r7, #7]
 8001114:	4613      	mov	r3, r2
 8001116:	71bb      	strb	r3, [r7, #6]
	timer_sec_stop[timer] = control;
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <controlSecTimer+0x28>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	4413      	add	r3, r2
 8001120:	79ba      	ldrb	r2, [r7, #6]
 8001122:	701a      	strb	r2, [r3, #0]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	200000f4 	.word	0x200000f4

08001134 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	button_reading();
 800113c:	f7ff fb4e 	bl	80007dc <button_reading>
	for(int i = 0; i < NO_OF_MIL_TIMERS; i++) {
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	e029      	b.n	800119a <HAL_TIM_PeriodElapsedCallback+0x66>
		if(timer_mil_stop[i] == STOP_TIMER) continue;
 8001146:	4b33      	ldr	r3, [pc, #204]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4413      	add	r3, r2
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d01e      	beq.n	8001192 <HAL_TIM_PeriodElapsedCallback+0x5e>
		if(timer_mil_counter[i] > 0) {
 8001154:	4b30      	ldr	r3, [pc, #192]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d017      	beq.n	8001194 <HAL_TIM_PeriodElapsedCallback+0x60>
			timer_mil_counter[i]--;
 8001164:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	3a01      	subs	r2, #1
 8001172:	601a      	str	r2, [r3, #0]
			if(timer_mil_counter[i] == 0) {
 8001174:	4b28      	ldr	r3, [pc, #160]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d107      	bne.n	8001194 <HAL_TIM_PeriodElapsedCallback+0x60>
				timer_mil_flag[i] = 1;
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	e000      	b.n	8001194 <HAL_TIM_PeriodElapsedCallback+0x60>
		if(timer_mil_stop[i] == STOP_TIMER) continue;
 8001192:	bf00      	nop
	for(int i = 0; i < NO_OF_MIL_TIMERS; i++) {
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3301      	adds	r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	4b20      	ldr	r3, [pc, #128]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d3d0      	bcc.n	8001146 <HAL_TIM_PeriodElapsedCallback+0x12>
			}
		}
	}

	for(int i = 0; i < NO_OF_SEC_TIMERS; i++) {
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	e029      	b.n	80011fe <HAL_TIM_PeriodElapsedCallback+0xca>
		if(timer_sec_stop[i] == STOP_TIMER) continue;
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	4413      	add	r3, r2
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d01e      	beq.n	80011f6 <HAL_TIM_PeriodElapsedCallback+0xc2>
		if(timer_sec_counter[i] > 0) {
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d017      	beq.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0xc4>
			timer_sec_counter[i]--;
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	3a01      	subs	r2, #1
 80011d6:	601a      	str	r2, [r3, #0]
			if(timer_sec_counter[i] == 0) {
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d107      	bne.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0xc4>
				timer_sec_flag[i] = 1;
 80011e8:	4b10      	ldr	r3, [pc, #64]	; (800122c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4413      	add	r3, r2
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	e000      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0xc4>
		if(timer_sec_stop[i] == STOP_TIMER) continue;
 80011f6:	bf00      	nop
	for(int i = 0; i < NO_OF_SEC_TIMERS; i++) {
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d3d0      	bcc.n	80011aa <HAL_TIM_PeriodElapsedCallback+0x76>
			}
		}
	}
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200000f0 	.word	0x200000f0
 8001218:	200000e0 	.word	0x200000e0
 800121c:	200000e8 	.word	0x200000e8
 8001220:	200000d8 	.word	0x200000d8
 8001224:	200000f4 	.word	0x200000f4
 8001228:	200000e4 	.word	0x200000e4
 800122c:	200000ec 	.word	0x200000ec
 8001230:	200000dc 	.word	0x200000dc

08001234 <init_traffic>:
  *
  * @param  port: Array of GPIO port for traffic lights
  * @param  time: Array of time value for each traffic light
  * @retval None
  */
void init_traffic(const uint16_t* port, uint8_t* time, uint8_t* timeUpdate) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
	lightPort = port;
 8001240:	4a1e      	ldr	r2, [pc, #120]	; (80012bc <init_traffic+0x88>)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6013      	str	r3, [r2, #0]
	lightTime = time;
 8001246:	4a1e      	ldr	r2, [pc, #120]	; (80012c0 <init_traffic+0x8c>)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	6013      	str	r3, [r2, #0]
	lightTimeUpdate = timeUpdate;
 800124c:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <init_traffic+0x90>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]

	ver_state = STATE_YELLOW;
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <init_traffic+0x94>)
 8001254:	2202      	movs	r2, #2
 8001256:	701a      	strb	r2, [r3, #0]
	hor_state = STATE_RED;
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <init_traffic+0x98>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]

	allpin = lightPort[0] | lightPort[1] | lightPort[2] | lightPort[3] | lightPort[4] | lightPort[5];
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <init_traffic+0x88>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	881a      	ldrh	r2, [r3, #0]
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <init_traffic+0x88>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	3302      	adds	r3, #2
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	4313      	orrs	r3, r2
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <init_traffic+0x88>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3304      	adds	r3, #4
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	4313      	orrs	r3, r2
 800127a:	b29a      	uxth	r2, r3
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <init_traffic+0x88>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	3306      	adds	r3, #6
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	4313      	orrs	r3, r2
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <init_traffic+0x88>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3308      	adds	r3, #8
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	4313      	orrs	r3, r2
 8001292:	b29a      	uxth	r2, r3
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <init_traffic+0x88>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	330a      	adds	r3, #10
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	4313      	orrs	r3, r2
 800129e:	b29a      	uxth	r2, r3
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <init_traffic+0x9c>)
 80012a2:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(TRAFFIC_PORT, allpin, LIGHT_RESET);
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <init_traffic+0x9c>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	2201      	movs	r2, #1
 80012aa:	4619      	mov	r1, r3
 80012ac:	4809      	ldr	r0, [pc, #36]	; (80012d4 <init_traffic+0xa0>)
 80012ae:	f000 fc6c 	bl	8001b8a <HAL_GPIO_WritePin>
}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200000fc 	.word	0x200000fc
 80012c0:	20000100 	.word	0x20000100
 80012c4:	20000104 	.word	0x20000104
 80012c8:	200000f8 	.word	0x200000f8
 80012cc:	200000f9 	.word	0x200000f9
 80012d0:	20000108 	.word	0x20000108
 80012d4:	40010800 	.word	0x40010800

080012d8 <traffic_display>:
  * @note   This function need timer.h to function
  *
  * @param  None
  * @retval None
  */
void traffic_display(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	switch(ver_state) {
 80012dc:	4b7a      	ldr	r3, [pc, #488]	; (80014c8 <traffic_display+0x1f0>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d874      	bhi.n	80013ce <traffic_display+0xf6>
 80012e4:	a201      	add	r2, pc, #4	; (adr r2, 80012ec <traffic_display+0x14>)
 80012e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ea:	bf00      	nop
 80012ec:	080012fd 	.word	0x080012fd
 80012f0:	08001337 	.word	0x08001337
 80012f4:	08001373 	.word	0x08001373
 80012f8:	0800139f 	.word	0x0800139f
	case STATE_RED:
		if(getSecFlag(TRAFFIC_VER_TIMER)) {
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff febf 	bl	8001080 <getSecFlag>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00d      	beq.n	8001324 <traffic_display+0x4c>
			setSecTimer(TRAFFIC_VER_TIMER, lightTime[VER_GREEN]);
 8001308:	4b70      	ldr	r3, [pc, #448]	; (80014cc <traffic_display+0x1f4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff fe56 	bl	8000fc4 <setSecTimer>
			ver_state = STATE_GREEN;
 8001318:	4b6b      	ldr	r3, [pc, #428]	; (80014c8 <traffic_display+0x1f0>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]

			clearTraffic();
 800131e:	f000 f8df 	bl	80014e0 <clearTraffic>
			break;
 8001322:	e054      	b.n	80013ce <traffic_display+0xf6>
		}

		HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[VER_RED], LIGHT_SET);
 8001324:	4b6a      	ldr	r3, [pc, #424]	; (80014d0 <traffic_display+0x1f8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	2200      	movs	r2, #0
 800132c:	4619      	mov	r1, r3
 800132e:	4869      	ldr	r0, [pc, #420]	; (80014d4 <traffic_display+0x1fc>)
 8001330:	f000 fc2b 	bl	8001b8a <HAL_GPIO_WritePin>
		break;
 8001334:	e04b      	b.n	80013ce <traffic_display+0xf6>
	case STATE_GREEN:
		if(getSecFlag(TRAFFIC_VER_TIMER)) {
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff fea2 	bl	8001080 <getSecFlag>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00d      	beq.n	800135e <traffic_display+0x86>
			setSecTimer(TRAFFIC_VER_TIMER, lightTime[VER_YELLOW]);
 8001342:	4b62      	ldr	r3, [pc, #392]	; (80014cc <traffic_display+0x1f4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	3302      	adds	r3, #2
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4619      	mov	r1, r3
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff fe39 	bl	8000fc4 <setSecTimer>
			ver_state = STATE_YELLOW;
 8001352:	4b5d      	ldr	r3, [pc, #372]	; (80014c8 <traffic_display+0x1f0>)
 8001354:	2202      	movs	r2, #2
 8001356:	701a      	strb	r2, [r3, #0]

			clearTraffic();
 8001358:	f000 f8c2 	bl	80014e0 <clearTraffic>
			break;
 800135c:	e037      	b.n	80013ce <traffic_display+0xf6>
		}
		HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[VER_GREEN], LIGHT_SET);
 800135e:	4b5c      	ldr	r3, [pc, #368]	; (80014d0 <traffic_display+0x1f8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	3302      	adds	r3, #2
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	2200      	movs	r2, #0
 8001368:	4619      	mov	r1, r3
 800136a:	485a      	ldr	r0, [pc, #360]	; (80014d4 <traffic_display+0x1fc>)
 800136c:	f000 fc0d 	bl	8001b8a <HAL_GPIO_WritePin>
		break;
 8001370:	e02d      	b.n	80013ce <traffic_display+0xf6>
	case STATE_YELLOW:
		if(getSecFlag(TRAFFIC_VER_TIMER)) {
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff fe84 	bl	8001080 <getSecFlag>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <traffic_display+0xb2>
			ver_state = STATE_UPDATE;
 800137e:	4b52      	ldr	r3, [pc, #328]	; (80014c8 <traffic_display+0x1f0>)
 8001380:	2203      	movs	r2, #3
 8001382:	701a      	strb	r2, [r3, #0]

			clearTraffic();
 8001384:	f000 f8ac 	bl	80014e0 <clearTraffic>
			break;
 8001388:	e021      	b.n	80013ce <traffic_display+0xf6>
		}
		HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[VER_YELLOW], LIGHT_SET);
 800138a:	4b51      	ldr	r3, [pc, #324]	; (80014d0 <traffic_display+0x1f8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	3304      	adds	r3, #4
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	2200      	movs	r2, #0
 8001394:	4619      	mov	r1, r3
 8001396:	484f      	ldr	r0, [pc, #316]	; (80014d4 <traffic_display+0x1fc>)
 8001398:	f000 fbf7 	bl	8001b8a <HAL_GPIO_WritePin>
		break;
 800139c:	e017      	b.n	80013ce <traffic_display+0xf6>
	case STATE_UPDATE:
		if(getUpdateFlag()) {
 800139e:	f000 f8af 	bl	8001500 <getUpdateFlag>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d007      	beq.n	80013b8 <traffic_display+0xe0>
			copyArray(lightTimeUpdate, lightTime, 6);
 80013a8:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <traffic_display+0x200>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a47      	ldr	r2, [pc, #284]	; (80014cc <traffic_display+0x1f4>)
 80013ae:	6811      	ldr	r1, [r2, #0]
 80013b0:	2206      	movs	r2, #6
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7fe feca 	bl	800014c <copyArray>
		}
		setSecTimer(TRAFFIC_VER_TIMER, lightTime[VER_RED]);
 80013b8:	4b44      	ldr	r3, [pc, #272]	; (80014cc <traffic_display+0x1f4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4619      	mov	r1, r3
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff fdff 	bl	8000fc4 <setSecTimer>
		ver_state = STATE_RED;
 80013c6:	4b40      	ldr	r3, [pc, #256]	; (80014c8 <traffic_display+0x1f0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
		break;
 80013cc:	bf00      	nop
	}



	switch(hor_state) {
 80013ce:	4b43      	ldr	r3, [pc, #268]	; (80014dc <traffic_display+0x204>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	d875      	bhi.n	80014c2 <traffic_display+0x1ea>
 80013d6:	a201      	add	r2, pc, #4	; (adr r2, 80013dc <traffic_display+0x104>)
 80013d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013dc:	08001465 	.word	0x08001465
 80013e0:	080013ed 	.word	0x080013ed
 80013e4:	08001429 	.word	0x08001429
 80013e8:	08001491 	.word	0x08001491
	case STATE_GREEN:
		if(getSecFlag(TRAFFIC_HOR_TIMER)) {
 80013ec:	2001      	movs	r0, #1
 80013ee:	f7ff fe47 	bl	8001080 <getSecFlag>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00d      	beq.n	8001414 <traffic_display+0x13c>
			setSecTimer(TRAFFIC_HOR_TIMER, lightTime[HOR_YELLOW]);
 80013f8:	4b34      	ldr	r3, [pc, #208]	; (80014cc <traffic_display+0x1f4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3305      	adds	r3, #5
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	2001      	movs	r0, #1
 8001404:	f7ff fdde 	bl	8000fc4 <setSecTimer>
			hor_state = STATE_YELLOW;
 8001408:	4b34      	ldr	r3, [pc, #208]	; (80014dc <traffic_display+0x204>)
 800140a:	2202      	movs	r2, #2
 800140c:	701a      	strb	r2, [r3, #0]

			clearTraffic();
 800140e:	f000 f867 	bl	80014e0 <clearTraffic>
			break;
 8001412:	e056      	b.n	80014c2 <traffic_display+0x1ea>
		}
		HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[HOR_GREEN], LIGHT_SET);
 8001414:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <traffic_display+0x1f8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3308      	adds	r3, #8
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	2200      	movs	r2, #0
 800141e:	4619      	mov	r1, r3
 8001420:	482c      	ldr	r0, [pc, #176]	; (80014d4 <traffic_display+0x1fc>)
 8001422:	f000 fbb2 	bl	8001b8a <HAL_GPIO_WritePin>
		break;
 8001426:	e04c      	b.n	80014c2 <traffic_display+0x1ea>
	case STATE_YELLOW:
		if(getSecFlag(TRAFFIC_HOR_TIMER)) {
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff fe29 	bl	8001080 <getSecFlag>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00d      	beq.n	8001450 <traffic_display+0x178>
			setSecTimer(TRAFFIC_HOR_TIMER, lightTime[HOR_RED]);
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <traffic_display+0x1f4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3303      	adds	r3, #3
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	2001      	movs	r0, #1
 8001440:	f7ff fdc0 	bl	8000fc4 <setSecTimer>
			hor_state = STATE_RED;
 8001444:	4b25      	ldr	r3, [pc, #148]	; (80014dc <traffic_display+0x204>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]

			clearTraffic();
 800144a:	f000 f849 	bl	80014e0 <clearTraffic>
			break;
 800144e:	e038      	b.n	80014c2 <traffic_display+0x1ea>
		}
		HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[HOR_YELLOW], LIGHT_SET);
 8001450:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <traffic_display+0x1f8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	330a      	adds	r3, #10
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	4619      	mov	r1, r3
 800145c:	481d      	ldr	r0, [pc, #116]	; (80014d4 <traffic_display+0x1fc>)
 800145e:	f000 fb94 	bl	8001b8a <HAL_GPIO_WritePin>
		break;
 8001462:	e02e      	b.n	80014c2 <traffic_display+0x1ea>
	case STATE_RED:
		if(getSecFlag(TRAFFIC_HOR_TIMER)) {
 8001464:	2001      	movs	r0, #1
 8001466:	f7ff fe0b 	bl	8001080 <getSecFlag>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <traffic_display+0x1a4>
			hor_state = STATE_UPDATE;
 8001470:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <traffic_display+0x204>)
 8001472:	2203      	movs	r2, #3
 8001474:	701a      	strb	r2, [r3, #0]

			clearTraffic();
 8001476:	f000 f833 	bl	80014e0 <clearTraffic>
			break;
 800147a:	e022      	b.n	80014c2 <traffic_display+0x1ea>
		}
		HAL_GPIO_WritePin(TRAFFIC_PORT, lightPort[HOR_RED], LIGHT_SET);
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <traffic_display+0x1f8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	3306      	adds	r3, #6
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	2200      	movs	r2, #0
 8001486:	4619      	mov	r1, r3
 8001488:	4812      	ldr	r0, [pc, #72]	; (80014d4 <traffic_display+0x1fc>)
 800148a:	f000 fb7e 	bl	8001b8a <HAL_GPIO_WritePin>
		break;
 800148e:	e018      	b.n	80014c2 <traffic_display+0x1ea>
	case STATE_UPDATE:
		if(getUpdateFlag()) {
 8001490:	f000 f836 	bl	8001500 <getUpdateFlag>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <traffic_display+0x1d2>
			copyArray(lightTimeUpdate, lightTime, 6);
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <traffic_display+0x200>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <traffic_display+0x1f4>)
 80014a0:	6811      	ldr	r1, [r2, #0]
 80014a2:	2206      	movs	r2, #6
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7fe fe51 	bl	800014c <copyArray>
		}
		setSecTimer(TRAFFIC_HOR_TIMER, lightTime[HOR_GREEN]);
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <traffic_display+0x1f4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3304      	adds	r3, #4
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4619      	mov	r1, r3
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff fd85 	bl	8000fc4 <setSecTimer>
		hor_state = STATE_GREEN;
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <traffic_display+0x204>)
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
		break;
 80014c0:	bf00      	nop
	}

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200000f8 	.word	0x200000f8
 80014cc:	20000100 	.word	0x20000100
 80014d0:	200000fc 	.word	0x200000fc
 80014d4:	40010800 	.word	0x40010800
 80014d8:	20000104 	.word	0x20000104
 80014dc:	200000f9 	.word	0x200000f9

080014e0 <clearTraffic>:
  * @note   None
  *
  * @param  None
  * @retval None
  */
void clearTraffic(void) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRAFFIC_PORT, allpin, LIGHT_RESET);
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <clearTraffic+0x18>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	2201      	movs	r2, #1
 80014ea:	4619      	mov	r1, r3
 80014ec:	4803      	ldr	r0, [pc, #12]	; (80014fc <clearTraffic+0x1c>)
 80014ee:	f000 fb4c 	bl	8001b8a <HAL_GPIO_WritePin>
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000108 	.word	0x20000108
 80014fc:	40010800 	.word	0x40010800

08001500 <getUpdateFlag>:
  * @note   the flag is clear by "void traffic_display(void)"
  *
  * @param  None
  * @retval A flag to indicate the period is done
  */
uint8_t getUpdateFlag(void) {
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
	if(isUpdate) {
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <getUpdateFlag+0x20>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d004      	beq.n	8001516 <getUpdateFlag+0x16>
		isUpdate = 0;
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <getUpdateFlag+0x20>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
		return 1;
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <getUpdateFlag+0x18>
	}
	return 0;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	2000010a 	.word	0x2000010a

08001524 <updateNextPeriod>:
void updateNextPeriod(void) {
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
	isUpdate = 1;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <updateNextPeriod+0x14>)
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	2000010a 	.word	0x2000010a

0800153c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800153c:	480c      	ldr	r0, [pc, #48]	; (8001570 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800153e:	490d      	ldr	r1, [pc, #52]	; (8001574 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001540:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001544:	e002      	b.n	800154c <LoopCopyDataInit>

08001546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154a:	3304      	adds	r3, #4

0800154c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800154c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001550:	d3f9      	bcc.n	8001546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001554:	4c0a      	ldr	r4, [pc, #40]	; (8001580 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001558:	e001      	b.n	800155e <LoopFillZerobss>

0800155a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800155c:	3204      	adds	r2, #4

0800155e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001560:	d3fb      	bcc.n	800155a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001562:	f7ff fc41 	bl	8000de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001566:	f001 fb27 	bl	8002bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800156a:	f7ff fa5b 	bl	8000a24 <main>
  bx lr
 800156e:	4770      	bx	lr
  ldr r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001574:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001578:	08002d7c 	.word	0x08002d7c
  ldr r2, =_sbss
 800157c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001580:	2000017c 	.word	0x2000017c

08001584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC1_2_IRQHandler>
	...

08001588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_Init+0x28>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_Init+0x28>)
 8001592:	f043 0310 	orr.w	r3, r3, #16
 8001596:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001598:	2003      	movs	r0, #3
 800159a:	f000 f923 	bl	80017e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159e:	200f      	movs	r0, #15
 80015a0:	f000 f808 	bl	80015b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a4:	f7ff fb48 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40022000 	.word	0x40022000

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_InitTick+0x54>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_InitTick+0x58>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f93b 	bl	800184e <HAL_SYSTICK_Config>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e00e      	b.n	8001600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b0f      	cmp	r3, #15
 80015e6:	d80a      	bhi.n	80015fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e8:	2200      	movs	r2, #0
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f000 f903 	bl	80017fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f4:	4a06      	ldr	r2, [pc, #24]	; (8001610 <HAL_InitTick+0x5c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e000      	b.n	8001600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000020 	.word	0x20000020
 800160c:	20000028 	.word	0x20000028
 8001610:	20000024 	.word	0x20000024

08001614 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_IncTick+0x1c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_IncTick+0x20>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	4a03      	ldr	r2, [pc, #12]	; (8001634 <HAL_IncTick+0x20>)
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	20000028 	.word	0x20000028
 8001634:	20000168 	.word	0x20000168

08001638 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b02      	ldr	r3, [pc, #8]	; (8001648 <HAL_GetTick+0x10>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	20000168 	.word	0x20000168

0800164c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001668:	4013      	ands	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800167e:	4a04      	ldr	r2, [pc, #16]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	60d3      	str	r3, [r2, #12]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <__NVIC_GetPriorityGrouping+0x18>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	f003 0307 	and.w	r3, r3, #7
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db0b      	blt.n	80016da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	f003 021f 	and.w	r2, r3, #31
 80016c8:	4906      	ldr	r1, [pc, #24]	; (80016e4 <__NVIC_EnableIRQ+0x34>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	2001      	movs	r0, #1
 80016d2:	fa00 f202 	lsl.w	r2, r0, r2
 80016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	e000e100 	.word	0xe000e100

080016e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db0a      	blt.n	8001712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	490c      	ldr	r1, [pc, #48]	; (8001734 <__NVIC_SetPriority+0x4c>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	440b      	add	r3, r1
 800170c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001710:	e00a      	b.n	8001728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4908      	ldr	r1, [pc, #32]	; (8001738 <__NVIC_SetPriority+0x50>)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	3b04      	subs	r3, #4
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	440b      	add	r3, r1
 8001726:	761a      	strb	r2, [r3, #24]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f1c3 0307 	rsb	r3, r3, #7
 8001756:	2b04      	cmp	r3, #4
 8001758:	bf28      	it	cs
 800175a:	2304      	movcs	r3, #4
 800175c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3304      	adds	r3, #4
 8001762:	2b06      	cmp	r3, #6
 8001764:	d902      	bls.n	800176c <NVIC_EncodePriority+0x30>
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3b03      	subs	r3, #3
 800176a:	e000      	b.n	800176e <NVIC_EncodePriority+0x32>
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	f04f 32ff 	mov.w	r2, #4294967295
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43da      	mvns	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	401a      	ands	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	43d9      	mvns	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	4313      	orrs	r3, r2
         );
}
 8001796:	4618      	mov	r0, r3
 8001798:	3724      	adds	r7, #36	; 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b0:	d301      	bcc.n	80017b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00f      	b.n	80017d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <SysTick_Config+0x40>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017be:	210f      	movs	r1, #15
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f7ff ff90 	bl	80016e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <SysTick_Config+0x40>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ce:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <SysTick_Config+0x40>)
 80017d0:	2207      	movs	r2, #7
 80017d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	e000e010 	.word	0xe000e010

080017e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff2d 	bl	800164c <__NVIC_SetPriorityGrouping>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800180c:	f7ff ff42 	bl	8001694 <__NVIC_GetPriorityGrouping>
 8001810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	6978      	ldr	r0, [r7, #20]
 8001818:	f7ff ff90 	bl	800173c <NVIC_EncodePriority>
 800181c:	4602      	mov	r2, r0
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff5f 	bl	80016e8 <__NVIC_SetPriority>
}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff35 	bl	80016b0 <__NVIC_EnableIRQ>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ffa2 	bl	80017a0 <SysTick_Config>
 800185c:	4603      	mov	r3, r0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001868:	b480      	push	{r7}
 800186a:	b08b      	sub	sp, #44	; 0x2c
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001872:	2300      	movs	r3, #0
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187a:	e148      	b.n	8001b0e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800187c:	2201      	movs	r2, #1
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	429a      	cmp	r2, r3
 8001896:	f040 8137 	bne.w	8001b08 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4aa3      	ldr	r2, [pc, #652]	; (8001b2c <HAL_GPIO_Init+0x2c4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d05e      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018a4:	4aa1      	ldr	r2, [pc, #644]	; (8001b2c <HAL_GPIO_Init+0x2c4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d875      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018aa:	4aa1      	ldr	r2, [pc, #644]	; (8001b30 <HAL_GPIO_Init+0x2c8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d058      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018b0:	4a9f      	ldr	r2, [pc, #636]	; (8001b30 <HAL_GPIO_Init+0x2c8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d86f      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018b6:	4a9f      	ldr	r2, [pc, #636]	; (8001b34 <HAL_GPIO_Init+0x2cc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d052      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018bc:	4a9d      	ldr	r2, [pc, #628]	; (8001b34 <HAL_GPIO_Init+0x2cc>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d869      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018c2:	4a9d      	ldr	r2, [pc, #628]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d04c      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018c8:	4a9b      	ldr	r2, [pc, #620]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d863      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018ce:	4a9b      	ldr	r2, [pc, #620]	; (8001b3c <HAL_GPIO_Init+0x2d4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d046      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018d4:	4a99      	ldr	r2, [pc, #612]	; (8001b3c <HAL_GPIO_Init+0x2d4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d85d      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018da:	2b12      	cmp	r3, #18
 80018dc:	d82a      	bhi.n	8001934 <HAL_GPIO_Init+0xcc>
 80018de:	2b12      	cmp	r3, #18
 80018e0:	d859      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018e2:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <HAL_GPIO_Init+0x80>)
 80018e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e8:	08001963 	.word	0x08001963
 80018ec:	0800193d 	.word	0x0800193d
 80018f0:	0800194f 	.word	0x0800194f
 80018f4:	08001991 	.word	0x08001991
 80018f8:	08001997 	.word	0x08001997
 80018fc:	08001997 	.word	0x08001997
 8001900:	08001997 	.word	0x08001997
 8001904:	08001997 	.word	0x08001997
 8001908:	08001997 	.word	0x08001997
 800190c:	08001997 	.word	0x08001997
 8001910:	08001997 	.word	0x08001997
 8001914:	08001997 	.word	0x08001997
 8001918:	08001997 	.word	0x08001997
 800191c:	08001997 	.word	0x08001997
 8001920:	08001997 	.word	0x08001997
 8001924:	08001997 	.word	0x08001997
 8001928:	08001997 	.word	0x08001997
 800192c:	08001945 	.word	0x08001945
 8001930:	08001959 	.word	0x08001959
 8001934:	4a82      	ldr	r2, [pc, #520]	; (8001b40 <HAL_GPIO_Init+0x2d8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d013      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800193a:	e02c      	b.n	8001996 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	623b      	str	r3, [r7, #32]
          break;
 8001942:	e029      	b.n	8001998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	3304      	adds	r3, #4
 800194a:	623b      	str	r3, [r7, #32]
          break;
 800194c:	e024      	b.n	8001998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	3308      	adds	r3, #8
 8001954:	623b      	str	r3, [r7, #32]
          break;
 8001956:	e01f      	b.n	8001998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	330c      	adds	r3, #12
 800195e:	623b      	str	r3, [r7, #32]
          break;
 8001960:	e01a      	b.n	8001998 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800196a:	2304      	movs	r3, #4
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e013      	b.n	8001998 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d105      	bne.n	8001984 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001978:	2308      	movs	r3, #8
 800197a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	611a      	str	r2, [r3, #16]
          break;
 8001982:	e009      	b.n	8001998 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001984:	2308      	movs	r3, #8
 8001986:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	615a      	str	r2, [r3, #20]
          break;
 800198e:	e003      	b.n	8001998 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
          break;
 8001994:	e000      	b.n	8001998 <HAL_GPIO_Init+0x130>
          break;
 8001996:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2bff      	cmp	r3, #255	; 0xff
 800199c:	d801      	bhi.n	80019a2 <HAL_GPIO_Init+0x13a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	e001      	b.n	80019a6 <HAL_GPIO_Init+0x13e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3304      	adds	r3, #4
 80019a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	2bff      	cmp	r3, #255	; 0xff
 80019ac:	d802      	bhi.n	80019b4 <HAL_GPIO_Init+0x14c>
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	e002      	b.n	80019ba <HAL_GPIO_Init+0x152>
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	3b08      	subs	r3, #8
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	210f      	movs	r1, #15
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	401a      	ands	r2, r3
 80019cc:	6a39      	ldr	r1, [r7, #32]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	431a      	orrs	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 8090 	beq.w	8001b08 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019e8:	4b56      	ldr	r3, [pc, #344]	; (8001b44 <HAL_GPIO_Init+0x2dc>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a55      	ldr	r2, [pc, #340]	; (8001b44 <HAL_GPIO_Init+0x2dc>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b53      	ldr	r3, [pc, #332]	; (8001b44 <HAL_GPIO_Init+0x2dc>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a00:	4a51      	ldr	r2, [pc, #324]	; (8001b48 <HAL_GPIO_Init+0x2e0>)
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4013      	ands	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a49      	ldr	r2, [pc, #292]	; (8001b4c <HAL_GPIO_Init+0x2e4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d00d      	beq.n	8001a48 <HAL_GPIO_Init+0x1e0>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a48      	ldr	r2, [pc, #288]	; (8001b50 <HAL_GPIO_Init+0x2e8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d007      	beq.n	8001a44 <HAL_GPIO_Init+0x1dc>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a47      	ldr	r2, [pc, #284]	; (8001b54 <HAL_GPIO_Init+0x2ec>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <HAL_GPIO_Init+0x1d8>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e004      	b.n	8001a4a <HAL_GPIO_Init+0x1e2>
 8001a40:	2303      	movs	r3, #3
 8001a42:	e002      	b.n	8001a4a <HAL_GPIO_Init+0x1e2>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <HAL_GPIO_Init+0x1e2>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4c:	f002 0203 	and.w	r2, r2, #3
 8001a50:	0092      	lsls	r2, r2, #2
 8001a52:	4093      	lsls	r3, r2
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a5a:	493b      	ldr	r1, [pc, #236]	; (8001b48 <HAL_GPIO_Init+0x2e0>)
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	089b      	lsrs	r3, r3, #2
 8001a60:	3302      	adds	r3, #2
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d006      	beq.n	8001a82 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a74:	4b38      	ldr	r3, [pc, #224]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4937      	ldr	r1, [pc, #220]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a82:	4b35      	ldr	r3, [pc, #212]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	4933      	ldr	r1, [pc, #204]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a9c:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	492d      	ldr	r1, [pc, #180]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4929      	ldr	r1, [pc, #164]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ac4:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	4923      	ldr	r1, [pc, #140]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	491f      	ldr	r1, [pc, #124]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d006      	beq.n	8001afa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	4919      	ldr	r1, [pc, #100]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	60cb      	str	r3, [r1, #12]
 8001af8:	e006      	b.n	8001b08 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	4915      	ldr	r1, [pc, #84]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f47f aeaf 	bne.w	800187c <HAL_GPIO_Init+0x14>
  }
}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	372c      	adds	r7, #44	; 0x2c
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	10320000 	.word	0x10320000
 8001b30:	10310000 	.word	0x10310000
 8001b34:	10220000 	.word	0x10220000
 8001b38:	10210000 	.word	0x10210000
 8001b3c:	10120000 	.word	0x10120000
 8001b40:	10110000 	.word	0x10110000
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40010000 	.word	0x40010000
 8001b4c:	40010800 	.word	0x40010800
 8001b50:	40010c00 	.word	0x40010c00
 8001b54:	40011000 	.word	0x40011000
 8001b58:	40010400 	.word	0x40010400

08001b5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	887b      	ldrh	r3, [r7, #2]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e001      	b.n	8001b7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr

08001b8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	460b      	mov	r3, r1
 8001b94:	807b      	strh	r3, [r7, #2]
 8001b96:	4613      	mov	r3, r2
 8001b98:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b9a:	787b      	ldrb	r3, [r7, #1]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba0:	887a      	ldrh	r2, [r7, #2]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ba6:	e003      	b.n	8001bb0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ba8:	887b      	ldrh	r3, [r7, #2]
 8001baa:	041a      	lsls	r2, r3, #16
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	611a      	str	r2, [r3, #16]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b085      	sub	sp, #20
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bcc:	887a      	ldrh	r2, [r7, #2]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	041a      	lsls	r2, r3, #16
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43d9      	mvns	r1, r3
 8001bd8:	887b      	ldrh	r3, [r7, #2]
 8001bda:	400b      	ands	r3, r1
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	611a      	str	r2, [r3, #16]
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e26c      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 8087 	beq.w	8001d1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c0c:	4b92      	ldr	r3, [pc, #584]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d00c      	beq.n	8001c32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c18:	4b8f      	ldr	r3, [pc, #572]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 030c 	and.w	r3, r3, #12
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d112      	bne.n	8001c4a <HAL_RCC_OscConfig+0x5e>
 8001c24:	4b8c      	ldr	r3, [pc, #560]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c30:	d10b      	bne.n	8001c4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c32:	4b89      	ldr	r3, [pc, #548]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d06c      	beq.n	8001d18 <HAL_RCC_OscConfig+0x12c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d168      	bne.n	8001d18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e246      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c52:	d106      	bne.n	8001c62 <HAL_RCC_OscConfig+0x76>
 8001c54:	4b80      	ldr	r3, [pc, #512]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a7f      	ldr	r2, [pc, #508]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	e02e      	b.n	8001cc0 <HAL_RCC_OscConfig+0xd4>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x98>
 8001c6a:	4b7b      	ldr	r3, [pc, #492]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a7a      	ldr	r2, [pc, #488]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b78      	ldr	r3, [pc, #480]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a77      	ldr	r2, [pc, #476]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e01d      	b.n	8001cc0 <HAL_RCC_OscConfig+0xd4>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0xbc>
 8001c8e:	4b72      	ldr	r3, [pc, #456]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a71      	ldr	r2, [pc, #452]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b6f      	ldr	r3, [pc, #444]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a6e      	ldr	r2, [pc, #440]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e00b      	b.n	8001cc0 <HAL_RCC_OscConfig+0xd4>
 8001ca8:	4b6b      	ldr	r3, [pc, #428]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a6a      	ldr	r2, [pc, #424]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4b68      	ldr	r3, [pc, #416]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a67      	ldr	r2, [pc, #412]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d013      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fcb6 	bl	8001638 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff fcb2 	bl	8001638 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	; 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e1fa      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	4b5d      	ldr	r3, [pc, #372]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0xe4>
 8001cee:	e014      	b.n	8001d1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fca2 	bl	8001638 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf8:	f7ff fc9e 	bl	8001638 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b64      	cmp	r3, #100	; 0x64
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e1e6      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0a:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x10c>
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d063      	beq.n	8001dee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d26:	4b4c      	ldr	r3, [pc, #304]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00b      	beq.n	8001d4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d32:	4b49      	ldr	r3, [pc, #292]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d11c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x18c>
 8001d3e:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d116      	bne.n	8001d78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4a:	4b43      	ldr	r3, [pc, #268]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d005      	beq.n	8001d62 <HAL_RCC_OscConfig+0x176>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d001      	beq.n	8001d62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e1ba      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d62:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4939      	ldr	r1, [pc, #228]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d76:	e03a      	b.n	8001dee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d020      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d80:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d86:	f7ff fc57 	bl	8001638 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8e:	f7ff fc53 	bl	8001638 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e19b      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da0:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dac:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4927      	ldr	r1, [pc, #156]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]
 8001dc0:	e015      	b.n	8001dee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc2:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fc36 	bl	8001638 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd0:	f7ff fc32 	bl	8001638 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e17a      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de2:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d03a      	beq.n	8001e70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d019      	beq.n	8001e36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_RCC_OscConfig+0x274>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e08:	f7ff fc16 	bl	8001638 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e10:	f7ff fc12 	bl	8001638 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e15a      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f000 faa6 	bl	8002380 <RCC_Delay>
 8001e34:	e01c      	b.n	8001e70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_RCC_OscConfig+0x274>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3c:	f7ff fbfc 	bl	8001638 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e42:	e00f      	b.n	8001e64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e44:	f7ff fbf8 	bl	8001638 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d908      	bls.n	8001e64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e140      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	42420000 	.word	0x42420000
 8001e60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e64:	4b9e      	ldr	r3, [pc, #632]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1e9      	bne.n	8001e44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80a6 	beq.w	8001fca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e82:	4b97      	ldr	r3, [pc, #604]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10d      	bne.n	8001eaa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4b94      	ldr	r3, [pc, #592]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	4a93      	ldr	r2, [pc, #588]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e98:	61d3      	str	r3, [r2, #28]
 8001e9a:	4b91      	ldr	r3, [pc, #580]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eaa:	4b8e      	ldr	r3, [pc, #568]	; (80020e4 <HAL_RCC_OscConfig+0x4f8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d118      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb6:	4b8b      	ldr	r3, [pc, #556]	; (80020e4 <HAL_RCC_OscConfig+0x4f8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a8a      	ldr	r2, [pc, #552]	; (80020e4 <HAL_RCC_OscConfig+0x4f8>)
 8001ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec2:	f7ff fbb9 	bl	8001638 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eca:	f7ff fbb5 	bl	8001638 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b64      	cmp	r3, #100	; 0x64
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e0fd      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001edc:	4b81      	ldr	r3, [pc, #516]	; (80020e4 <HAL_RCC_OscConfig+0x4f8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d106      	bne.n	8001efe <HAL_RCC_OscConfig+0x312>
 8001ef0:	4b7b      	ldr	r3, [pc, #492]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4a7a      	ldr	r2, [pc, #488]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6213      	str	r3, [r2, #32]
 8001efc:	e02d      	b.n	8001f5a <HAL_RCC_OscConfig+0x36e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x334>
 8001f06:	4b76      	ldr	r3, [pc, #472]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4a75      	ldr	r2, [pc, #468]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	6213      	str	r3, [r2, #32]
 8001f12:	4b73      	ldr	r3, [pc, #460]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	4a72      	ldr	r2, [pc, #456]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	f023 0304 	bic.w	r3, r3, #4
 8001f1c:	6213      	str	r3, [r2, #32]
 8001f1e:	e01c      	b.n	8001f5a <HAL_RCC_OscConfig+0x36e>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	d10c      	bne.n	8001f42 <HAL_RCC_OscConfig+0x356>
 8001f28:	4b6d      	ldr	r3, [pc, #436]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	4a6c      	ldr	r2, [pc, #432]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	6213      	str	r3, [r2, #32]
 8001f34:	4b6a      	ldr	r3, [pc, #424]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	4a69      	ldr	r2, [pc, #420]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6213      	str	r3, [r2, #32]
 8001f40:	e00b      	b.n	8001f5a <HAL_RCC_OscConfig+0x36e>
 8001f42:	4b67      	ldr	r3, [pc, #412]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4a66      	ldr	r2, [pc, #408]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	6213      	str	r3, [r2, #32]
 8001f4e:	4b64      	ldr	r3, [pc, #400]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	4a63      	ldr	r2, [pc, #396]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	f023 0304 	bic.w	r3, r3, #4
 8001f58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d015      	beq.n	8001f8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f62:	f7ff fb69 	bl	8001638 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7ff fb65 	bl	8001638 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e0ab      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	4b57      	ldr	r3, [pc, #348]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0ee      	beq.n	8001f6a <HAL_RCC_OscConfig+0x37e>
 8001f8c:	e014      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff fb53 	bl	8001638 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f96:	f7ff fb4f 	bl	8001638 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e095      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fac:	4b4c      	ldr	r3, [pc, #304]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1ee      	bne.n	8001f96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d105      	bne.n	8001fca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fbe:	4b48      	ldr	r3, [pc, #288]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4a47      	ldr	r2, [pc, #284]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 8081 	beq.w	80020d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fd4:	4b42      	ldr	r3, [pc, #264]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d061      	beq.n	80020a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d146      	bne.n	8002076 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe8:	4b3f      	ldr	r3, [pc, #252]	; (80020e8 <HAL_RCC_OscConfig+0x4fc>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7ff fb23 	bl	8001638 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff6:	f7ff fb1f 	bl	8001638 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e067      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002008:	4b35      	ldr	r3, [pc, #212]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f0      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201c:	d108      	bne.n	8002030 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800201e:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	492d      	ldr	r1, [pc, #180]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002030:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a19      	ldr	r1, [r3, #32]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	430b      	orrs	r3, r1
 8002042:	4927      	ldr	r1, [pc, #156]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002048:	4b27      	ldr	r3, [pc, #156]	; (80020e8 <HAL_RCC_OscConfig+0x4fc>)
 800204a:	2201      	movs	r2, #1
 800204c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204e:	f7ff faf3 	bl	8001638 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002056:	f7ff faef 	bl	8001638 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e037      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002068:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x46a>
 8002074:	e02f      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_RCC_OscConfig+0x4fc>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7ff fadc 	bl	8001638 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002084:	f7ff fad8 	bl	8001638 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e020      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002096:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x498>
 80020a2:	e018      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e013      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40007000 	.word	0x40007000
 80020e8:	42420060 	.word	0x42420060

080020ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0d0      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002100:	4b6a      	ldr	r3, [pc, #424]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d910      	bls.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b67      	ldr	r3, [pc, #412]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 0207 	bic.w	r2, r3, #7
 8002116:	4965      	ldr	r1, [pc, #404]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b63      	ldr	r3, [pc, #396]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b8      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002148:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a58      	ldr	r2, [pc, #352]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002152:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002160:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800216a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	494d      	ldr	r1, [pc, #308]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d040      	beq.n	800220c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d115      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e073      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e06b      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4936      	ldr	r1, [pc, #216]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021dc:	f7ff fa2c 	bl	8001638 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7ff fa28 	bl	8001638 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e053      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d210      	bcs.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 0207 	bic.w	r2, r3, #7
 8002222:	4922      	ldr	r1, [pc, #136]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e032      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4916      	ldr	r1, [pc, #88]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	490e      	ldr	r1, [pc, #56]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800227a:	f000 f821 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 800227e:	4602      	mov	r2, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	490a      	ldr	r1, [pc, #40]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	5ccb      	ldrb	r3, [r1, r3]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1d0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff f98a 	bl	80015b4 <HAL_InitTick>

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40022000 	.word	0x40022000
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08002d60 	.word	0x08002d60
 80022b8:	20000020 	.word	0x20000020
 80022bc:	20000024 	.word	0x20000024

080022c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	b490      	push	{r4, r7}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022c6:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022c8:	1d3c      	adds	r4, r7, #4
 80022ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022d0:	f240 2301 	movw	r3, #513	; 0x201
 80022d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022ea:	4b22      	ldr	r3, [pc, #136]	; (8002374 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d002      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x40>
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d003      	beq.n	8002306 <HAL_RCC_GetSysClockFreq+0x46>
 80022fe:	e02d      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002302:	623b      	str	r3, [r7, #32]
      break;
 8002304:	e02d      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	0c9b      	lsrs	r3, r3, #18
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002312:	4413      	add	r3, r2
 8002314:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002318:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	0c5b      	lsrs	r3, r3, #17
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002332:	4413      	add	r3, r2
 8002334:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002338:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	4a0e      	ldr	r2, [pc, #56]	; (8002378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800233e:	fb02 f203 	mul.w	r2, r2, r3
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	fbb2 f3f3 	udiv	r3, r2, r3
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
 800234a:	e004      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	4a0b      	ldr	r2, [pc, #44]	; (800237c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002350:	fb02 f303 	mul.w	r3, r2, r3
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	623b      	str	r3, [r7, #32]
      break;
 800235a:	e002      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800235e:	623b      	str	r3, [r7, #32]
      break;
 8002360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002362:	6a3b      	ldr	r3, [r7, #32]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3728      	adds	r7, #40	; 0x28
 8002368:	46bd      	mov	sp, r7
 800236a:	bc90      	pop	{r4, r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	08002d28 	.word	0x08002d28
 8002374:	40021000 	.word	0x40021000
 8002378:	007a1200 	.word	0x007a1200
 800237c:	003d0900 	.word	0x003d0900

08002380 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <RCC_Delay+0x34>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <RCC_Delay+0x38>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	0a5b      	lsrs	r3, r3, #9
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800239c:	bf00      	nop
  }
  while (Delay --);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1e5a      	subs	r2, r3, #1
 80023a2:	60fa      	str	r2, [r7, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f9      	bne.n	800239c <RCC_Delay+0x1c>
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	20000020 	.word	0x20000020
 80023b8:	10624dd3 	.word	0x10624dd3

080023bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e041      	b.n	8002452 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7fe fc5a 	bl	8000c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3304      	adds	r3, #4
 80023f8:	4619      	mov	r1, r3
 80023fa:	4610      	mov	r0, r2
 80023fc:	f000 fa6a 	bl	80028d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b01      	cmp	r3, #1
 800246e:	d001      	beq.n	8002474 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e035      	b.n	80024e0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a16      	ldr	r2, [pc, #88]	; (80024ec <HAL_TIM_Base_Start_IT+0x90>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d009      	beq.n	80024aa <HAL_TIM_Base_Start_IT+0x4e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249e:	d004      	beq.n	80024aa <HAL_TIM_Base_Start_IT+0x4e>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <HAL_TIM_Base_Start_IT+0x94>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d111      	bne.n	80024ce <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b06      	cmp	r3, #6
 80024ba:	d010      	beq.n	80024de <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024cc:	e007      	b.n	80024de <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0201 	orr.w	r2, r2, #1
 80024dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40012c00 	.word	0x40012c00
 80024f0:	40000400 	.word	0x40000400

080024f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b02      	cmp	r3, #2
 8002508:	d122      	bne.n	8002550 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b02      	cmp	r3, #2
 8002516:	d11b      	bne.n	8002550 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0202 	mvn.w	r2, #2
 8002520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f9b1 	bl	800289e <HAL_TIM_IC_CaptureCallback>
 800253c:	e005      	b.n	800254a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f9a4 	bl	800288c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f9b3 	bl	80028b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b04      	cmp	r3, #4
 800255c:	d122      	bne.n	80025a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b04      	cmp	r3, #4
 800256a:	d11b      	bne.n	80025a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0204 	mvn.w	r2, #4
 8002574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2202      	movs	r2, #2
 800257a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f987 	bl	800289e <HAL_TIM_IC_CaptureCallback>
 8002590:	e005      	b.n	800259e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f97a 	bl	800288c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f989 	bl	80028b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d122      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d11b      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f06f 0208 	mvn.w	r2, #8
 80025c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2204      	movs	r2, #4
 80025ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f95d 	bl	800289e <HAL_TIM_IC_CaptureCallback>
 80025e4:	e005      	b.n	80025f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f950 	bl	800288c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f95f 	bl	80028b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	2b10      	cmp	r3, #16
 8002604:	d122      	bne.n	800264c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b10      	cmp	r3, #16
 8002612:	d11b      	bne.n	800264c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0210 	mvn.w	r2, #16
 800261c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2208      	movs	r2, #8
 8002622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f933 	bl	800289e <HAL_TIM_IC_CaptureCallback>
 8002638:	e005      	b.n	8002646 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f926 	bl	800288c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f935 	bl	80028b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b01      	cmp	r3, #1
 8002658:	d10e      	bne.n	8002678 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b01      	cmp	r3, #1
 8002666:	d107      	bne.n	8002678 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0201 	mvn.w	r2, #1
 8002670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fe fd5e 	bl	8001134 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	2b80      	cmp	r3, #128	; 0x80
 8002684:	d10e      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002690:	2b80      	cmp	r3, #128	; 0x80
 8002692:	d107      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800269c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fa67 	bl	8002b72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	2b40      	cmp	r3, #64	; 0x40
 80026b0:	d10e      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026bc:	2b40      	cmp	r3, #64	; 0x40
 80026be:	d107      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f8f9 	bl	80028c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	2b20      	cmp	r3, #32
 80026dc:	d10e      	bne.n	80026fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	d107      	bne.n	80026fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0220 	mvn.w	r2, #32
 80026f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fa32 	bl	8002b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_TIM_ConfigClockSource+0x18>
 8002718:	2302      	movs	r3, #2
 800271a:	e0b3      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x180>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800273a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002742:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002754:	d03e      	beq.n	80027d4 <HAL_TIM_ConfigClockSource+0xd0>
 8002756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800275a:	f200 8087 	bhi.w	800286c <HAL_TIM_ConfigClockSource+0x168>
 800275e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002762:	f000 8085 	beq.w	8002870 <HAL_TIM_ConfigClockSource+0x16c>
 8002766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276a:	d87f      	bhi.n	800286c <HAL_TIM_ConfigClockSource+0x168>
 800276c:	2b70      	cmp	r3, #112	; 0x70
 800276e:	d01a      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0xa2>
 8002770:	2b70      	cmp	r3, #112	; 0x70
 8002772:	d87b      	bhi.n	800286c <HAL_TIM_ConfigClockSource+0x168>
 8002774:	2b60      	cmp	r3, #96	; 0x60
 8002776:	d050      	beq.n	800281a <HAL_TIM_ConfigClockSource+0x116>
 8002778:	2b60      	cmp	r3, #96	; 0x60
 800277a:	d877      	bhi.n	800286c <HAL_TIM_ConfigClockSource+0x168>
 800277c:	2b50      	cmp	r3, #80	; 0x50
 800277e:	d03c      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0xf6>
 8002780:	2b50      	cmp	r3, #80	; 0x50
 8002782:	d873      	bhi.n	800286c <HAL_TIM_ConfigClockSource+0x168>
 8002784:	2b40      	cmp	r3, #64	; 0x40
 8002786:	d058      	beq.n	800283a <HAL_TIM_ConfigClockSource+0x136>
 8002788:	2b40      	cmp	r3, #64	; 0x40
 800278a:	d86f      	bhi.n	800286c <HAL_TIM_ConfigClockSource+0x168>
 800278c:	2b30      	cmp	r3, #48	; 0x30
 800278e:	d064      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x156>
 8002790:	2b30      	cmp	r3, #48	; 0x30
 8002792:	d86b      	bhi.n	800286c <HAL_TIM_ConfigClockSource+0x168>
 8002794:	2b20      	cmp	r3, #32
 8002796:	d060      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x156>
 8002798:	2b20      	cmp	r3, #32
 800279a:	d867      	bhi.n	800286c <HAL_TIM_ConfigClockSource+0x168>
 800279c:	2b00      	cmp	r3, #0
 800279e:	d05c      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x156>
 80027a0:	2b10      	cmp	r3, #16
 80027a2:	d05a      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027a4:	e062      	b.n	800286c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	6899      	ldr	r1, [r3, #8]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f000 f95c 	bl	8002a72 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	609a      	str	r2, [r3, #8]
      break;
 80027d2:	e04e      	b.n	8002872 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6899      	ldr	r1, [r3, #8]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f000 f945 	bl	8002a72 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027f6:	609a      	str	r2, [r3, #8]
      break;
 80027f8:	e03b      	b.n	8002872 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6859      	ldr	r1, [r3, #4]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	461a      	mov	r2, r3
 8002808:	f000 f8bc 	bl	8002984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2150      	movs	r1, #80	; 0x50
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f913 	bl	8002a3e <TIM_ITRx_SetConfig>
      break;
 8002818:	e02b      	b.n	8002872 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	461a      	mov	r2, r3
 8002828:	f000 f8da 	bl	80029e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2160      	movs	r1, #96	; 0x60
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f903 	bl	8002a3e <TIM_ITRx_SetConfig>
      break;
 8002838:	e01b      	b.n	8002872 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	461a      	mov	r2, r3
 8002848:	f000 f89c 	bl	8002984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2140      	movs	r1, #64	; 0x40
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f8f3 	bl	8002a3e <TIM_ITRx_SetConfig>
      break;
 8002858:	e00b      	b.n	8002872 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4619      	mov	r1, r3
 8002864:	4610      	mov	r0, r2
 8002866:	f000 f8ea 	bl	8002a3e <TIM_ITRx_SetConfig>
        break;
 800286a:	e002      	b.n	8002872 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800286c:	bf00      	nop
 800286e:	e000      	b.n	8002872 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002870:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a25      	ldr	r2, [pc, #148]	; (800297c <TIM_Base_SetConfig+0xa8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d007      	beq.n	80028fc <TIM_Base_SetConfig+0x28>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f2:	d003      	beq.n	80028fc <TIM_Base_SetConfig+0x28>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a22      	ldr	r2, [pc, #136]	; (8002980 <TIM_Base_SetConfig+0xac>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d108      	bne.n	800290e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a1a      	ldr	r2, [pc, #104]	; (800297c <TIM_Base_SetConfig+0xa8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d007      	beq.n	8002926 <TIM_Base_SetConfig+0x52>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291c:	d003      	beq.n	8002926 <TIM_Base_SetConfig+0x52>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a17      	ldr	r2, [pc, #92]	; (8002980 <TIM_Base_SetConfig+0xac>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d108      	bne.n	8002938 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800292c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a07      	ldr	r2, [pc, #28]	; (800297c <TIM_Base_SetConfig+0xa8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d103      	bne.n	800296c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	615a      	str	r2, [r3, #20]
}
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	40012c00 	.word	0x40012c00
 8002980:	40000400 	.word	0x40000400

08002984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	f023 0201 	bic.w	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f023 030a 	bic.w	r3, r3, #10
 80029c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	621a      	str	r2, [r3, #32]
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f023 0210 	bic.w	r2, r3, #16
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	031b      	lsls	r3, r3, #12
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	621a      	str	r2, [r3, #32]
}
 8002a34:	bf00      	nop
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f043 0307 	orr.w	r3, r3, #7
 8002a60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	609a      	str	r2, [r3, #8]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b087      	sub	sp, #28
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	021a      	lsls	r2, r3, #8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	609a      	str	r2, [r3, #8]
}
 8002aa6:	bf00      	nop
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e041      	b.n	8002b4c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a14      	ldr	r2, [pc, #80]	; (8002b58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d009      	beq.n	8002b20 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b14:	d004      	beq.n	8002b20 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a10      	ldr	r2, [pc, #64]	; (8002b5c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d10c      	bne.n	8002b3a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	40000400 	.word	0x40000400

08002b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr

08002b72 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <__errno>:
 8002b84:	4b01      	ldr	r3, [pc, #4]	; (8002b8c <__errno+0x8>)
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	2000002c 	.word	0x2000002c

08002b90 <exit>:
 8002b90:	b508      	push	{r3, lr}
 8002b92:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <exit+0x20>)
 8002b94:	4604      	mov	r4, r0
 8002b96:	b113      	cbz	r3, 8002b9e <exit+0xe>
 8002b98:	2100      	movs	r1, #0
 8002b9a:	f3af 8000 	nop.w
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <exit+0x24>)
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002ba4:	b103      	cbz	r3, 8002ba8 <exit+0x18>
 8002ba6:	4798      	blx	r3
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f7fe f8dd 	bl	8000d68 <_exit>
 8002bae:	bf00      	nop
 8002bb0:	00000000 	.word	0x00000000
 8002bb4:	08002d70 	.word	0x08002d70

08002bb8 <__libc_init_array>:
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	2600      	movs	r6, #0
 8002bbc:	4d0c      	ldr	r5, [pc, #48]	; (8002bf0 <__libc_init_array+0x38>)
 8002bbe:	4c0d      	ldr	r4, [pc, #52]	; (8002bf4 <__libc_init_array+0x3c>)
 8002bc0:	1b64      	subs	r4, r4, r5
 8002bc2:	10a4      	asrs	r4, r4, #2
 8002bc4:	42a6      	cmp	r6, r4
 8002bc6:	d109      	bne.n	8002bdc <__libc_init_array+0x24>
 8002bc8:	f000 f8a2 	bl	8002d10 <_init>
 8002bcc:	2600      	movs	r6, #0
 8002bce:	4d0a      	ldr	r5, [pc, #40]	; (8002bf8 <__libc_init_array+0x40>)
 8002bd0:	4c0a      	ldr	r4, [pc, #40]	; (8002bfc <__libc_init_array+0x44>)
 8002bd2:	1b64      	subs	r4, r4, r5
 8002bd4:	10a4      	asrs	r4, r4, #2
 8002bd6:	42a6      	cmp	r6, r4
 8002bd8:	d105      	bne.n	8002be6 <__libc_init_array+0x2e>
 8002bda:	bd70      	pop	{r4, r5, r6, pc}
 8002bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be0:	4798      	blx	r3
 8002be2:	3601      	adds	r6, #1
 8002be4:	e7ee      	b.n	8002bc4 <__libc_init_array+0xc>
 8002be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bea:	4798      	blx	r3
 8002bec:	3601      	adds	r6, #1
 8002bee:	e7f2      	b.n	8002bd6 <__libc_init_array+0x1e>
 8002bf0:	08002d74 	.word	0x08002d74
 8002bf4:	08002d74 	.word	0x08002d74
 8002bf8:	08002d74 	.word	0x08002d74
 8002bfc:	08002d78 	.word	0x08002d78

08002c00 <malloc>:
 8002c00:	4b02      	ldr	r3, [pc, #8]	; (8002c0c <malloc+0xc>)
 8002c02:	4601      	mov	r1, r0
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	f000 b80b 	b.w	8002c20 <_malloc_r>
 8002c0a:	bf00      	nop
 8002c0c:	2000002c 	.word	0x2000002c

08002c10 <memset>:
 8002c10:	4603      	mov	r3, r0
 8002c12:	4402      	add	r2, r0
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d100      	bne.n	8002c1a <memset+0xa>
 8002c18:	4770      	bx	lr
 8002c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c1e:	e7f9      	b.n	8002c14 <memset+0x4>

08002c20 <_malloc_r>:
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c22:	1ccd      	adds	r5, r1, #3
 8002c24:	f025 0503 	bic.w	r5, r5, #3
 8002c28:	3508      	adds	r5, #8
 8002c2a:	2d0c      	cmp	r5, #12
 8002c2c:	bf38      	it	cc
 8002c2e:	250c      	movcc	r5, #12
 8002c30:	2d00      	cmp	r5, #0
 8002c32:	4606      	mov	r6, r0
 8002c34:	db01      	blt.n	8002c3a <_malloc_r+0x1a>
 8002c36:	42a9      	cmp	r1, r5
 8002c38:	d903      	bls.n	8002c42 <_malloc_r+0x22>
 8002c3a:	230c      	movs	r3, #12
 8002c3c:	6033      	str	r3, [r6, #0]
 8002c3e:	2000      	movs	r0, #0
 8002c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c42:	f000 f857 	bl	8002cf4 <__malloc_lock>
 8002c46:	4921      	ldr	r1, [pc, #132]	; (8002ccc <_malloc_r+0xac>)
 8002c48:	680a      	ldr	r2, [r1, #0]
 8002c4a:	4614      	mov	r4, r2
 8002c4c:	b99c      	cbnz	r4, 8002c76 <_malloc_r+0x56>
 8002c4e:	4f20      	ldr	r7, [pc, #128]	; (8002cd0 <_malloc_r+0xb0>)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	b923      	cbnz	r3, 8002c5e <_malloc_r+0x3e>
 8002c54:	4621      	mov	r1, r4
 8002c56:	4630      	mov	r0, r6
 8002c58:	f000 f83c 	bl	8002cd4 <_sbrk_r>
 8002c5c:	6038      	str	r0, [r7, #0]
 8002c5e:	4629      	mov	r1, r5
 8002c60:	4630      	mov	r0, r6
 8002c62:	f000 f837 	bl	8002cd4 <_sbrk_r>
 8002c66:	1c43      	adds	r3, r0, #1
 8002c68:	d123      	bne.n	8002cb2 <_malloc_r+0x92>
 8002c6a:	230c      	movs	r3, #12
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	6033      	str	r3, [r6, #0]
 8002c70:	f000 f846 	bl	8002d00 <__malloc_unlock>
 8002c74:	e7e3      	b.n	8002c3e <_malloc_r+0x1e>
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	1b5b      	subs	r3, r3, r5
 8002c7a:	d417      	bmi.n	8002cac <_malloc_r+0x8c>
 8002c7c:	2b0b      	cmp	r3, #11
 8002c7e:	d903      	bls.n	8002c88 <_malloc_r+0x68>
 8002c80:	6023      	str	r3, [r4, #0]
 8002c82:	441c      	add	r4, r3
 8002c84:	6025      	str	r5, [r4, #0]
 8002c86:	e004      	b.n	8002c92 <_malloc_r+0x72>
 8002c88:	6863      	ldr	r3, [r4, #4]
 8002c8a:	42a2      	cmp	r2, r4
 8002c8c:	bf0c      	ite	eq
 8002c8e:	600b      	streq	r3, [r1, #0]
 8002c90:	6053      	strne	r3, [r2, #4]
 8002c92:	4630      	mov	r0, r6
 8002c94:	f000 f834 	bl	8002d00 <__malloc_unlock>
 8002c98:	f104 000b 	add.w	r0, r4, #11
 8002c9c:	1d23      	adds	r3, r4, #4
 8002c9e:	f020 0007 	bic.w	r0, r0, #7
 8002ca2:	1ac2      	subs	r2, r0, r3
 8002ca4:	d0cc      	beq.n	8002c40 <_malloc_r+0x20>
 8002ca6:	1a1b      	subs	r3, r3, r0
 8002ca8:	50a3      	str	r3, [r4, r2]
 8002caa:	e7c9      	b.n	8002c40 <_malloc_r+0x20>
 8002cac:	4622      	mov	r2, r4
 8002cae:	6864      	ldr	r4, [r4, #4]
 8002cb0:	e7cc      	b.n	8002c4c <_malloc_r+0x2c>
 8002cb2:	1cc4      	adds	r4, r0, #3
 8002cb4:	f024 0403 	bic.w	r4, r4, #3
 8002cb8:	42a0      	cmp	r0, r4
 8002cba:	d0e3      	beq.n	8002c84 <_malloc_r+0x64>
 8002cbc:	1a21      	subs	r1, r4, r0
 8002cbe:	4630      	mov	r0, r6
 8002cc0:	f000 f808 	bl	8002cd4 <_sbrk_r>
 8002cc4:	3001      	adds	r0, #1
 8002cc6:	d1dd      	bne.n	8002c84 <_malloc_r+0x64>
 8002cc8:	e7cf      	b.n	8002c6a <_malloc_r+0x4a>
 8002cca:	bf00      	nop
 8002ccc:	2000010c 	.word	0x2000010c
 8002cd0:	20000110 	.word	0x20000110

08002cd4 <_sbrk_r>:
 8002cd4:	b538      	push	{r3, r4, r5, lr}
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	4d05      	ldr	r5, [pc, #20]	; (8002cf0 <_sbrk_r+0x1c>)
 8002cda:	4604      	mov	r4, r0
 8002cdc:	4608      	mov	r0, r1
 8002cde:	602b      	str	r3, [r5, #0]
 8002ce0:	f7fe f84c 	bl	8000d7c <_sbrk>
 8002ce4:	1c43      	adds	r3, r0, #1
 8002ce6:	d102      	bne.n	8002cee <_sbrk_r+0x1a>
 8002ce8:	682b      	ldr	r3, [r5, #0]
 8002cea:	b103      	cbz	r3, 8002cee <_sbrk_r+0x1a>
 8002cec:	6023      	str	r3, [r4, #0]
 8002cee:	bd38      	pop	{r3, r4, r5, pc}
 8002cf0:	2000016c 	.word	0x2000016c

08002cf4 <__malloc_lock>:
 8002cf4:	4801      	ldr	r0, [pc, #4]	; (8002cfc <__malloc_lock+0x8>)
 8002cf6:	f000 b809 	b.w	8002d0c <__retarget_lock_acquire_recursive>
 8002cfa:	bf00      	nop
 8002cfc:	20000174 	.word	0x20000174

08002d00 <__malloc_unlock>:
 8002d00:	4801      	ldr	r0, [pc, #4]	; (8002d08 <__malloc_unlock+0x8>)
 8002d02:	f000 b804 	b.w	8002d0e <__retarget_lock_release_recursive>
 8002d06:	bf00      	nop
 8002d08:	20000174 	.word	0x20000174

08002d0c <__retarget_lock_acquire_recursive>:
 8002d0c:	4770      	bx	lr

08002d0e <__retarget_lock_release_recursive>:
 8002d0e:	4770      	bx	lr

08002d10 <_init>:
 8002d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d12:	bf00      	nop
 8002d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d16:	bc08      	pop	{r3}
 8002d18:	469e      	mov	lr, r3
 8002d1a:	4770      	bx	lr

08002d1c <_fini>:
 8002d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1e:	bf00      	nop
 8002d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d22:	bc08      	pop	{r3}
 8002d24:	469e      	mov	lr, r3
 8002d26:	4770      	bx	lr
